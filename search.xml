<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springMVC内部</title>
      <link href="/2020/03/17/springMVC%E5%86%85%E9%83%A8/"/>
      <url>/2020/03/17/springMVC%E5%86%85%E9%83%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><h4 id="MVC配置"><a class="header-anchor" href="#MVC配置">¶</a>MVC配置</h4><p>实际上想要了解关于mvc配置的最简单方式就是阅读<br><code>web.servlet.config</code>包代码,该包代码描述的xml配置方式对于<code>&lt;mvc:&gt;</code>标签的解析方式<br><code>web.servlet.config.annotation</code>描述使用注解,抛弃xml的方式如何配置mvc</p><h5 id="注解方式"><a class="header-anchor" href="#注解方式">¶</a>注解方式</h5><h6 id="WebApplicationInitializer体系"><a class="header-anchor" href="#WebApplicationInitializer体系">¶</a>WebApplicationInitializer体系</h6><p>简单来说该体系用来使用注解方式确定ioc和mvc容器入口</p><ul><li>SpringServletContainerInitializer接口<br>该接口是<code>ServletContainerInitializer</code>,由servlet标准定义,该接口会将所有WebApplicationInitializer调用</li><li>WebApplicationInitializer辅助类  <img src="/2020/03/17/springMVC%E5%86%85%E9%83%A8/WebApplicationInitializer.png" class="">  <figure class="highlight java"><figcaption><span>WebApplicationInitializer.png</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//--------------------AbstractContextLoaderInitializer------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">registerContextLoaderListener(servletContext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建ioc容器,并且注册监听器  </span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerContextLoaderListener</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">  WebApplicationContext rootAppContext = createRootApplicationContext();</span><br><span class="line">  <span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">  ContextLoaderListener listener = <span class="keyword">new</span> ContextLoaderListener(rootAppContext);</span><br><span class="line">  listener.setContextInitializers(getRootApplicationContextInitializers());</span><br><span class="line">  servletContext.addListener(listener);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  logger.debug(<span class="string">"No ContextLoaderListener registered, as "</span> +</span><br><span class="line">  <span class="string">"createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="comment">//------------------------AbstractDispatcherServletInitializer---------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onStartup(servletContext);</span><br><span class="line">registerDispatcherServlet(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//注册mvc容器,并且创建FrameworkServlet,并且将该servlet设置为1级启动</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDispatcherServlet</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">String servletName = getServletName();</span><br><span class="line">Assert.hasLength(servletName, <span class="string">"getServletName() must not return null or empty"</span>);</span><br><span class="line"></span><br><span class="line">WebApplicationContext servletAppContext = createServletApplicationContext();</span><br><span class="line">Assert.notNull(servletAppContext, <span class="string">"createServletApplicationContext() must not return null"</span>);</span><br><span class="line"></span><br><span class="line">FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);</span><br><span class="line">Assert.notNull(dispatcherServlet, <span class="string">"createDispatcherServlet(WebApplicationContext) must not return null"</span>);</span><br><span class="line">dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers());</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);</span><br><span class="line"><span class="keyword">if</span> (registration == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to register servlet with name '"</span> + servletName + <span class="string">"'. "</span> +</span><br><span class="line"><span class="string">"Check if there is another servlet registered under the same name."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">registration.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">registration.addMapping(getServletMappings());</span><br><span class="line">registration.setAsyncSupported(isAsyncSupported());</span><br><span class="line"></span><br><span class="line">Filter[] filters = getServletFilters();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(filters)) &#123;</span><br><span class="line"><span class="keyword">for</span> (Filter filter : filters) &#123;</span><br><span class="line">registerServletFilter(servletContext, filter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customizeRegistration(registration);</span><br><span class="line">&#125;   </span><br><span class="line">  <span class="comment">//-----------------------AbstractAnnotationConfigDispatcherServletInitializer------------------------</span></span><br><span class="line">  <span class="comment">//由用户指定ioc和mvc容器的根类,并且可以知道这种情况下mvc框架内部的context是AnnotationConfigWebApplicationContext</span></span><br><span class="line">  <span class="comment">//xml配置时不是这种context</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt;[] configClasses = getRootConfigClasses();</span><br><span class="line">  <span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">    AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">    context.register(configClasses);</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AnnotationConfigWebApplicationContext context = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">Class&lt;?&gt;[] configClasses = getServletConfigClasses();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">context.register(configClasses);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//用户来指定ioc和mvc容器 根类</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getServletConfigClasses();</span><br></pre></td></tr></table></figure></li></ul><h6 id="WebMvcConfigurer体系"><a class="header-anchor" href="#WebMvcConfigurer体系">¶</a>WebMvcConfigurer体系</h6><p>简单来说该体系用来详细的确定mvc内部组件,由用户来个性化</p><ul><li>WebMvcConfigurationSupport:实际上属于javaConfig,是一个父类<ul><li>handler和mapping的创建,并为子类留下实现位置</li><li>异常处理器</li><li>默认的conversionService</li><li>…</li></ul></li><li>DelegatingWebMvcConfiguration  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//spring中典型的Composite,包含WebMvcConfigurer列表</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();  </span><br><span class="line"> <span class="comment">//  WebMvcConfigurer获取所有的WebMvcConfigurer</span></span><br><span class="line">   <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;  </span><br><span class="line"> <span class="comment">//这就是WebMvcConfigurationSupport留下的接口位置</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.configurers.addInterceptors(registry);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>  </li><li>WebMvcConfigurer:用户实现</li></ul><h5 id="springBoot对于mvc注解配置的运用"><a class="header-anchor" href="#springBoot对于mvc注解配置的运用">¶</a>springBoot对于mvc注解配置的运用</h5><p>xxxx</p><h4 id="springMVC概念"><a class="header-anchor" href="#springMVC概念">¶</a>springMVC概念</h4><p>在mvc框架中我们所要关注的点为控制器函数入参解析,回参解析,以及视图和模型</p><h5 id="模型"><a class="header-anchor" href="#模型">¶</a>模型</h5><ul><li><code>ModelAndViewContainer</code>:作为形参在入参处理,回参,过程中传递,包含了<code>view</code>,<code>model</code>,以及一些状态</li><li><code>Model</code>:实际上在spring的概念中本质就是一个集合,在单次请求处理过程作</li><li><code>DataBinder</code>:数据绑定(bind)的概念,实质是通过spring内省技术将<code>pvs</code>赋值到<code>target</code>中<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li><li><code>@InitBinder</code><ul><li>该注解只能用作于函数上,表示该函数要对此次mvc请求过程中创建的<code>DataBinder</code>进行设置从而会引发,入参,或回参过程<br>中的数据绑定(bind)和类型转换(converte),数据验证(valid)</li><li>该注解会生效的情况<ul><li>NamedValueMethod类型注解入参处理后的<code>类型转换</code></li><li><code>@ModelAttribute</code> 处理入参,并且该请求模型在<code>MVCContainer</code>中不存在,即新创建模型时会使用<code>bind</code>功能,以及<code>valid</code>功能</li><li><code>@RequestPart</code>和 <code>@RequestBody</code> 做<code>valid</code>功能</li><li><code>RedirectAttributes</code>作为形参时,传递</li></ul></li></ul></li></ul><h5 id="入参解析"><a class="header-anchor" href="#入参解析">¶</a>入参解析</h5><p>这部分内容是根据<code>HandlerMethodArgumentResolver</code>体系整理的</p><h6 id="NamedValueMethod"><a class="header-anchor" href="#NamedValueMethod">¶</a>NamedValueMethod</h6><p>这个名字根据入参解析器的父类<code>AbstractNamedValueMethodArgumentResolver</code>命名,这类注解一般都有共同点,<br>由<code>name</code>,<code>value</code>,<code>defaultValue</code>构成</p><ul><li><p>列举</p><ul><li>RequestHeader</li><li>RequestAttribute</li><li>RequestParam</li><li>CookieValue</li><li>MatrixVariable</li><li>SessionAttribute</li><li>Value</li><li>PathVariable</li></ul></li><li><p>支持Optional表示(4.0以上)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test3"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> Optional&lt;String&gt; name) </span>&#123;</span><br><span class="line">      System.out.println(name);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>   <ul><li>注意如果不使用springBoot,则需要主动配置一个能完成T-&gt;Optional的转换器  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//这样配置是因为spring本身没有给FormattingConversionService预留创建点,它默认创建无法转换T-&gt;Optional</span></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FormattingConversionService <span class="title">mvcConversionService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FormattingConversionService formattingConversionService = <span class="keyword">new</span> WebConversionService(<span class="keyword">null</span>);</span><br><span class="line">        addFormatters(formattingConversionService);</span><br><span class="line">        <span class="keyword">return</span> formattingConversionService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li>关于<code>CustomEditorConfigurer</code>,这玩意是对<code>BeanFactory</code>中创建的<code>BeanWrapperImpl</code>使用的,从它所在的包就能看出来</li></ul></li><li><p>使用el表达式</p><ul><li>注解中含有<code>name</code>属性,<code>default</code>都可以使用el表达式</li><li><code>@Value</code>如果使用在形参上可以直接使用el表达式<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanT</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String nameValue = <span class="string">"testValue"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNameValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(@RequestParam(value = <span class="string">"#&#123;beanT.name&#125;"</span>, defaultValue = <span class="string">"#&#123;beanT.nameValue&#125;"</span>)</span> String name,@<span class="title">Value</span><span class="params">(<span class="string">"#&#123;beanT&#125;"</span>)</span> BeanT beanT) </span>&#123;</span><br><span class="line">     System.out.println(name);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>@RequestAttribute</code>和<code>RequestParam</code>的区别<br>简单的来说就是后者表示servlet api中的请求参数,后者则是spring对<code>HttpServletRequest</code>又做了一层封装,获取这其中的属性,这个map在mvc流程做了很多工作</p></li><li><p>MatrixVariable:实际上就是url中使用;分割key-vlaue而不是&amp;</p><ul><li>开启矩阵变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> </span>&#123;</span><br><span class="line">        UrlPathHelper urlPathHelper=<span class="keyword">new</span> UrlPathHelper();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="keyword">false</span>); <span class="comment">//这个属性</span></span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml使用<code>&lt;annotation-driven enable-matrix-variables=&quot;true&quot; /&gt;</code>,可以观察源码,实际上处理mapping的中<code>urlPathHelper</code>的一个变量</p><ul><li>使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">  <span class="comment">//url:http://localhost/test4/path;key1=123;key2=333/next/p2;key1=222;key2=3333</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/test4/&#123;path&#125;/next/&#123;path2&#125;"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">(@MatrixVariable(value = <span class="string">"key1"</span>, pathVar = <span class="string">"path"</span>)</span> String key1, @MatrixVariable MultiValueMap&lt;String, String&gt; map, @<span class="title">MatrixVariable</span><span class="params">(value = <span class="string">"key1"</span>,pathVar = <span class="string">"path2"</span>)</span> String key12) </span>&#123;</span><br><span class="line">         System.out.println(key1); <span class="comment">//123</span></span><br><span class="line">         System.out.println(key12); <span class="comment">//222</span></span><br><span class="line">         System.out.println(map); <span class="comment">//key1:[123,222],key2:[333,3333]</span></span><br><span class="line">     &#125;</span><br><span class="line">- `pathVar`属性要和`&#123;&#125;`路径一起使用,解析器源码比较简单</span><br><span class="line">- map类型可以不带`pathVar`表示获取全部矩阵,String类型最好带上,否则会因为如果不同的`&#123;&#125;`路径出现两个相同key异常,如上</span><br><span class="line">- map如果不是MultiValueMap类型则只能获取到一个`&#123;&#125;`路径中的矩阵</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="map类型"><a class="header-anchor" href="#map类型">¶</a>map类型</h6><p>一般来说Map类型分两种,<code>Map</code>类型和<code>MultiValueMap</code>,后者内部是一个<code>Map&lt;String,List&lt;Object&gt;&gt;</code></p><ul><li><code>Map</code>形参:获取mvcContainter中所有的model属性</li><li><code>@PathVariable</code>和<code>Map</code>:获取占位符路径</li><li><code>@RequestHeader</code><ul><li><code>Map</code>:获取所有的请求头键值对,但是value只能拿到第一个</li><li><code>MultiValueMap</code>:可以获取所有</li></ul></li><li><code>@RequestParam</code><ul><li><code>MultiValueMap</code><ul><li><code>MultiValueMap&lt;String,MultipartFile&gt;</code>:获取多文件上传的所有文件</li><li><code>MultipartFile&lt;String,Part&gt;</code>:获取所有的Part</li><li><code>MultipartFile</code>:获取所有请求参数,value是一个list</li></ul></li><li><code>Map</code><br>-<code>Map&lt;x,MultipartFile&gt;</code><ul><li><code>Map&lt;x,Part</code>&gt;</li><li><code>Map</code></li></ul></li></ul></li><li><code>@MatrixVariable</code><ul><li><code>Map</code>:获取的value为第一个</li><li><code>MultiValueMap</code>:获取单一key的所有</li></ul></li></ul><h6 id="ModelAttribute注解"><a class="header-anchor" href="#ModelAttribute注解">¶</a>ModelAttribute注解</h6><ul><li>使用位置<ul><li>方法:表示该函数要创建一个model</li><li>参数:表示要获取一的model#value</li></ul></li><li>Type典型使用<ul><li>使用返回值创建model</li><li>使用形参创建<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller1</span></span>&#123;</span><br><span class="line">  <span class="meta">@ModelAttribute</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">genMod1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"value"</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@ModelAttribute</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">genMod2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">      model.addAttribute(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>两者区别:前者model的key由mvc生成,并且必须是该key之前不存在才能创建这个key-vlaue,后者可以覆盖</li></ul></li><li>Para典型使用<ul><li>获取mvcContainer中model<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(@ModelAndView(<span class="string">"key"</span>)</span>String key)</span>&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">    ```  </span><br><span class="line">- 特别点</span><br><span class="line">  - 当所有的`ModelAttribute`函数执行结束后,在真正调用控制器函数前,若改控制器上有参数带有`<span class="meta">@ModelAttribute</span>`并且</span><br><span class="line">  和`SessionAttributes`中任意name相同,则会从session中再次获取对应的值放置到mvcContainer中,若此时session没有则</span><br><span class="line">  抛出异常</span><br><span class="line">###### Errors</span><br><span class="line">该类实际上是mvc中数据绑定和验证过程中存放信息的类,典型子类`BindResult`</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(@Valid User,BindResult bind)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="ServletResponse"><a class="header-anchor" href="#ServletResponse">¶</a>ServletResponse</h6><p>三种参数</p><ul><li>ServletResponse</li><li>OutputStream</li><li>Writer</li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="/2020/03/10/spring%E5%86%85%E7%9C%81/#spring%E9%83%A8%E5%88%86">spring内省</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> springMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>io简单总结</title>
      <link href="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>本文用来简单分类java io,不做源码分析<br>整体按照类图来分类,实际上io应当按照基础和包装类分类,基本上java io中基础流实现功能,<br>包装流封装基础流完成进一步功能.</p><h4 id="inStream"><a class="header-anchor" href="#inStream">¶</a>inStream</h4><img src="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/in%E6%80%BB%E7%BB%93.png" class=""><p>jdk中in的意思表示指定来源,read函数表示从来源中按字节读取</p><ul><li>直接子类<ul><li>FileInputStream:文件读取</li><li>ByteArrayInputStream:从指定数组源中读取</li><li>PipedInputStream:和PipedOutputStream联合使用,实现原理通过共享一个数组,多线程间使用</li><li>SequenceInputStream:指定一组InputStream,当读取到当前流末尾则触发下一个</li><li>ObjectInputStream:序列化读取流</li></ul></li><li>Filter子类:典型的包装类<ul><li>BufferedInputStream:内部含有byte[],读取时,若数组未满,触发内部真正流的读取填充内部数组<br>否则直接获取数组数据</li><li>DataInpuStream:DataInput子类,ReadBoolen等函数按对应字节读取,然后进行类型转换</li></ul></li></ul><h4 id="outStream"><a class="header-anchor" href="#outStream">¶</a>outStream</h4><img src="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/out%E6%80%BB%E7%BB%93.png" class=""><ul><li>flsuh函数<ul><li>out流中的定义是调用时保证将存在缓存的情况真正刷新到目的地,如FileOutputStream这种<br>实现本身的write函数就不存在缓存,flush函数实际是空白的.</li><li>BufferedOutputStream的刷新时机在于write时内部buff已满,或主动调用flush</li></ul></li><li>PrintStream:System.out,内部封装了Writer,因此其print函数是调用Writer中的</li></ul><h4 id="reader"><a class="header-anchor" href="#reader">¶</a>reader</h4><img src="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/reader%E6%80%BB%E7%BB%93.png" class=""><ul><li>reader 实际上是对于字节的转换InputStreamReader包含了解码器StreamDecoder</li><li>BufferedReader,PipedReader都是包装类设计</li></ul><h4 id="writer"><a class="header-anchor" href="#writer">¶</a>writer</h4><img src="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/writer%E6%80%BB%E7%BB%93.png" class=""><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><img src="/2020/03/16/io%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/%E5%88%86%E7%B1%BB.png" class="">]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring架构整体</title>
      <link href="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/"/>
      <url>/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>本文尝试从宏观上分析Spring Framework的组织架构</p><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/4.x%E6%9E%B6%E6%9E%84.png" class=""><p>这幅图是官网4.x给出的组织架构,<a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/overview.html" target="_blank" rel="noopener">文档</a></p><h4 id="详细描述图"><a class="header-anchor" href="#详细描述图">¶</a>详细描述图</h4><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/%E6%A8%A1%E5%9D%97%E5%85%B3%E7%B3%BB.png" class=""><p>上图是根据模块间构建关系大致画的图</p><ul><li>并没有表达一个模块所有的依赖,仅仅是表示了spring内部模块的构建依赖</li><li>为了不让图看起来太复杂,有几个模块并没有画出来</li></ul><h5 id="分模块"><a class="header-anchor" href="#分模块">¶</a>分模块</h5><h6 id="JCL"><a class="header-anchor" href="#JCL">¶</a>JCL</h6><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/JCL%E5%8C%85.png" class=""><ul><li>描述<br>实际上该模块通过<code>spi</code>实现了运行时决定整体日志系统,spring并没有使用<code>ServiceLoader</code></li></ul><h6 id="CORE"><a class="header-anchor" href="#CORE">¶</a>CORE</h6><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/CORE%E5%8C%85.png" class=""><ul><li>概述<ul><li>asm包将<code>ASM</code>框架中的类直接重新打包到这里,实际上spring里cglib的实现直接调用这里接口,没有另外使用asm依赖</li><li>cglib包实现了cglib的一部分封装,供aop实现调用</li><li>lang包提供了对于jsr305的封装,以及废弃的条件编译注解</li><li>objenesis包提供了和jdk不同反射构造对象的能力,spring在<code>objenesis</code>框架上做了扩展</li><li>util包提供了花里胡哨的工具类</li><li>core:提供了转换器,codec,统一的io等</li></ul></li></ul><h6 id="BEANS"><a class="header-anchor" href="#BEANS">¶</a>BEANS</h6><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/BEANS%E5%8C%85.png" class=""><ul><li>概述<ul><li>非里层包:BeanWrap体系,PropertyValue体系</li><li>annotation:一个特别的注解工具类</li><li>facotry<ul><li>外部:beanfacotry定义,bean周期接口(initalizingBean…),三个基本aware接口,ObjectFactory</li><li>annotation:@Autowire,@Configurable,@Value,@Qualifer,以及<code>AGBD</code>,<code>InjectionMetadata</code>元信息</li><li>config:<code>BD</code>定义,<code>BF</code>的多种接口定义,后处理器接口,<code>PropertyPlaceholderConfigurer</code>,以及一些<code>FactoryBean</code></li><li>supprot:<code>DLFC</code>定义,<code>RBD</code>定义,<code>Managed*</code>定义</li><li>xml:定义了xml解析器,完成xml解析的框架,提供了关于<Bean>标签处理的<code>parse</code></li></ul></li><li>propertyeditors:类型转换器</li></ul></li><li>大致的知识点</li></ul><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/Beans%E4%BD%93%E7%B3%BB.png" class=""><h6 id="AOP"><a class="header-anchor" href="#AOP">¶</a>AOP</h6><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/AOP%E5%8C%85.png" class=""><ul><li>概述<ul><li>aopalliance:定义了<code>advice</code>,<code>intercept</code>,<code>pointcut</code>等aop中的概念接口</li><li>framework:这是aop的实现核心逻辑<ul><li>framework.adaptor:适配器,实现advisor到intercept的转换</li><li>autoproxy:以后处理器为逻辑,实现了spring aop的自动代理</li><li>外部:由ProxyFactory为外层接口,实现了对于jdk和cglib代理的实现,这里的入口不支持<code>asepctj</code>语法</li></ul></li><li>外部:定义了如前置advice,后置advice,以及advisor接口</li><li>supprot:定义了众多的advisor或pointCut实现</li></ul></li><li>大致知识点</li></ul><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/Aop%E4%BD%93%E7%B3%BB.png" class="">  <h6 id="INSTRUMENT"><a class="header-anchor" href="#INSTRUMENT">¶</a>INSTRUMENT</h6><img src="/2020/03/11/spring%E6%9E%B6%E6%9E%84%E6%95%B4%E4%BD%93/INSTRUMENT%E5%8C%85.png" class=""><ul><li>概述<ul><li>InstrumentationSavingAgent:是java agent的入口类,该类实际上在spring中作为一个静态类被CONTEXT模块使用<br>给需要使用<code>LTW</code>的地方提供了<code>Instrumentation</code></li></ul></li></ul><h6 id="CONTEXT"><a class="header-anchor" href="#CONTEXT">¶</a>CONTEXT</h6>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring内省</title>
      <link href="/2020/03/10/spring%E5%86%85%E7%9C%81/"/>
      <url>/2020/03/10/spring%E5%86%85%E7%9C%81/</url>
      
        <content type="html"><![CDATA[<h3 id="概况"><a class="header-anchor" href="#概况">¶</a>概况</h3><p>jdk提供了完善的内省机制,spring的<code>BeanWrapper</code>体系使用到了该部分,参考<a href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/#beanwrapper">beanwrapper</a>分析<br>在jdk中将该部分api归类到了java.desktop中</p><h4 id="jdk内省"><a class="header-anchor" href="#jdk内省">¶</a>jdk内省</h4><h5 id="BeanInfo"><a class="header-anchor" href="#BeanInfo">¶</a>BeanInfo</h5><p>表示一个类内部的信息</p><figure class="highlight java"><figcaption><span>BeanInfo</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanInfo</span> </span>&#123;</span><br><span class="line"><span class="function">BeanDescriptor <span class="title">getBeanDescriptor</span><span class="params">()</span></span>; <span class="comment">//描述类本身</span></span><br><span class="line">EventSetDescriptor[] getEventSetDescriptors();<span class="comment">//事件</span></span><br><span class="line">PropertyDescriptor[] getPropertyDescriptors();<span class="comment">//属性</span></span><br><span class="line">MethodDescriptor[] getMethodDescriptors();<span class="comment">//方法</span></span><br><span class="line"><span class="function">Image <span class="title">getIcon</span><span class="params">(<span class="keyword">int</span> iconKind)</span></span>;<span class="comment">//图形开发使用的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">BeanInfoTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BeanInfo beanInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            beanInfo = Introspector.getBeanInfo(User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pds = beanInfo.getPropertyDescriptors();</span><br><span class="line">        <span class="keyword">var</span> beanInfos = beanInfo.getAdditionalBeanInfo();</span><br><span class="line">        <span class="keyword">var</span> bd = beanInfo.getBeanDescriptor();</span><br><span class="line">        <span class="keyword">var</span> md =beanInfo.getMethodDescriptors();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="PropertyDescriptor"><a class="header-anchor" href="#PropertyDescriptor">¶</a>PropertyDescriptor</h5><p>描述一个类中的属性</p><figure class="highlight java"><figcaption><span>PropertyDescriptor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyDescriptor</span> <span class="keyword">extends</span> <span class="title">FeatureDescriptor</span> </span>&#123;</span><br><span class="line">  <span class="comment">//分别获取set|get函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Method <span class="title">getWriteMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Method <span class="title">getReadMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">getPropertyType</span><span class="params">()</span><span class="comment">//属性类型</span></span></span><br><span class="line"><span class="function">&#125;  </span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">propertyDescriptorTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     PropertyDescriptor propertyDescriptor = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         propertyDescriptor = <span class="keyword">new</span> PropertyDescriptor(<span class="string">"name"</span>, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IntrospectionException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println(propertyDescriptor.getShortDescription());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="spring部分"><a class="header-anchor" href="#spring部分">¶</a>spring部分</h4><h5 id="BeanWrapper关于属性设置的实现"><a class="header-anchor" href="#BeanWrapper关于属性设置的实现">¶</a>BeanWrapper关于属性设置的实现</h5><p>这个体系的实现类<code>BeanWrapperImpl</code> 持有真正对象<code>wrappedObject</code>,调用setPorperty,实际就给内部Object属性设置,存在类型转换<br><code>AbstractNestablePropertyAccessor</code>表示可以对一个对象进行嵌套设置</p><ul><li>例子</li></ul><figure class="highlight java"><figcaption><span>例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意要提供get|set函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; departments;</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String departmentName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     BeanWrapperImpl beanWrapper = <span class="keyword">new</span> BeanWrapperImpl(Company<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">     <span class="comment">//表示如果中间属性未设置的情况,spring会创建默认中间值</span></span><br><span class="line">     beanWrapper.setAutoGrowNestedPaths(<span class="keyword">true</span>);</span><br><span class="line">     beanWrapper.setPropertyValue(<span class="string">"companyName"</span>,<span class="string">"co.LTD"</span>);</span><br><span class="line">     beanWrapper.setPropertyValue(<span class="string">"boss.name"</span>,<span class="string">"xx"</span>);</span><br><span class="line">     beanWrapper.setPropertyValue(<span class="string">"departments[0].departmentName"</span>,<span class="string">"testPart"</span>);</span><br><span class="line">     beanWrapper.setPropertyValue(<span class="string">"departments[0].employees[0].name"</span>,<span class="string">"wang2gou"</span>);</span><br><span class="line">     beanWrapper.setPropertyValue(<span class="string">"departments[1]"</span>,<span class="keyword">new</span> Department());</span><br><span class="line">        Company</span><br><span class="line">     <span class="comment">//正确设置</span></span><br><span class="line">     Company company = (Company) beanWrapper.getWrappedInstance();</span><br><span class="line"> &#125;        </span><br></pre></td></tr></table></figure><h5 id="AbstractNestablePropertyAccessor原理"><a class="header-anchor" href="#AbstractNestablePropertyAccessor原理">¶</a>AbstractNestablePropertyAccessor原理</h5><p>顾名思义该类表示属性可嵌套,如上述例子可知,对象A.b.c的这样的情况,实际在该类每一个节点都表现为一个ANPA,源码采用递归层级的实现.<br>简单来说即按照分割符<code>.</code>来确定属性层级,父层级缓存次层级,以此类推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Company</span><br><span class="line">       |                  ---departmentName   </span><br><span class="line">       ----departments----|</span><br><span class="line">       |                  ---employees  </span><br><span class="line">       ----companyName</span><br><span class="line">       |</span><br><span class="line">       ----boss--</span><br><span class="line">                |</span><br><span class="line">                ---name</span><br></pre></td></tr></table></figure><p>实际上每个属性都会被转换为ANPA</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractNestablePropertyAccessor</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyAccessor</span> </span>&#123;</span><br><span class="line">  <span class="comment">//当前层级的对象</span></span><br><span class="line">  Object wrappedObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String nestedPath = <span class="string">""</span>;</span><br><span class="line">  <span class="comment">//最外层对象</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Object rootObject;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//当前对象的缓存的次级别对象</span></span><br><span class="line"><span class="comment">/** Map with cached nested Accessors: nested path -&gt; Accessor instance. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, AbstractNestablePropertyAccessor&gt; nestedPropertyAccessors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里提到的属性可能是单一对象,或者数组,集合,下文用[]表示后者情况.</p><h6 id="PropertyHandler"><a class="header-anchor" href="#PropertyHandler">¶</a>PropertyHandler</h6><p>该类是spring实现了,用来描述属性性质的封装类,用来判断能否读写,并且也由该类来完成对于真正包装对象属性的读写</p><figure class="highlight java"><figcaption><span>PropertyHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ANPA的内部类,具体由子类实现</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; propertyType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> readable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> writable;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertyHandler</span><span class="params">(Class&lt;?&gt; propertyType, <span class="keyword">boolean</span> readable, <span class="keyword">boolean</span> writable)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.propertyType = propertyType;</span><br><span class="line"><span class="keyword">this</span>.readable = readable;</span><br><span class="line"><span class="keyword">this</span>.writable = writable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getPropertyType() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.propertyType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.readable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isWritable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.writable;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">getValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(@Nullable Object value)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//----------------------BeanWrapperImpl实现----------------------------------</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPropertyHandler</span> <span class="keyword">extends</span> <span class="title">PropertyHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部实际封装了PD</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PropertyDescriptor pd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BeanPropertyHandler</span><span class="params">(PropertyDescriptor pd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(pd.getPropertyType(), pd.getReadMethod() != <span class="keyword">null</span>, pd.getWriteMethod() != <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">this</span>.pd = pd;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Method readMethod = <span class="keyword">this</span>.pd.getReadMethod();</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">ReflectionUtils.makeAccessible(readMethod);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//使用内省wrappedObject的对应属性值</span></span><br><span class="line"><span class="keyword">return</span> AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt;</span><br><span class="line">readMethod.invoke(getWrappedInstance(), (Object[]) <span class="keyword">null</span>), acc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line"><span class="keyword">throw</span> pae.getException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ReflectionUtils.makeAccessible(readMethod);</span><br><span class="line"><span class="keyword">return</span> readMethod.invoke(getWrappedInstance(), (Object[]) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//内省设置wrappedObject的对应属性值</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">final</span> @Nullable Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Method writeMethod = (<span class="keyword">this</span>.pd <span class="keyword">instanceof</span> GenericTypeAwarePropertyDescriptor ?</span><br><span class="line">((GenericTypeAwarePropertyDescriptor) <span class="keyword">this</span>.pd).getWriteMethodForActualAccess() :</span><br><span class="line"><span class="keyword">this</span>.pd.getWriteMethod());</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">ReflectionUtils.makeAccessible(writeMethod);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt;</span><br><span class="line">writeMethod.invoke(getWrappedInstance(), value), acc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PrivilegedActionException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex.getException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">ReflectionUtils.makeAccessible(writeMethod);</span><br><span class="line">writeMethod.invoke(getWrappedInstance(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//-----------------获取PropertyHandler,子类实现------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> BeanPropertyHandler <span class="title">getLocalPropertyHandler</span><span class="params">(String propertyName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//CachedIntrospectionResults实际上封装了BeanInfo,因此获取到PropertyDescriptor不是问题</span></span><br><span class="line">PropertyDescriptor pd = getCachedIntrospectionResults().getPropertyDescriptor(propertyName);</span><br><span class="line">    <span class="comment">//创建BeanPropertyHandler</span></span><br><span class="line"><span class="keyword">return</span> (pd != <span class="keyword">null</span> ? <span class="keyword">new</span> BeanPropertyHandler(pd) : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PropertyTokenHolder"><a class="header-anchor" href="#PropertyTokenHolder">¶</a>PropertyTokenHolder</h6><p>对于一个属性的Token表示</p><figure class="highlight java"><figcaption><span>PropertyTokenHolder</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyTokenHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PropertyTokenHolder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.actualName = name;</span><br><span class="line">    <span class="keyword">this</span>.canonicalName = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属性的实际名称</span></span><br><span class="line">  <span class="keyword">public</span> String actualName;</span><br><span class="line">  <span class="comment">//用户使用时,可能的名称 如departments[0]</span></span><br><span class="line">  <span class="keyword">public</span> String canonicalName;</span><br><span class="line">  <span class="comment">//当访问的属性是[]这样情况,keys就是[]内部的值</span></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">public</span> String[] keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="读取实现逻辑"><a class="header-anchor" href="#读取实现逻辑">¶</a>读取实现逻辑</h6><img src="/2020/03/10/spring%E5%86%85%E7%9C%81/get%E9%80%BB%E8%BE%91.png" class=""><ul><li>逻辑线</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPropertyValue</span><span class="params">(String propertyName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">    <span class="comment">//获取正确的层级ANPA</span></span><br><span class="line">AbstractNestablePropertyAccessor nestedPa = getPropertyAccessorForPropertyPath(propertyName);</span><br><span class="line">    <span class="comment">//创建tokens</span></span><br><span class="line">PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName));</span><br><span class="line">    <span class="comment">//正确的获取值</span></span><br><span class="line"><span class="keyword">return</span> nestedPa.getPropertyValue(tokens);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据tokens获取对应属性的值</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">getPropertyValue</span><span class="params">(PropertyTokenHolder tokens)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">String propertyName = tokens.canonicalName;</span><br><span class="line">String actualName = tokens.actualName;</span><br><span class="line">    <span class="comment">//[1] 对应的ph获取</span></span><br><span class="line">PropertyHandler ph = getLocalPropertyHandler(actualName);</span><br><span class="line"><span class="keyword">if</span> (ph == <span class="keyword">null</span> || !ph.isReadable()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotReadablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//[1!]</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//[2] 内省获取对应的值</span></span><br><span class="line">Object value = ph.getValue();</span><br><span class="line"><span class="keyword">if</span> (tokens.keys != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; <span class="comment">//这说明此时tokens获取的[]未设置默认值</span></span><br><span class="line"><span class="keyword">if</span> (isAutoGrowNestedPaths()) &#123;</span><br><span class="line">            <span class="comment">//此处设置的value一定是一个空数组|空集合,而对应key的值还是null</span></span><br><span class="line">            <span class="comment">//注意此时使用actualName创建token,也就是说此处仅仅给[]类型创建默认值</span></span><br><span class="line">value = setDefaultValue(<span class="keyword">new</span> PropertyTokenHolder(tokens.actualName));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Cannot access indexed value of property referenced in indexed "</span> +</span><br><span class="line"><span class="string">"property path '"</span> + propertyName + <span class="string">"': returned null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder indexedPropertyName = <span class="keyword">new</span> StringBuilder(tokens.actualName);</span><br><span class="line">        <span class="comment">//[2!]</span></span><br><span class="line"><span class="comment">// apply indexes and map keys</span></span><br><span class="line">        <span class="comment">//[3] 根据tokens的中key处理[]情况,给对应的位置创建默认值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tokens.keys.length; i++) &#123;</span><br><span class="line">String key = tokens.keys[i];</span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Cannot access indexed value of property referenced in indexed "</span> +</span><br><span class="line"><span class="string">"property path '"</span> + propertyName + <span class="string">"': returned null"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value.getClass().isArray()) &#123;</span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(key);</span><br><span class="line">value = growArrayIfNecessary(value, index, indexedPropertyName.toString());</span><br><span class="line">value = Array.get(value, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(key);</span><br><span class="line">List&lt;Object&gt; list = (List&lt;Object&gt;) value;</span><br><span class="line">growCollectionIfNecessary(list, index, indexedPropertyName.toString(), ph, i + <span class="number">1</span>);</span><br><span class="line">value = list.get(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Set) &#123;</span><br><span class="line"><span class="comment">// Apply index to Iterator in case of a Set.</span></span><br><span class="line">Set&lt;Object&gt; set = (Set&lt;Object&gt;) value;</span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(key);</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= set.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Cannot get element with index "</span> + index + <span class="string">" from Set of size "</span> +</span><br><span class="line">set.size() + <span class="string">", accessed using property path '"</span> + propertyName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Iterator&lt;Object&gt; it = set.iterator();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; it.hasNext(); j++) &#123;</span><br><span class="line">Object elem = it.next();</span><br><span class="line"><span class="keyword">if</span> (j == index) &#123;</span><br><span class="line">value = elem;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">Map&lt;Object, Object&gt; map = (Map&lt;Object, Object&gt;) value;</span><br><span class="line">Class&lt;?&gt; mapKeyType = ph.getResolvableType().getNested(i + <span class="number">1</span>).asMap().resolveGeneric(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// IMPORTANT: Do not pass full property name in here - property editors</span></span><br><span class="line"><span class="comment">// must not kick in for map keys but rather only for map values.</span></span><br><span class="line">TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);</span><br><span class="line">Object convertedMapKey = convertIfNecessary(<span class="keyword">null</span>, <span class="keyword">null</span>, key, mapKeyType, typeDescriptor);</span><br><span class="line">value = map.get(convertedMapKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Property referenced in indexed property path '"</span> + propertyName +</span><br><span class="line"><span class="string">"' is neither an array nor a List nor a Set nor a Map; returned value was ["</span> + value + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">indexedPropertyName.append(PROPERTY_KEY_PREFIX).append(key).append(PROPERTY_KEY_SUFFIX);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//[3!]</span></span><br><span class="line"><span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Index of out of bounds in property path '"</span> + propertyName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NumberFormatException | TypeMismatchException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Invalid index in property path '"</span> + propertyName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Getter for property '"</span> + actualName + <span class="string">"' threw exception"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Illegal attempt to get property '"</span> + actualName + <span class="string">"' threw exception"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取对应层次ANPA</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该函数的递归调用会导致AbstractNestablePropertyAccessor一层一层向下创建,一直返回最后一层的</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AbstractNestablePropertyAccessor <span class="title">getPropertyAccessorForPropertyPath</span><span class="params">(String propertyPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath);</span><br><span class="line">    <span class="comment">// Handle nested properties recursively.</span></span><br><span class="line">    <span class="keyword">if</span> (pos &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      String nestedProperty = propertyPath.substring(<span class="number">0</span>, pos);</span><br><span class="line">      String nestedPath = propertyPath.substring(pos + <span class="number">1</span>);</span><br><span class="line">      <span class="comment">//根据当前属性在当前ANPA获取由该属性封装的ANPA</span></span><br><span class="line">      <span class="comment">//"departments[0].employees[0].name"为例子,第一次该函数返回封装departments[0]的AbstractNestablePropertyAccessor</span></span><br><span class="line">      <span class="comment">//再由此为出发点获取后边的部分,一直到最后的封装了name的的AbstractNestablePropertyAccessor,则递归返回</span></span><br><span class="line">      AbstractNestablePropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty);</span><br><span class="line">      <span class="comment">//获取分隔符后边的</span></span><br><span class="line">      <span class="keyword">return</span> nestedPa.getPropertyAccessorForPropertyPath(nestedPath);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">//递归返回条件,即当前属性不存在.分割符,那么本身的ANPA就是正确的</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getFirstNestedPropertySeparatorIndex</span><span class="params">(String propertyPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getNestedPropertySeparatorIndex(propertyPath, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//last == false 意思是获取第一个分隔符的index,分隔符实际上就是 .</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNestedPropertySeparatorIndex</span><span class="params">(String propertyPath, <span class="keyword">boolean</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//true 表示当前下标在[]内部因此叫做inKey</span></span><br><span class="line">    <span class="keyword">boolean</span> inKey = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> length = propertyPath.length();</span><br><span class="line">    <span class="keyword">int</span> i = (last ? length - <span class="number">1</span> : <span class="number">0</span>); <span class="comment">//很容易想,让开始index=0表示从左开始, length-1表示从右开始</span></span><br><span class="line">    <span class="keyword">while</span> (last ? i &gt;= <span class="number">0</span> : i &lt; length) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (propertyPath.charAt(i)) &#123;</span><br><span class="line">        <span class="comment">//前两个case表示必须遇到一对[] inkey才能==false</span></span><br><span class="line">        <span class="keyword">case</span> PropertyAccessor.PROPERTY_KEY_PREFIX_CHAR: <span class="comment">// [ 符号</span></span><br><span class="line">        <span class="keyword">case</span> PropertyAccessor.PROPERTY_KEY_SUFFIX_CHAR: <span class="comment">// ] 符号</span></span><br><span class="line">          inKey = !inKey;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> PropertyAccessor.NESTED_PROPERTY_SEPARATOR_CHAR: <span class="comment">//遇到分隔符.</span></span><br><span class="line">          <span class="keyword">if</span> (!inKey) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (last) &#123;</span><br><span class="line">        i--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> AbstractNestablePropertyAccessor <span class="title">getNestedPropertyAccessor</span><span class="params">(String nestedProperty)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nestedPropertyAccessors == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.nestedPropertyAccessors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get value of bean property.</span></span><br><span class="line">    <span class="comment">//创建PropertyTokenHolder</span></span><br><span class="line">PropertyTokenHolder tokens = getPropertyNameTokens(nestedProperty);</span><br><span class="line">String canonicalName = tokens.canonicalName;</span><br><span class="line">    <span class="comment">//获取对应的值</span></span><br><span class="line">Object value = getPropertyValue(tokens);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span> || (value <span class="keyword">instanceof</span> Optional &amp;&amp; !((Optional) value).isPresent())) &#123;</span><br><span class="line">      <span class="comment">//如果走到这里说明嵌套类型不是数组|集合如 boss.name,在处理boss部分的时候此处value返回就是null</span></span><br><span class="line"><span class="keyword">if</span> (isAutoGrowNestedPaths()) &#123;</span><br><span class="line">value = setDefaultValue(tokens);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + canonicalName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前层级的AbstractNestablePropertyAccessor缓存次层级的</span></span><br><span class="line">AbstractNestablePropertyAccessor nestedPa = <span class="keyword">this</span>.nestedPropertyAccessors.get(canonicalName);</span><br><span class="line"><span class="keyword">if</span> (nestedPa == <span class="keyword">null</span> || nestedPa.getWrappedInstance() != ObjectUtils.unwrapOptional(value)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Creating new nested "</span> + getClass().getSimpleName() + <span class="string">" for property '"</span> + canonicalName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//根据此次层级属性创建次层级AbstractNestablePropertyAccessor,并由该层级缓存</span></span><br><span class="line">nestedPa = newNestedPropertyAccessor(value, <span class="keyword">this</span>.nestedPath + canonicalName + NESTED_PROPERTY_SEPARATOR);</span><br><span class="line"><span class="comment">// Inherit all type-specific PropertyEditors.</span></span><br><span class="line">copyDefaultEditorsTo(nestedPa);</span><br><span class="line">copyCustomEditorsTo(nestedPa, canonicalName);</span><br><span class="line"><span class="keyword">this</span>.nestedPropertyAccessors.put(canonicalName, nestedPa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Using cached nested property accessor for property '"</span> + canonicalName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nestedPa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">setDefaultValue</span><span class="params">(PropertyTokenHolder tokens)</span> </span>&#123;</span><br><span class="line">PropertyValue pv = createDefaultPropertyValue(tokens);</span><br><span class="line">    <span class="comment">//设置</span></span><br><span class="line">setPropertyValue(tokens, pv);</span><br><span class="line">    <span class="comment">//获取值</span></span><br><span class="line">Object defaultValue = getPropertyValue(tokens);</span><br><span class="line">Assert.state(defaultValue != <span class="keyword">null</span>, <span class="string">"Default value must not be null"</span>);</span><br><span class="line"><span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//根据类型创建一个默认pv并返回</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> PropertyValue <span class="title">createDefaultPropertyValue</span><span class="params">(PropertyTokenHolder tokens)</span> </span>&#123;</span><br><span class="line">TypeDescriptor desc = getPropertyTypeDescriptor(tokens.canonicalName);</span><br><span class="line"><span class="keyword">if</span> (desc == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Could not determine property type for auto-growing a default value"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Object defaultValue = newValue(desc.getType(), desc, tokens.canonicalName);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PropertyValue(tokens.canonicalName, defaultValue);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//数组 和集合创建空值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">newValue</span><span class="params">(Class&lt;?&gt; type, @Nullable TypeDescriptor desc, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (type.isArray()) &#123;</span><br><span class="line">Class&lt;?&gt; componentType = type.getComponentType();</span><br><span class="line"><span class="comment">// TODO - only handles 2-dimensional arrays</span></span><br><span class="line"><span class="keyword">if</span> (componentType.isArray()) &#123;</span><br><span class="line">Object array = Array.newInstance(componentType, <span class="number">1</span>);</span><br><span class="line">Array.set(array, <span class="number">0</span>, Array.newInstance(componentType.getComponentType(), <span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Collection<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">type</span>)) </span>&#123;</span><br><span class="line">TypeDescriptor elementDesc = (desc != <span class="keyword">null</span> ? desc.getElementTypeDescriptor() : <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> CollectionFactory.createCollection(type, (elementDesc != <span class="keyword">null</span> ? elementDesc.getType() : <span class="keyword">null</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Map<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">type</span>)) </span>&#123;</span><br><span class="line">TypeDescriptor keyDesc = (desc != <span class="keyword">null</span> ? desc.getMapKeyTypeDescriptor() : <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> CollectionFactory.createMap(type, (keyDesc != <span class="keyword">null</span> ? keyDesc.getType() : <span class="keyword">null</span>), <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Constructor&lt;?&gt; ctor = type.getDeclaredConstructor();</span><br><span class="line"><span class="keyword">if</span> (Modifier.isPrivate(ctor.getModifiers())) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(<span class="string">"Auto-growing not allowed with private constructor: "</span> + ctor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BeanUtils.instantiateClass(ctor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + name,</span><br><span class="line"><span class="string">"Could not instantiate property type ["</span> + type.getName() + <span class="string">"] to auto-grow nested property path"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结</p><ul><li>对于getPropertyValue(PropertyTokenHolder),存在这几种情况<ul><li>departments[0]:此时token:{actualName:departments ;canonicalName:departments[0];keys:{0}}<br>若此时departments属性为null,则会出现departments默认设置,以及对应key位置的默认设置</li><li>boss:此时token:{boos,boos,null},那么会直接返回null</li></ul></li><li>若是创建层级ANPA过程调用getPropertyValue(PropertyTokenHolder)<ul><li>departments[0].xx:不多做处理</li><li><a href="http://boss.name" target="_blank" rel="noopener">boss.name</a>: 在boss层级创建返回null,由创建层次函数创建boss.</li></ul></li><li>getPropertyValue有对[]类型设置默认值,并处理对应key的能力</li><li>getNestedPropertyAccessor:有对非[]类设置默认值的能力</li></ul><h6 id="设值逻辑"><a class="header-anchor" href="#设值逻辑">¶</a>设值逻辑</h6><img src="/2020/03/10/spring%E5%86%85%E7%9C%81/set%E9%80%BB%E8%BE%91.png" class=""><ul><li>逻辑线</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(PropertyValue pv)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">PropertyTokenHolder tokens = (PropertyTokenHolder) pv.resolvedTokens;</span><br><span class="line"><span class="keyword">if</span> (tokens == <span class="keyword">null</span>) &#123;</span><br><span class="line">String propertyName = pv.getName();</span><br><span class="line">AbstractNestablePropertyAccessor nestedPa;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">nestedPa = getPropertyAccessorForPropertyPath(propertyName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotWritablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + propertyName,</span><br><span class="line"><span class="string">"Nested property in path '"</span> + propertyName + <span class="string">"' does not exist"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName));</span><br><span class="line"><span class="keyword">if</span> (nestedPa == <span class="keyword">this</span>) &#123;</span><br><span class="line">pv.getOriginalPropertyValue().resolvedTokens = tokens;</span><br><span class="line">&#125;</span><br><span class="line">nestedPa.setPropertyValue(tokens, pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">setPropertyValue(tokens, pv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;  </span><br><span class="line">  <span class="comment">//设值</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setPropertyValue</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (tokens.keys != <span class="keyword">null</span>) &#123; <span class="comment">//只有最终属性是[]的情况才会调用这里如,departments[1]</span></span><br><span class="line">  processKeyedProperty(tokens, pv);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  processLocalProperty(tokens, pv);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------最终为[]的情况处理--------------------------------  </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processKeyedProperty</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取该属性的值,如一个List,数组等</span></span><br><span class="line">Object propValue = getPropertyHoldingValue(tokens);</span><br><span class="line">    <span class="comment">//对于该属性的ph</span></span><br><span class="line">PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line"><span class="keyword">if</span> (ph == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(</span><br><span class="line">getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.actualName, <span class="string">"No property handler found"</span>);</span><br><span class="line">&#125;</span><br><span class="line">Assert.state(tokens.keys != <span class="keyword">null</span>, <span class="string">"No token keys"</span>);</span><br><span class="line">String lastKey = tokens.keys[tokens.keys.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分类讨论,实际就是根据key,将pv设置到对应位置,可能存在类型转换的问题</span></span><br><span class="line"><span class="keyword">if</span> (propValue.getClass().isArray()) &#123;</span><br><span class="line">Class&lt;?&gt; requiredType = propValue.getClass().getComponentType();</span><br><span class="line"><span class="keyword">int</span> arrayIndex = Integer.parseInt(lastKey);</span><br><span class="line">Object oldValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; arrayIndex &lt; Array.getLength(propValue)) &#123;</span><br><span class="line">oldValue = Array.get(propValue, arrayIndex);</span><br><span class="line">&#125;</span><br><span class="line">Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">requiredType, ph.nested(tokens.keys.length));</span><br><span class="line"><span class="keyword">int</span> length = Array.getLength(propValue);</span><br><span class="line"><span class="keyword">if</span> (arrayIndex &gt;= length &amp;&amp; arrayIndex &lt; <span class="keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line">Class&lt;?&gt; componentType = propValue.getClass().getComponentType();</span><br><span class="line">Object newArray = Array.newInstance(componentType, arrayIndex + <span class="number">1</span>);</span><br><span class="line">System.arraycopy(propValue, <span class="number">0</span>, newArray, <span class="number">0</span>, length);</span><br><span class="line">setPropertyValue(tokens.actualName, newArray);</span><br><span class="line">propValue = getPropertyValue(tokens.actualName);</span><br><span class="line">&#125;</span><br><span class="line">Array.set(propValue, arrayIndex, convertedValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Invalid array index in property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">Class&lt;?&gt; requiredType = ph.getCollectionType(tokens.keys.length);</span><br><span class="line">List&lt;Object&gt; list = (List&lt;Object&gt;) propValue;</span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(lastKey);</span><br><span class="line">Object oldValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; index &lt; list.size()) &#123;</span><br><span class="line">oldValue = list.get(index);</span><br><span class="line">&#125;</span><br><span class="line">Object convertedValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">requiredType, ph.nested(tokens.keys.length));</span><br><span class="line"><span class="keyword">int</span> size = list.size();</span><br><span class="line"><span class="keyword">if</span> (index &gt;= size &amp;&amp; index &lt; <span class="keyword">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &lt; index; i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list.add(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NullPointerException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Cannot set element with index "</span> + index + <span class="string">" in List of size "</span> +</span><br><span class="line">size + <span class="string">", accessed using property path '"</span> + tokens.canonicalName +</span><br><span class="line"><span class="string">"': List does not support filling up gaps with null elements"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(convertedValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list.set(index, convertedValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Invalid list index in property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">Class&lt;?&gt; mapKeyType = ph.getMapKeyType(tokens.keys.length);</span><br><span class="line">Class&lt;?&gt; mapValueType = ph.getMapValueType(tokens.keys.length);</span><br><span class="line">Map&lt;Object, Object&gt; map = (Map&lt;Object, Object&gt;) propValue;</span><br><span class="line"><span class="comment">// IMPORTANT: Do not pass full property name in here - property editors</span></span><br><span class="line"><span class="comment">// must not kick in for map keys but rather only for map values.</span></span><br><span class="line">TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType);</span><br><span class="line">Object convertedMapKey = convertIfNecessary(<span class="keyword">null</span>, <span class="keyword">null</span>, lastKey, mapKeyType, typeDescriptor);</span><br><span class="line">Object oldValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (isExtractOldValueForEditor()) &#123;</span><br><span class="line">oldValue = map.get(convertedMapKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pass full property name and old value in here, since we want full</span></span><br><span class="line"><span class="comment">// conversion ability for map values.</span></span><br><span class="line">Object convertedMapValue = convertIfNecessary(tokens.canonicalName, oldValue, pv.getValue(),</span><br><span class="line">mapValueType, ph.nested(tokens.keys.length));</span><br><span class="line">map.put(convertedMapKey, convertedMapValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InvalidPropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Property referenced in indexed property path '"</span> + tokens.canonicalName +</span><br><span class="line"><span class="string">"' is neither an array nor a List nor a Map; returned value was ["</span> + propValue + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//--------------获取[]的值----------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getPropertyHoldingValue</span><span class="params">(PropertyTokenHolder tokens)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Apply indexes and map keys: fetch value for all keys but the last one.</span></span><br><span class="line">Assert.state(tokens.keys != <span class="keyword">null</span>, <span class="string">"No token keys"</span>);</span><br><span class="line">    <span class="comment">//仅仅根据属性名创建一个tokens</span></span><br><span class="line">PropertyTokenHolder getterTokens = <span class="keyword">new</span> PropertyTokenHolder(tokens.actualName);</span><br><span class="line">getterTokens.canonicalName = tokens.canonicalName;</span><br><span class="line">getterTokens.keys = <span class="keyword">new</span> String[tokens.keys.length - <span class="number">1</span>];</span><br><span class="line">System.arraycopy(tokens.keys, <span class="number">0</span>, getterTokens.keys, <span class="number">0</span>, tokens.keys.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Object propValue;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//获取属性,具体见下文,中间可能存在创建过程</span></span><br><span class="line">propValue = getPropertyValue(getterTokens);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NotReadablePropertyException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NotWritablePropertyException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Cannot access indexed value in property referenced "</span> +</span><br><span class="line"><span class="string">"in indexed property path '"</span> + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// null map value case</span></span><br><span class="line"><span class="keyword">if</span> (isAutoGrowNestedPaths()) &#123;</span><br><span class="line"><span class="keyword">int</span> lastKeyIndex = tokens.canonicalName.lastIndexOf(<span class="string">'['</span>);</span><br><span class="line">getterTokens.canonicalName = tokens.canonicalName.substring(<span class="number">0</span>, lastKeyIndex);</span><br><span class="line">propValue = setDefaultValue(getterTokens);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullValueInNestedPathException(getRootClass(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName,</span><br><span class="line"><span class="string">"Cannot access indexed value in property referenced "</span> +</span><br><span class="line"><span class="string">"in indexed property path '"</span> + tokens.canonicalName + <span class="string">"': returned null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> propValue;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//---------------------------非集合或数组-------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processLocalProperty</span><span class="params">(PropertyTokenHolder tokens, PropertyValue pv)</span> </span>&#123;</span><br><span class="line">      [<span class="number">1</span>]获取ph子类实现,见下文</span><br><span class="line">  PropertyHandler ph = getLocalPropertyHandler(tokens.actualName);</span><br><span class="line">  <span class="keyword">if</span> (ph == <span class="keyword">null</span> || !ph.isWritable()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (pv.isOptional()) &#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">  logger.debug(<span class="string">"Ignoring optional value for property '"</span> + tokens.actualName +</span><br><span class="line">  <span class="string">"' - property not found on bean class ["</span> + getRootClass().getName() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> createNotWritablePropertyException(tokens.canonicalName);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="comment">//![1]</span></span><br><span class="line">      <span class="comment">//[2]可能会存在类型转换</span></span><br><span class="line">  Object oldValue = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  Object originalValue = pv.getValue();</span><br><span class="line">  Object valueToApply = originalValue;</span><br><span class="line">  <span class="keyword">if</span> (!Boolean.FALSE.equals(pv.conversionNecessary)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">  valueToApply = pv.getConvertedValue();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (isExtractOldValueForEditor() &amp;&amp; ph.isReadable()) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">  oldValue = ph.getValue();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> PrivilegedActionException) &#123;</span><br><span class="line">  ex = ((PrivilegedActionException) ex).getException();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">  logger.debug(<span class="string">"Could not read previous value of property '"</span> +</span><br><span class="line">  <span class="keyword">this</span>.nestedPath + tokens.canonicalName + <span class="string">"'"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  valueToApply = convertForProperty(</span><br><span class="line">  tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor());</span><br><span class="line">  &#125;</span><br><span class="line">          <span class="comment">//![2]类型转换</span></span><br><span class="line">  pv.getOriginalPropertyValue().conversionNecessary = (valueToApply != originalValue);</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="comment">//[3]内省设值,见下文</span></span><br><span class="line">  ph.setValue(valueToApply);</span><br><span class="line">        <span class="comment">//![3]</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">  <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">  PropertyChangeEvent propertyChangeEvent = <span class="keyword">new</span> PropertyChangeEvent(</span><br><span class="line">  getRootInstance(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName, oldValue, pv.getValue());</span><br><span class="line">  <span class="keyword">if</span> (ex.getTargetException() <span class="keyword">instanceof</span> ClassCastException) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> TypeMismatchException(propertyChangeEvent, ph.getPropertyType(), ex.getTargetException());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  Throwable cause = ex.getTargetException();</span><br><span class="line">  <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> UndeclaredThrowableException) &#123;</span><br><span class="line">  <span class="comment">// May happen e.g. with Groovy-generated methods</span></span><br><span class="line">  cause = cause.getCause();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MethodInvocationException(propertyChangeEvent, cause);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">  PropertyChangeEvent pce = <span class="keyword">new</span> PropertyChangeEvent(</span><br><span class="line">  getRootInstance(), <span class="keyword">this</span>.nestedPath + tokens.canonicalName, oldValue, pv.getValue());</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> MethodInvocationException(pce, ex);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>设值遇到的类型转换参考<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/#%E5%B1%9E%E6%80%A7%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">属性转换</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> spring组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring_aop织入分析</title>
      <link href="/2020/03/04/Spring-aop%E7%BB%87%E5%85%A5%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/04/Spring-aop%E7%BB%87%E5%85%A5%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>本文用来分析<code>aop</code>在<code>spring</code>的织入原理,今后的博客会尽量分段,将篇幅降低,更加易于阅读.<br>此文涉及到的一些原理参考<a href="/2019/05/25/aop/">aop</a></p><h4 id="使用"><a class="header-anchor" href="#使用">¶</a>使用</h4><h5 id="DefaultAdvisorAutoProxyCreator"><a class="header-anchor" href="#DefaultAdvisorAutoProxyCreator">¶</a>DefaultAdvisorAutoProxyCreator</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line">    &lt;!--自动代理--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"advisorAutoProxyCreator"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInstance"</span> <span class="attr">class</span>=<span class="string">"aop.jdkProxy.MyProxyInstance"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"advisor"</span> <span class="attr">class</span>=<span class="string">"advisor.StaticAdvisor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"advice"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"aop.BeforeMethod"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简要说明:</p><ul><li>MyProxyInstance是<code>ProxyInterface</code>子类,接口仅仅定义了<code>void test()</code></li><li>未使用 p:proxyTargetClass=“true”,即默认使用jdk代理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//载入bf</span></span><br><span class="line">       xml.loadBeanDefinitions(<span class="string">"aop1.xml"</span>);</span><br><span class="line">       <span class="comment">//bf添加后处理</span></span><br><span class="line">       <span class="keyword">var</span> proxy=beanFactory.getBean(<span class="string">"advisorAutoProxyCreator"</span>,DefaultAdvisorAutoProxyCreator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       beanFactory.addBeanPostProcessor(proxy);</span><br><span class="line">       <span class="comment">//此处若转型不是接口则会抛出异常</span></span><br><span class="line">       <span class="comment">//beanFactory.getBean("myInstance",MyProxyInstance.class).test();</span></span><br><span class="line">       beanFactory.getBean(<span class="string">"myInstance"</span>, ProxyInterface<span class="class">.<span class="keyword">class</span>).<span class="title">test</span>()</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>简要说明</p><ul><li>我没有使用<code>context</code>是为了更好的说明</li><li>异常的原因在于<code>AbstractBeanFactory#doGetBean</code>,最后会再进行一次类型转换,就是为了将创造的bean和<code>getBean</code>传递的参数进行转换,<br>一般到了此步是没有转换的必要,但是代理器处理过的bean已经是proxy了,后文无法匹配到合适的转换器,因此抛出异常<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul><h5 id="BeanNameAutoProxyCreator"><a class="header-anchor" href="#BeanNameAutoProxyCreator">¶</a>BeanNameAutoProxyCreator</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInstance"</span> <span class="attr">class</span>=<span class="string">"aop.jdkProxy.MyProxyInstance"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"advice"</span> <span class="attr">class</span>=<span class="string">"aop.BeforeMethod"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInstanceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:proxyTargetClass</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:interceptorNames</span>=<span class="string">"advice"</span> <span class="attr">p:beanNames</span>=<span class="string">"myInstance"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java代码和上类似,只是此处使用了<code>p:proxyTargetClass=&quot;true&quot;</code>,即调用cglib,就可以直接转换成源类型</p><h5 id="AnnotationAwareAspectJAutoProxyCreator"><a class="header-anchor" href="#AnnotationAwareAspectJAutoProxyCreator">¶</a>AnnotationAwareAspectJAutoProxyCreator</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>开启自动aspectj,实际是创建AnnotationAwareAspectJAutoProxyCreator处理器</p><h4 id="分析源码"><a class="header-anchor" href="#分析源码">¶</a>分析源码</h4><img src="/2020/03/04/Spring-aop%E7%BB%87%E5%85%A5%E5%88%86%E6%9E%90/DefaultAdvisorAutoProxyCreator.png" class="" title="DefaultAdvisorAutoProxyCreator"><img src="/2020/03/04/Spring-aop%E7%BB%87%E5%85%A5%E5%88%86%E6%9E%90/BeanNameAutoProxyCreator.png" class="" title="BeanNameAutoProxyCreator"><img src="/2020/03/04/Spring-aop%E7%BB%87%E5%85%A5%E5%88%86%E6%9E%90/AnnotationAwareAspectJAutoProxyCreator.png" class="" title="AnnotationAwareAspectJAutoProxyCreator"><h5 id="AbstractAutoProxyCreator核心逻辑"><a class="header-anchor" href="#AbstractAutoProxyCreator核心逻辑">¶</a>AbstractAutoProxyCreator核心逻辑</h5><h6 id="抽象逻辑"><a class="header-anchor" href="#抽象逻辑">¶</a>抽象逻辑</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//这两个object都代表拦截器,可能是advice 或advisor</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DO_NOT_PROXY = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//MethodInterceptor生成器</span></span><br><span class="line">  <span class="keyword">private</span> AdvisorAdapterRegistry advisorAdapterRegistry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line">  <span class="comment">//key实际上就是后文的cacheKey,表示代理源是谁,value表示代理对象(如jdk代理后的proxy)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Class&lt;?&gt;&gt; proxyTypes = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">  <span class="comment">//key如上,value表示ture,此bean可以代理,false表示不能代理</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Object, Boolean&gt; advisedBeans = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line">  <span class="comment">//拦截器名</span></span><br><span class="line">  <span class="keyword">private</span> String[] interceptorNames = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//-----------------  postProcessBeforeInstantiation-----------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">  Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line">      <span class="comment">//第一次</span></span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123; <span class="comment">//已经处理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="comment">//若为组件类,永不处理,并跳过</span></span><br><span class="line">  <span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">  <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">  <span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">  <span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">  TargetSource targetSource = getCustomTargetSource(beanClass, beanName); <span class="comment">//CTS给了从别处创建TargetSource机会,一般没有设置CTS,则会返回null</span></span><br><span class="line">  <span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">  <span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">  &#125;</span><br><span class="line">        <span class="comment">//子类实现获取拦截器</span></span><br><span class="line">  Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">  Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">  <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//----------------------------postProcessAfterInitialization-------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(@Nullable Object bean, String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//-----------------------------getCacheKey------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">getCacheKey</span><span class="params">(Class&lt;?&gt; beanClass, @Nullable String beanName)</span> </span>&#123;</span><br><span class="line">    如果是匿名bean则返回Class,否则返回真是的beanName</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> (FactoryBean<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>) ?</span></span><br><span class="line">        BeanFactory.FACTORY_BEAN_PREFIX + beanName : beanName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> beanClass;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//----------------------------wrapIfNecessary-----------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//targetSourcedBeans说明before处理过</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//不处理的bean</span></span><br><span class="line"><span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//组件bean,永不处理</span></span><br><span class="line"><span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">    <span class="comment">//子类创建拦截器</span></span><br><span class="line">Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123; <span class="comment">//子类没有放弃,并非是子类一定要提供拦截器(BeanNameAutoProxyCreator就是如此)</span></span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">Object proxy = createProxy(</span><br><span class="line">bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line"><span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line"><span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------------------createProxy------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, @Nullable String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123; <span class="comment">//给当前bd#attr 设置originalTargetClass-targetClass这样一个属性</span></span><br><span class="line">AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//创建proxyFactory并设置拷贝设置</span></span><br><span class="line">ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123; <span class="comment">//未设置</span></span><br><span class="line"><span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//获取beanClass所有接口并添加到当前proxyFacotry中</span></span><br><span class="line">evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">    <span class="comment">//准备proxyFactory,并创建代理</span></span><br><span class="line">proxyFactory.addAdvisors(advisors);</span><br><span class="line">proxyFactory.setTargetSource(targetSource);</span><br><span class="line">customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line"><span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//-------------------buildAdvisors-------------------------------</span></span><br><span class="line">  <span class="keyword">protected</span> Advisor[] buildAdvisors(<span class="meta">@Nullable</span> String beanName, <span class="meta">@Nullable</span> Object[] specificInterceptors) &#123;</span><br><span class="line"><span class="comment">// Handle prototypes correctly...</span></span><br><span class="line">Advisor[] commonInterceptors = resolveInterceptorNames();</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; allInterceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//如果子类传递了Interceptors,并且applyCommonInterceptorsFirst==false,则将子类的排在前面</span></span><br><span class="line"><span class="keyword">if</span> (specificInterceptors != <span class="keyword">null</span>) &#123;</span><br><span class="line">allInterceptors.addAll(Arrays.asList(specificInterceptors));</span><br><span class="line"><span class="keyword">if</span> (commonInterceptors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.applyCommonInterceptorsFirst) &#123;</span><br><span class="line">allInterceptors.addAll(<span class="number">0</span>, Arrays.asList(commonInterceptors));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">allInterceptors.addAll(Arrays.asList(commonInterceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">int</span> nrOfCommonInterceptors = commonInterceptors.length;</span><br><span class="line"><span class="keyword">int</span> nrOfSpecificInterceptors = (specificInterceptors != <span class="keyword">null</span> ? specificInterceptors.length : <span class="number">0</span>);</span><br><span class="line">logger.trace(<span class="string">"Creating implicit proxy for bean '"</span> + beanName + <span class="string">"' with "</span> + nrOfCommonInterceptors +</span><br><span class="line"><span class="string">" common interceptors and "</span> + nrOfSpecificInterceptors + <span class="string">" specific interceptors"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Advisor[] advisors = <span class="keyword">new</span> Advisor[allInterceptors.size()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; allInterceptors.size(); i++) &#123;</span><br><span class="line">advisors[i] = <span class="keyword">this</span>.advisorAdapterRegistry.wrap(allInterceptors.get(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors; <span class="comment">//返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolves the specified interceptor names to Advisor objects.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setInterceptorNames</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Advisor[] resolveInterceptorNames() &#123;</span><br><span class="line">    <span class="comment">//根据interceptorNames获取advisor</span></span><br><span class="line">BeanFactory bf = <span class="keyword">this</span>.beanFactory;</span><br><span class="line">ConfigurableBeanFactory cbf = (bf <span class="keyword">instanceof</span> ConfigurableBeanFactory ? (ConfigurableBeanFactory) bf : <span class="keyword">null</span>);</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String beanName : <span class="keyword">this</span>.interceptorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (cbf == <span class="keyword">null</span> || !cbf.isCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">Assert.state(bf != <span class="keyword">null</span>, <span class="string">"BeanFactory required for resolving interceptor names"</span>);</span><br><span class="line">Object next = bf.getBean(beanName);</span><br><span class="line">advisors.add(<span class="keyword">this</span>.advisorAdapterRegistry.wrap(next));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors.toArray(<span class="keyword">new</span> Advisor[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------------wrap-----------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Advisor <span class="title">wrap</span><span class="params">(Object adviceObject)</span> <span class="keyword">throws</span> UnknownAdviceTypeException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (adviceObject <span class="keyword">instanceof</span> Advisor) &#123;</span><br><span class="line"><span class="keyword">return</span> (Advisor) adviceObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(adviceObject <span class="keyword">instanceof</span> Advice)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(adviceObject);</span><br><span class="line">&#125;</span><br><span class="line">Advice advice = (Advice) adviceObject;</span><br><span class="line"><span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123; <span class="comment">//引介增强也是一个MethodInterceptor</span></span><br><span class="line"><span class="comment">// So well-known it doesn't even need an adapter.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (AdvisorAdapter adapter : <span class="keyword">this</span>.adapters) &#123;</span><br><span class="line"><span class="comment">// Check that it is supported.</span></span><br><span class="line"><span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultPointcutAdvisor(advice);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h6 id="子类获取advisor"><a class="header-anchor" href="#子类获取advisor">¶</a>子类获取advisor</h6><ul><li><p>BeanNameAutoProxyCreator实现</p>  <figure class="highlight java"><figcaption><span>BeanNameAutoProxyCreator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//用户要代理的源bean</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;String&gt; beanNames;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(</span><br><span class="line">   Class&lt;?&gt; beanClass, String beanName, <span class="meta">@Nullable</span> TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.beanNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">   <span class="keyword">for</span> (String mappedName : <span class="keyword">this</span>.beanNames) &#123;</span><br><span class="line">   <span class="keyword">if</span> (FactoryBean<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanClass</span>)) </span>&#123; <span class="comment">//当前bean是FB情况,</span></span><br><span class="line">   <span class="keyword">if</span> (!mappedName.startsWith(BeanFactory.FACTORY_BEAN_PREFIX)) &#123;</span><br><span class="line">   <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line">             <span class="comment">//获取真实的beanName</span></span><br><span class="line">   mappedName = mappedName.substring(BeanFactory.FACTORY_BEAN_PREFIX.length());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (isMatch(beanName, mappedName)) &#123; <span class="comment">//若能匹配返回父类的默认属性</span></span><br><span class="line">   <span class="keyword">return</span> PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;</span><br><span class="line">   &#125;</span><br><span class="line">           <span class="comment">//别名情况</span></span><br><span class="line">   BeanFactory beanFactory = getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">   String[] aliases = beanFactory.getAliases(beanName);</span><br><span class="line">   <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">   <span class="keyword">if</span> (isMatch(alias, mappedName)) &#123;</span><br><span class="line">   <span class="keyword">return</span> PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">       <span class="comment">//若到此处说明不进行代理</span></span><br><span class="line">   <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Return if the given bean name matches the mapped name.</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;The default implementation checks for "xxx*", "*xxx" and "*xxx*" matches,</span></span><br><span class="line"><span class="comment">      * as well as direct equality. Can be overridden in subclasses.</span></span><br><span class="line"><span class="comment">        *123</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String beanName, String mappedName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> PatternMatchUtils.simpleMatch(mappedName, beanName);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li>AbstractAdvisorAutoProxyCreator:一般标准实现</li></ul> <figure class="highlight java"><figcaption><span>AbstractAdvisorAutoProxyCreator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//内部获取advisor的类</span></span><br><span class="line">   <span class="keyword">private</span> BeanFactoryAdvisorRetrievalHelper advisorRetrievalHelper;</span><br><span class="line">   <span class="comment">//------------------getAdvicesAndAdvisorsForBean----------------</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.setBeanFactory(beanFactory);</span><br><span class="line"><span class="keyword">if</span> (!(beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"AdvisorAutoProxyCreator requires a ConfigurableListableBeanFactory: "</span> + beanFactory);</span><br><span class="line">&#125;</span><br><span class="line">initBeanFactory((ConfigurableListableBeanFactory) beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化BARH</span></span><br><span class="line"><span class="keyword">this</span>.advisorRetrievalHelper = <span class="keyword">new</span> BeanFactoryAdvisorRetrievalHelperAdapter(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//-----------------------------getAdvicesAndAdvisorsForBean-----------------------</span></span><br><span class="line">   <span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(</span><br><span class="line">Class&lt;?&gt; beanClass, String beanName, <span class="meta">@Nullable</span> TargetSource targetSource) &#123;</span><br><span class="line"></span><br><span class="line">List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line"><span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//简单来说就是获取bf中的advisor,源码不分析比较简单</span></span><br><span class="line">  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">  List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">  extendAdvisors(eligibleAdvisors);</span><br><span class="line">  <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">    eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findAdvisorsThatCanApply</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">ProxyCreationContext.setCurrentProxiedBeanName(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.state(<span class="keyword">this</span>.advisorRetrievalHelper != <span class="keyword">null</span>, <span class="string">"No BeanFactoryAdvisorRetrievalHelper available"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//---------------------------------AopUtil----------------------------------------------</span></span><br><span class="line">  <span class="comment">//-----------------------------------findAdvisorsThatCanApply---------------------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Advisor&gt; <span class="title">findAdvisorsThatCanApply</span><span class="params">(List&lt;Advisor&gt; candidateAdvisors, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (candidateAdvisors.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> candidateAdvisors;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Advisor&gt; eligibleAdvisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line"><span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor &amp;&amp; canApply(candidate, clazz)) &#123; <span class="comment">//引介advisor仅仅匹配类型</span></span><br><span class="line">eligibleAdvisors.add(candidate);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> hasIntroductions = !eligibleAdvisors.isEmpty();</span><br><span class="line"><span class="keyword">for</span> (Advisor candidate : candidateAdvisors) &#123;</span><br><span class="line"><span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line"><span class="comment">// already processed</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (canApply(candidate, clazz, hasIntroductions)) &#123; <span class="comment">//非引进匹配类型和切点</span></span><br><span class="line">eligibleAdvisors.add(candidate);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//-------------------------------canApply----------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canApply</span><span class="params">(Advisor advisor, Class&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line"><span class="keyword">return</span> ((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass); <span class="comment">//匹配类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123;</span><br><span class="line">PointcutAdvisor pca = (PointcutAdvisor) advisor;</span><br><span class="line"><span class="keyword">return</span> canApply(pca.getPointcut(), targetClass, hasIntroductions);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It doesn't have a pointcut so we assume it applies.</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canApply</span><span class="params">(Pointcut pc, Class&lt;?&gt; targetClass, <span class="keyword">boolean</span> hasIntroductions)</span> </span>&#123;</span><br><span class="line">Assert.notNull(pc, <span class="string">"Pointcut must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pc.getClassFilter().matches(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MethodMatcher methodMatcher = pc.getMethodMatcher();</span><br><span class="line"><span class="keyword">if</span> (methodMatcher == MethodMatcher.TRUE) &#123; <span class="comment">//DefaultPointcutAdvisor中MM就是True</span></span><br><span class="line"><span class="comment">// No need to iterate the methods if we're matching any method anyway...</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IntroductionAwareMethodMatcher introductionAwareMethodMatcher = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (methodMatcher <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123;</span><br><span class="line">introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Set&lt;Class&lt;?&gt;&gt; classes = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (!Proxy.isProxyClass(targetClass)) &#123; <span class="comment">//若为代理对象</span></span><br><span class="line">classes.add(ClassUtils.getUserClass(targetClass)); <span class="comment">//获取原本的类对象</span></span><br><span class="line">&#125;</span><br><span class="line">classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass)); <span class="comment">//接口和类对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123; <span class="comment">//若该源的任意父接口|父类存在方法匹配则ture</span></span><br><span class="line">Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line"><span class="keyword">if</span> (introductionAwareMethodMatcher != <span class="keyword">null</span> ?</span><br><span class="line">introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :</span><br><span class="line">methodMatcher.matches(method, targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//至此不匹配</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>关于advisor分类为<code>PointCutAdvisor</code>和<code>IntroductionAdvisor</code>,前者就是非引介类型,即前 后 异常 环绕<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p></li><li><p>DefaultAdvisorAutoProxyCreator获取advisor</p><figure class="highlight java"><figcaption><span>DefaultAdvisorAutoProxyCreator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户设置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> usePrefix = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//前缀</span></span><br><span class="line"><span class="keyword">private</span> String advisorBeanNamePrefix;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEligibleAdvisorBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isUsePrefix()) &#123; <span class="comment">//无自定义,则恒true</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">String prefix = getAdvisorBeanNamePrefix();</span><br><span class="line">    <span class="comment">//advisor必须拥有前缀</span></span><br><span class="line"><span class="keyword">return</span> (prefix != <span class="keyword">null</span> &amp;&amp; beanName.startsWith(prefix));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AnnotationAwareAspectJAutoProxyCreator</p><figure class="highlight java"><figcaption><span>AnnotationAwareAspectJAutoProxyCreator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> AspectJAdvisorFactory aspectJAdvisorFactory;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.initBeanFactory(beanFactory);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.aspectJAdvisorFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.aspectJAdvisorFactory = <span class="keyword">new</span> ReflectiveAspectJAdvisorFactory(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.aspectJAdvisorsBuilder =</span><br><span class="line"><span class="keyword">new</span> BeanFactoryAspectJAdvisorsBuilderAdapter(beanFactory, <span class="keyword">this</span>.aspectJAdvisorFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Add all the Spring advisors found according to superclass rules.</span></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line"><span class="comment">// Build Advisors for all AspectJ aspects in the bean factory.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.aspectJAdvisorsBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//-------------------------BeanFactoryAspectJAdvisorsBuilderAdapter------------------------</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">buildAspectJAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123; <span class="comment">//第一次都是null</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"><span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">aspectNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line"><span class="keyword">this</span>.beanFactory, Object<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// We must be careful not to instantiate beans eagerly as in this case they</span></span><br><span class="line"><span class="comment">// would be cached by the Spring container but would not have been weaved.</span></span><br><span class="line">Class&lt;?&gt; beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line"><span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123; <span class="comment">//判断该bean是否为Aspect,根据注解</span></span><br><span class="line">aspectNames.add(beanName);</span><br><span class="line">             <span class="comment">//根据源信息创建advisor</span></span><br><span class="line">AspectMetadata amd = <span class="keyword">new</span> AspectMetadata(beanType, beanName);</span><br><span class="line"><span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">MetadataAwareAspectInstanceFactory factory =</span><br><span class="line"><span class="keyword">new</span> BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">List&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(factory);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">&#125;</span><br><span class="line">advisors.addAll(classAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Per target or per this.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line"><span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">&#125;</span><br><span class="line">MetadataAwareAspectInstanceFactory factory =</span><br><span class="line"><span class="keyword">new</span> PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line"><span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">List&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.get(aspectName);</span><br><span class="line"><span class="keyword">if</span> (cachedAdvisors != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.addAll(cachedAdvisors);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">MetadataAwareAspectInstanceFactory factory = <span class="keyword">this</span>.aspectFactoryCache.get(aspectName);</span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>aspectJAdvisorFactory是将aspect转换为advisor的工厂<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p></li></ul><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>参考<a href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/#%E5%B1%9E%E6%80%A7%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">类型转换</a>以及<a href="/2019/05/21/ioc/#%E6%B5%81%E7%A8%8B">ioc原理</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>AdvisorAdapterRegistry参考<a href="/2019/05/25/aop/#%E8%B0%83%E7%94%A8%E9%80%BB%E8%BE%91">aop原理</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>参考<a href="/2019/05/25/aop/#advice%E5%88%B0advisor%E7%9A%84%E8%BD%AC%E6%8D%A2">advice到advisor</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>参考[aspectj使用]((/2019/05/25/aop/aspectj使用) <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> springAop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring常见</title>
      <link href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/"/>
      <url>/2020/02/11/spring%E5%B8%B8%E8%A7%81/</url>
      
        <content type="html"><![CDATA[<h3 id="spring内部一些重要实现"><a class="header-anchor" href="#spring内部一些重要实现">¶</a>spring内部一些重要实现</h3><h4 id="Bean相关"><a class="header-anchor" href="#Bean相关">¶</a>Bean相关</h4><ul><li>概念<ul><li>BeanDefinition 是将ioc定义如xml,注解扫描的类转为成抽象描述,包含了用户定义的各种bean信息</li><li>BeanWrapper 是从该类抽离出的低级javaBean,包含了属性转换器,以及java 原信息</li><li>PropertyValue 仅仅是封装key-value 表示对象,存在于Bd内部,以及ioc属性转换过程中</li><li>PropertyEditor jdk提供的属性转换,A-&gt;B类型的转换,ioc逻辑中使用</li></ul></li></ul><h5 id="xml解析"><a class="header-anchor" href="#xml解析">¶</a>xml解析</h5><p>简而言之, 解析xml的类是BeanDefinitionParserDelegate完成的</p><ul><li>标准bean标签的解析过程<ul><li>xml例子<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">class</span>=<span class="string">"com.light.Foo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        this is a test</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>d:/test/12.txt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>d:/test/12.txt<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">key</span>=<span class="string">"key1"</span> <span class="attr">value</span>=<span class="string">"value1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="基本元素"><a class="header-anchor" href="#基本元素">¶</a>基本元素</h6><ul><li>前言<br>解析bean的读取器为<code>BeanDefinitionReader</code>体系,并非是仅仅支持xml.</li><li>外部类<br><figure class="highlight java"><figcaption><span>DefaultBeanDefinitionDocumentReader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类是xml默认的 解析器实现类</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//委托模式</span></span><br><span class="line">BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</span><br><span class="line"><span class="keyword">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line"><span class="comment">// We cannot use Profiles.of(...) since profile expressions are not supported</span></span><br><span class="line"><span class="comment">// in XML config. See SPR-12458 for details.</span></span><br><span class="line"><span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Skipped XML bean definition file due to specified profiles ["</span> + profileSpec +</span><br><span class="line"><span class="string">"] not matching: "</span> + getReaderContext().getResource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">preProcessXml(root); <span class="comment">//空,子类实现</span></span><br><span class="line">parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</span><br><span class="line">postProcessXml(root); <span class="comment">//空,子类实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------- 循环处理所有元素---------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">NodeList nl = root.getChildNodes();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">Element ele = (Element) node;</span><br><span class="line"><span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">parseDefaultElement(ele, delegate); <span class="comment">//处理不用引入如&lt;context&gt; 这样的默认标签</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">delegate.parseCustomElement(ele); <span class="comment">//处理额外的标签</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">delegate.parseCustomElement(root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------处理默认标签-------------------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</span><br><span class="line">    importBeanDefinitionResource(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</span><br><span class="line">    processAliasRegistration(ele);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">    processBeanDefinition(ele, delegate);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</span><br><span class="line">    <span class="comment">// recurse</span></span><br><span class="line">    doRegisterBeanDefinitions(ele);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------处理bean标签-----------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//holder仅仅用来包含BeanDefition,内部的BeanDiftion 就是GenicBeanDeition</span></span><br><span class="line">  <span class="comment">//[1]  解析并创建gbdH</span></span><br><span class="line">  BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">  <span class="comment">//[1!]</span></span><br><span class="line">  <span class="comment">//[2] 注册bd到beanFacotry(Registry)中</span></span><br><span class="line">  <span class="keyword">if</span> (bdHolder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">      BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">      getReaderContext().error(<span class="string">"Failed to register bean definition with name '"</span> +</span><br><span class="line">          bdHolder.getBeanName() + <span class="string">"'"</span>, ele, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[2!]</span></span><br><span class="line">    <span class="comment">//[3] 触发事件</span></span><br><span class="line">    getReaderContext().fireComponentRegistered(<span class="keyword">new</span> BeanComponentDefinition(bdHolder));</span><br><span class="line">    <span class="comment">//[3!]</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li>委托类<br><figure class="highlight java"><figcaption><span>BeanDefinitionParserDelegate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//------------------------------------解析 并创建 gbd--------------------------------------</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="keyword">null</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">@Nullable</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//[1] 处理id和name,别名,保持id唯一性</span></span><br><span class="line">         String id = ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">         String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">         List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">         <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">           String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">           aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         String beanName = id;</span><br><span class="line">         <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">           beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">           <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">             logger.trace(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</span><br><span class="line">                 <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">           checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//[1!]</span></span><br><span class="line">         <span class="comment">//[2]解析标签,并创建gbd</span></span><br><span class="line">         AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line">         <span class="comment">//[2!]</span></span><br><span class="line">         <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                 beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line">                 <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></span><br><span class="line">                 <span class="comment">// if the generator returned the class name plus a suffix.</span></span><br><span class="line">                 <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></span><br><span class="line">                 String beanClassName = beanDefinition.getBeanClassName();</span><br><span class="line">                 <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                   aliases.add(beanClassName);</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                 logger.trace(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</span><br><span class="line">                     <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">               error(ex.getMessage(), ele);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//----------------------------------实际创建gbd的代码---------------------------</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           Element ele, String beanName, @Nullable BeanDefinition containingBean)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</span><br><span class="line"></span><br><span class="line">         String className = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">//class属性</span></span><br><span class="line">         <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">           className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">         &#125;</span><br><span class="line">         String parent = <span class="keyword">null</span>;</span><br><span class="line">         <span class="comment">//parent属性</span></span><br><span class="line">         <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">           parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 简单创建gbd实例</span></span><br><span class="line">           AbstractBeanDefinition bd = createBeanDefinition(className, parent);</span><br><span class="line">           <span class="comment">// 处理&lt;bean&gt; 标签中所有的属性,即attr,设置为abd(AbstractBeanDefinition) 对应的属性</span></span><br><span class="line">           parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">           <span class="comment">// 子类node中寻找 获取desc</span></span><br><span class="line">           bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line">           <span class="comment">//  此处代码见下边</span></span><br><span class="line">           parseMetaElements(ele, bd);</span><br><span class="line">           <span class="comment">// 子类node寻找&lt;lookUp  name="" ,bean=""&gt; 元素,添加MethodOverrride对象到bd中</span></span><br><span class="line">           parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">           <span class="comment">// 寻找&lt;ReplaceMethod name="" repalcer=""&gt;  元素 添加MEthodOverride对象到bd中</span></span><br><span class="line">           parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">           <span class="comment">// 处理&lt;constructor-arg index= ...&gt;</span></span><br><span class="line">           <span class="comment">// bd.getConstructorArgumentValues().addGenericArgumentValue(valueHolder);</span></span><br><span class="line">           <span class="comment">// valueHolder就是解析后创建的要添加到bd中的对象  </span></span><br><span class="line">           parseConstructorArgElements(ele, bd);</span><br><span class="line">           <span class="comment">//处理子类中属性</span></span><br><span class="line">           parsePropertyElements(ele, bd);</span><br><span class="line">           <span class="comment">//处理qualifier标签</span></span><br><span class="line">           parseQualifierElements(ele, bd);</span><br><span class="line">           <span class="comment">//bd来源,如xml的路径  </span></span><br><span class="line">           bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> bd;</span><br><span class="line">         &#125;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//------------------------------处理meta元素-----------------------</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseMetaElements</span><span class="params">(Element ele, BeanMetadataAttributeAccessor attributeAccessor)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//从子类寻&lt;meta&gt;标签,获取meat的key以及value属性,作为bd#attribute</span></span><br><span class="line">         NodeList nl = ele.getChildNodes();</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">           Node node = nl.item(i);</span><br><span class="line">           <span class="keyword">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line">             Element metaElement = (Element) node;</span><br><span class="line">             <span class="comment">//这里就能知道BeanMetadataAttributeAccessor的map是什么情况可以设置的</span></span><br><span class="line">             String key = metaElement.getAttribute(KEY_ATTRIBUTE);</span><br><span class="line">             String value = metaElement.getAttribute(VALUE_ATTRIBUTE);</span><br><span class="line">             <span class="comment">//此处体现了BD体系中如何使用key-value</span></span><br><span class="line">             BeanMetadataAttribute attribute = <span class="keyword">new</span> BeanMetadataAttribute(key, value);</span><br><span class="line">             attribute.setSource(extractSource(metaElement));</span><br><span class="line">             attributeAccessor.addMetadataAttribute(attribute);</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//----------------------------处理property----------------------------</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parsePropertyElement</span><span class="params">(Element ele, BeanDefinition bd)</span> </span>&#123;</span><br><span class="line">String propertyName = ele.getAttribute(NAME_ATTRIBUTE); <span class="comment">//获取该propery名</span></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class="line">error(<span class="string">"Tag 'property' must have a 'name' attribute"</span>, ele);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> PropertyEntry(propertyName));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class="line">error(<span class="string">"Multiple 'property' definitions for property '"</span> + propertyName + <span class="string">"'"</span>, ele);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="comment">//此处是具体代码</span></span><br><span class="line">Object val = parsePropertyValue(ele, bd, propertyName);</span><br><span class="line">     <span class="comment">//返回值创建pv (key-vlaue) 类型</span></span><br><span class="line">PropertyValue pv = <span class="keyword">new</span> PropertyValue(propertyName, val);</span><br><span class="line">parseMetaElements(ele, pv);</span><br><span class="line">pv.setSource(extractSource(ele));</span><br><span class="line">     <span class="comment">//添加到bd#pvs中,这个pvs在ioc中注值使用,非常关键</span></span><br><span class="line">bd.getPropertyValues().addPropertyValue(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.parseState.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertyValue</span><span class="params">(Element ele, BeanDefinition bd, @Nullable String propertyName)</span> </span>&#123;</span><br><span class="line">String elementName = (propertyName != <span class="keyword">null</span> ?</span><br><span class="line"><span class="string">"&lt;property&gt; element for property '"</span> + propertyName + <span class="string">"'"</span> :</span><br><span class="line"><span class="string">"&lt;constructor-arg&gt; element"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should only have one child element: ref, value, list, etc.</span></span><br><span class="line">   <span class="comment">//[1]获取当前元素(即Property) 子元素,最多最外层 只能存在一个如上</span></span><br><span class="line">NodeList nl = ele.getChildNodes();</span><br><span class="line">Element subElement = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">Node node = nl.item(i);</span><br><span class="line"><span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element &amp;&amp; !nodeNameEquals(node, DESCRIPTION_ELEMENT) &amp;&amp;</span><br><span class="line">!nodeNameEquals(node, META_ELEMENT)) &#123;</span><br><span class="line"><span class="comment">// Child element is what we're looking for.</span></span><br><span class="line"><span class="keyword">if</span> (subElement != <span class="keyword">null</span>) &#123;</span><br><span class="line">error(elementName + <span class="string">" must not contain more than one sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">subElement = (Element) node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[1!]</span></span><br><span class="line">   <span class="comment">//[2] 不允许property元素带有value和ref属性, 或者任意属性并且有子元素</span></span><br><span class="line"><span class="keyword">boolean</span> hasRefAttribute = ele.hasAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="keyword">boolean</span> hasValueAttribute = ele.hasAttribute(VALUE_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> ((hasRefAttribute &amp;&amp; hasValueAttribute) ||</span><br><span class="line">((hasRefAttribute || hasValueAttribute) &amp;&amp; subElement != <span class="keyword">null</span>)) &#123;</span><br><span class="line">error(elementName +</span><br><span class="line"><span class="string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[2]</span></span><br><span class="line">   <span class="comment">//[3] 分情况讨论</span></span><br><span class="line"><span class="keyword">if</span> (hasRefAttribute) &#123;</span><br><span class="line">String refName = ele.getAttribute(REF_ATTRIBUTE);</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(elementName + <span class="string">" contains empty 'ref' attribute"</span>, ele);</span><br><span class="line">&#125;</span><br><span class="line">RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName);<span class="comment">//创建一个引用</span></span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="keyword">return</span> ref;</span><br><span class="line">&#125; <span class="comment">//ref情况返回</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hasValueAttribute) &#123;</span><br><span class="line">TypedStringValue valueHolder = <span class="keyword">new</span> TypedStringValue(ele.getAttribute(VALUE_ATTRIBUTE));</span><br><span class="line">valueHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="keyword">return</span> valueHolder;</span><br><span class="line">&#125;<span class="comment">//value 类型</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (subElement != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> parsePropertySubElement(subElement, bd); <span class="comment">//复杂情况,即property存在子元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Neither child element nor "ref" or "value" attribute found.</span></span><br><span class="line">error(elementName + <span class="string">" must specify a ref or value"</span>, ele);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">   [<span class="number">3</span>!]</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//-------------------------------处理property子元素------------------------------------</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">parsePropertySubElement</span><span class="params">(Element ele, @Nullable BeanDefinition bd, @Nullable String defaultValueType)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//[1]</span></span><br><span class="line"><span class="keyword">if</span> (!isDefaultNamespace(ele)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseNestedCustomElement(ele, bd); <span class="comment">//非标准元素,去调用custom逻辑,见下文</span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[1!]</span></span><br><span class="line">   <span class="comment">//[2]</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</span><br><span class="line">      <span class="comment">//Bean标签,相当于递归调用</span></span><br><span class="line">BeanDefinitionHolder nestedBd = parseBeanDefinitionElement(ele, bd);</span><br><span class="line"><span class="keyword">if</span> (nestedBd != <span class="keyword">null</span>) &#123;</span><br><span class="line">nestedBd = decorateBeanDefinitionIfRequired(ele, nestedBd, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nestedBd;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[2!]</span></span><br><span class="line">   <span class="comment">//[3]</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, REF_ELEMENT)) &#123;</span><br><span class="line"><span class="comment">// A generic reference to any name of any bean.</span></span><br><span class="line">String refName = ele.getAttribute(BEAN_REF_ATTRIBUTE);</span><br><span class="line"><span class="keyword">boolean</span> toParent = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line"><span class="comment">// A reference to the id of another bean in a parent context.</span></span><br><span class="line">refName = ele.getAttribute(PARENT_REF_ATTRIBUTE);</span><br><span class="line">toParent = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasLength(refName)) &#123;</span><br><span class="line">error(<span class="string">"'bean' or 'parent' is required for &lt;ref&gt; element"</span>, ele);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.hasText(refName)) &#123;</span><br><span class="line">error(<span class="string">"&lt;ref&gt; element contains empty target attribute"</span>, ele);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">RuntimeBeanReference ref = <span class="keyword">new</span> RuntimeBeanReference(refName, toParent);</span><br><span class="line">ref.setSource(extractSource(ele));</span><br><span class="line"><span class="keyword">return</span> ref;<span class="comment">// &lt;ref bean=""&gt; 处理</span></span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[4]</span></span><br><span class="line">   <span class="comment">//[5] &lt;idref bean=""&gt; 此处应该只能填写id</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, IDREF_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseIdRefElement(ele);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//[5!]</span></span><br><span class="line">   <span class="comment">//[6] &lt;value &gt;处理</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, VALUE_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseValueElement(ele, defaultValueType);</span><br><span class="line">&#125;<span class="comment">//[6!]</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, NULL_ELEMENT)) &#123;</span><br><span class="line"><span class="comment">// It's a distinguished null value. Let's wrap it in a TypedStringValue</span></span><br><span class="line"><span class="comment">// object in order to preserve the source location.</span></span><br><span class="line">TypedStringValue nullHolder = <span class="keyword">new</span> TypedStringValue(<span class="keyword">null</span>);</span><br><span class="line">nullHolder.setSource(extractSource(ele));</span><br><span class="line"><span class="keyword">return</span> nullHolder;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 这几个类型 可能会继续引起子 解析,</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, ARRAY_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseArrayElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, LIST_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseListElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, SET_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseSetElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, MAP_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parseMapElement(ele, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nodeNameEquals(ele, PROPS_ELEMENT)) &#123;</span><br><span class="line"><span class="keyword">return</span> parsePropsElement(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">error(<span class="string">"Unknown property sub-element: ["</span> + ele.getNodeName() + <span class="string">"]"</span>, ele);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ul><h6 id="custom元素"><a class="header-anchor" href="#custom元素">¶</a>custom元素</h6><ul><li>NamespaceHandler体系<br><figure class="highlight java"><figcaption><span>BeanDefinitionParserDelegate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">     <span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parseCustomElement(ele, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, @Nullable BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">String namespaceUri = getNamespaceURI(ele);</span><br><span class="line"><span class="keyword">if</span> (namespaceUri == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//根据不同的元素使用不同的handler 来处理</span></span><br><span class="line">NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><br><figure class="highlight java"><figcaption><span>ContextNamespaceHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//内部的Parser实际 完成具体的逻辑</span></span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"property-placeholder"</span>, <span class="keyword">new</span> PropertyPlaceholderBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"property-override"</span>, <span class="keyword">new</span> PropertyOverrideBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"annotation-config"</span>, <span class="keyword">new</span> AnnotationConfigBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"component-scan"</span>, <span class="keyword">new</span> ComponentScanBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"load-time-weaver"</span>, <span class="keyword">new</span> LoadTimeWeaverBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"spring-configured"</span>, <span class="keyword">new</span> SpringConfiguredBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"mbean-export"</span>, <span class="keyword">new</span> MBeanExportBeanDefinitionParser());</span><br><span class="line">   registerBeanDefinitionParser(<span class="string">"mbean-server"</span>, <span class="keyword">new</span> MBeanServerBeanDefinitionParser());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ul><li><p>ComponentScanBeanDefinitionParser</p>  <figure class="highlight java"><figcaption><span>ComponentScanBeanDefinitionParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">  String basePackage = element.getAttribute(BASE_PACKAGE_ATTRIBUTE);</span><br><span class="line">  basePackage = parserContext.getReaderContext().getEnvironment().resolvePlaceholders(basePackage);</span><br><span class="line">  String[] basePackages = StringUtils.tokenizeToStringArray(basePackage,</span><br><span class="line">      ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Actually scan for bean definitions and register them.</span></span><br><span class="line">  <span class="comment">//调用该Scanner来处理</span></span><br><span class="line">  ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);</span><br><span class="line">  <span class="comment">//返回在对应的classPath 正确注解的bean</span></span><br><span class="line">  Set&lt;BeanDefinitionHolder&gt; beanDefinitions = scanner.doScan(basePackages);</span><br><span class="line">  <span class="comment">//给当前BeanFactory中添加一些后处理器,此处的功能和annotation-config类似</span></span><br><span class="line">  registerComponents(parserContext.getReaderContext(), beanDefinitions, element);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>ClassPathBeanDefinitionScanner:这个才是实际扫描路径并创建的sbd的类<br>spring处理注解@ComponentScan注解最终也要用到该类,外层是ComponentScanAnnotationParser<br>具体注解处理的代码分析可以参考,<a href="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/#applicationcontextinitializer">springBoot学习一</a>.</li></ul></li><li><p>AnnotationConfigBeanDefinitionParser</p>  <figure class="highlight java"><figcaption><span>AnnotationConfigBeanDefinitionParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationConfigBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">Object source = parserContext.extractSource(element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Obtain bean definitions for all relevant BeanPostProcessors.</span></span><br><span class="line">    <span class="comment">//AnnotationConfigUtils该类在许多springContext都用到了</span></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; processorDefinitions =</span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(parserContext.getRegistry(), source);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register component for the surrounding &lt;context:annotation-config&gt; element.</span></span><br><span class="line">CompositeComponentDefinition compDefinition = <span class="keyword">new</span> CompositeComponentDefinition(element.getTagName(), source);</span><br><span class="line">parserContext.pushContainingComponent(compDefinition);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Nest the concrete beans in the surrounding component.</span></span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder processorDefinition : processorDefinitions) &#123;</span><br><span class="line">parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(processorDefinition));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally register the composite component.</span></span><br><span class="line">parserContext.popAndRegisterContainingComponent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>对于AnnotationConfigUtils参考<a href="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/#boot%E4%B8%ADcontext">context相关</a></p></li><li><p>LoadTimeWeaverBeanDefinitionParser<br>创建<code>DefaultContextLoadTimeWeaver</code>GBD和<code>AspectJWeavingEnabler</code></p></li></ul>  <figure class="highlight java"><figcaption><span>LoadTimeWeaverBeanDefinitionParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASPECTJ_WEAVING_ENABLER_BEAN_NAME =</span><br><span class="line"><span class="string">"org.springframework.context.config.internalAspectJWeavingEnabler"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASPECTJ_WEAVING_ENABLER_CLASS_NAME =</span><br><span class="line"><span class="string">"org.springframework.context.weaving.AspectJWeavingEnabler"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_LOAD_TIME_WEAVER_CLASS_NAME =</span><br><span class="line"><span class="string">"org.springframework.context.weaving.DefaultContextLoadTimeWeaver"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEAVER_CLASS_ATTRIBUTE = <span class="string">"weaver-class"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ASPECTJ_WEAVING_ATTRIBUTE = <span class="string">"aspectj-weaving"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//返回DefaultContextLoadTimeWeaver beanClass,具体逻辑要看AbstractSingleBeanDefinitionParser逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getBeanClassName</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (element.hasAttribute(WEAVER_CLASS_ATTRIBUTE)) &#123;</span><br><span class="line"><span class="keyword">return</span> element.getAttribute(WEAVER_CLASS_ATTRIBUTE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DEFAULT_LOAD_TIME_WEAVER_CLASS_NAME;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//返回LTW bean Name</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolveId</span><span class="params">(Element element, AbstractBeanDefinition definition, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ConfigurableApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//解析标签,创建一个AspectJWeavingEnabler bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, ParserContext parserContext, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAspectJWeavingEnabled(element.getAttribute(ASPECTJ_WEAVING_ATTRIBUTE), parserContext)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!parserContext.getRegistry().containsBeanDefinition(ASPECTJ_WEAVING_ENABLER_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(ASPECTJ_WEAVING_ENABLER_CLASS_NAME);</span><br><span class="line">parserContext.registerBeanComponent(</span><br><span class="line"><span class="keyword">new</span> BeanComponentDefinition(def, ASPECTJ_WEAVING_ENABLER_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isBeanConfigurerAspectEnabled(parserContext.getReaderContext().getBeanClassLoader())) &#123;</span><br><span class="line"><span class="keyword">new</span> SpringConfiguredBeanDefinitionParser().parse(element, parserContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   </span><br></pre></td></tr></table></figure>简单来说LWT就是载入时织入,与spring aop实现点不同,后者是运行时编译</li></ul><h6 id="xml-和-注解实现的一些区别"><a class="header-anchor" href="#xml-和-注解实现的一些区别">¶</a>xml 和 注解实现的一些区别</h6><ul><li>单纯使用xml的话,gbd创建会包含所有的信息,如pvs,各种ioc属性</li><li>注解的话很多都要进行后处理器来处理<ul><li>name一个String类型  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  zhangsan</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注解实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"张三"</span>)</span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li>前者会在为gbd#pvs,后者必须经过AutowiredAnnotationBeanPostProcessor(@AutoWire,@Value,@Inject)处理</li></ul></li></ul><h5 id="BeanDefinition"><a class="header-anchor" href="#BeanDefinition">¶</a>BeanDefinition</h5><img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/RootBeanDetinition.png" class="" title="RootBeanDetinition"><p>spring常见的接口设计模式:</p><ul><li>RootBeanDetinition实质是一个AttributeAccessor和BeanDefinition</li><li>属于AttributeAccessor的部分由父类BeanMetadataAttributeAccessor实现</li><li>AttributeAccessor:该接口定义如何访问源信息中的属性,在Bd体系中,通过 ‘BeanMetadataAttribut’,作为meta 原信息体现key-value<ul><li>AttributeAccessor<figure class="highlight java"><figcaption><span>AttributeAccessor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, @Nullable Object value)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">getAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">removeAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasAttribute</span><span class="params">(String name)</span></span>;</span><br><span class="line">String[] attributeNames();</span><br><span class="line">      </span><br></pre></td></tr></table></figure></li><li>AttributeAccessorSupport<figure class="highlight java"><figcaption><span>AttributeAccessorSupport</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">//该map就是属性储存的位置,在该体系中,此map表示的是bean的一些附加信息,跟属性无关</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; attributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">Assert.notNull(name, <span class="string">"Name must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.attributes.put(name, value);</span><br><span class="line">&#125;:</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">removeAttribute(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li>BeanMetadataAttributeAccessor<img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/BeanMetadataAttributeAccessor.png" class=""><figure class="highlight java"><figcaption><span>BeanMetadataAttributeAccessor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//包含了要进行配置的对象</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the configuration source &#123;<span class="doctag">@code</span> Object&#125; for this metadata element</span></span><br><span class="line"><span class="comment"> * (may be &#123;<span class="doctag">@code</span> null&#125;).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">Object <span class="title">getSource</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* Holder <span class="keyword">for</span> a key-value style attribute that is part of a bean definition.</span><br><span class="line">* Keeps track of the definition source in addition to the key-value pair.</span><br><span class="line">*</span><br><span class="line">* <span class="meta">@author</span> Juergen Hoeller</span><br><span class="line">* <span class="meta">@since</span> <span class="number">2.5</span></span><br><span class="line">*/</span><br><span class="line"><span class="comment">//包含了source中一个属性的键值对,可以理解为pair</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanMetadataAttribute</span> <span class="keyword">implements</span> <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Object value;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"> <span class="keyword">private</span> Object source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extension of &#123;<span class="doctag">@link</span> org.springframework.core.AttributeAccessorSupport&#125;,</span></span><br><span class="line"><span class="comment"> * holding attributes as &#123;<span class="doctag">@link</span> BeanMetadataAttribute&#125; objects in order</span></span><br><span class="line"><span class="comment"> * to keep track of the definition source.</span></span><br><span class="line"><span class="comment"> * 该类用来访问source中属性,属性由BeanMetaDataAttribute包装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanMetadataAttributeAccessor</span> <span class="keyword">extends</span> <span class="title">AttributeAccessorSupport</span> <span class="keyword">implements</span> <span class="title">BeanMetadataElement</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> Object source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Set the configuration source &#123;<span class="doctag">@code</span> Object&#125; for this metadata element.</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;The exact type of the object will depend on the configuration mechanism used.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSource</span><span class="params">(@Nullable Object source)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.source = source;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.source;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Add the given BeanMetadataAttribute to this accessor's set of attributes.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> attribute the BeanMetadataAttribute object to register</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMetadataAttribute</span><span class="params">(BeanMetadataAttribute attribute)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.setAttribute(attribute.getName(), attribute);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/ScannedGenericBeanDefinition.png" class="">此时的source用来说明bd的来源,该类型会在注册到<code>BeanFactory</code>时被转换为<code>RootBeanDefintion</code>类型<br>图中propertyValues,是xml处理<propery>时添加的字面属性,在ioc过程中pvs要经过类型转换,以及各种处理器.</li></ul></li><li>BeanDefinition:该接口实质是描述了springBean配置</li><li>常见子类ScannedGenericBeanDefinition和GenericBeanDefinition  <figure class="highlight java"><figcaption><span>BeanDefinition</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setScope</span><span class="params">(@Nullable String scope)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setLazyInit</span><span class="params">(<span class="keyword">boolean</span> lazyInit)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDependsOn</span><span class="params">(@Nullable String... dependsOn)</span></span>;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h5 id="BeanWrapper"><a class="header-anchor" href="#BeanWrapper">¶</a>BeanWrapper</h5><img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/BeanWrapper.png" class="" title="BeanWrapper"><ul><li>PropertyEditorRegistry 和 TypeConverter组成属性转换器</li></ul><h6 id="属性类型转换"><a class="header-anchor" href="#属性类型转换">¶</a>属性类型转换</h6><img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/Property.png" class="" title="PropertyEditorRegistry"><ul><li><p>PropertyEditor是jdk提供的接口,用来进行属性类型转换的</p>  <figure class="highlight java"><figcaption><span>PropertyEditor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyEditor</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span></span>;</span><br><span class="line">        <span class="comment">//将转递的stirng类型进行转换</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> java.lang.IllegalArgumentException</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//一般继承该接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyEditorSupport</span> <span class="keyword">implements</span> <span class="title">PropertyEditor</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> Object value;</span><br><span class="line">      <span class="keyword">private</span> Object source;</span><br><span class="line">      <span class="keyword">private</span> java.util.Vector&lt;PropertyChangeListener&gt; listeners;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">PropertyEditorSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      setSource(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PropertyEditorSupport</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (source == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">      &#125;</span><br><span class="line">      setSource(source);</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//spirng中的一个实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteArrayPropertyEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(@Nullable String text)</span> </span>&#123;</span><br><span class="line">setValue(text != <span class="keyword">null</span> ? text.getBytes() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[] value = (<span class="keyword">byte</span>[]) getValue();</span><br><span class="line"><span class="keyword">return</span> (value != <span class="keyword">null</span> ? <span class="keyword">new</span> String(value) : <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>PropertyEditor使用</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.当类型String-&gt;Type转换</span></span><br><span class="line"><span class="comment">//调用setText()</span></span><br><span class="line"><span class="comment">//2.当其他类型-&gt;Type</span></span><br><span class="line"><span class="comment">//调用setValue()</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>PropertyEditorRegistrySupport使用Map存储PropertyEditor</p>  <figure class="highlight java"><figcaption><span>PropertyEditorRegistrySupport</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyEditorRegistrySupport</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistry</span> </span>&#123;</span><br><span class="line"> <span class="comment">//spring 实现的类型转换器,先略过    </span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ConversionService conversionService;</span><br><span class="line"> <span class="comment">//默认的类型转换器</span></span><br><span class="line"> <span class="keyword">private</span> Map&lt;Class&lt;?&gt;, PropertyEditor&gt; defaultEditors;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDefaultEditors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.defaultEditors.put(Charset<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">CharsetEditor</span>())</span>;</span><br><span class="line"><span class="keyword">this</span>.defaultEditors.put(Class<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ClassEditor</span>())</span>;</span><br><span class="line"><span class="keyword">this</span>.defaultEditors.put(Class[]<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ClassArrayEditor</span>())</span>;</span><br><span class="line">   <span class="comment">//....添加了大量的类型转换器</span></span><br><span class="line"> &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>TypeConverterDelegate作为委托模式用来真正处理类型转换</p>  <figure class="highlight java"><figcaption><span>TypeConverterSupport</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeConverterSupport</span> <span class="keyword">extends</span> <span class="title">PropertyEditorRegistrySupport</span> <span class="keyword">implements</span> <span class="title">TypeConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">TypeConverterDelegate typeConverterDelegate;</span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convertIfNecessary</span><span class="params">(@Nullable Object value, @Nullable Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable TypeDescriptor typeDescriptor)</span> <span class="keyword">throws</span> TypeMismatchException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.typeConverterDelegate.convertIfNecessary(<span class="keyword">null</span>, <span class="keyword">null</span>, value, requiredType,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托逻辑</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TypeConverterDelegate</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  propertyName 表示属性名</span></span><br><span class="line"><span class="comment">  *  oldValue 表示旧值,若该函数是pvs设值时调用一般是null</span></span><br><span class="line"><span class="comment">  *  newValue 表示此次要设置的值,也是要处理进行类型 转换的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convertIfNecessary</span><span class="params">(@Nullable String propertyName, @Nullable Object oldValue, @Nullable Object newValue,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Class&lt;T&gt; requiredType, @Nullable TypeDescriptor typeDescriptor)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom editor for this type?</span></span><br><span class="line"><span class="comment">//获取自定义的属性编辑器</span></span><br><span class="line">PropertyEditor editor = <span class="keyword">this</span>.propertyEditorRegistry.findCustomEditor(requiredType, propertyName);</span><br><span class="line"></span><br><span class="line">ConversionFailedException conversionAttemptEx = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No custom editor but custom ConversionService specified?</span></span><br><span class="line"><span class="comment">// 尝试使用ConversionService进行转换</span></span><br><span class="line">ConversionService conversionService = <span class="keyword">this</span>.propertyEditorRegistry.getConversionService();</span><br><span class="line"><span class="keyword">if</span> (editor == <span class="keyword">null</span> &amp;&amp; conversionService != <span class="keyword">null</span> &amp;&amp; newValue != <span class="keyword">null</span> &amp;&amp; typeDescriptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue);</span><br><span class="line"><span class="keyword">if</span> (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (ConversionFailedException ex) &#123;</span><br><span class="line">    <span class="comment">// fallback to default conversion logic below</span></span><br><span class="line">    conversionAttemptEx = ex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value not of required type?</span></span><br><span class="line"><span class="keyword">if</span> (editor != <span class="keyword">null</span> || (requiredType != <span class="keyword">null</span> &amp;&amp; !ClassUtils.isAssignableValue(requiredType, convertedValue))) &#123; <span class="comment">//没有自定义编辑器或者 不能直接分配(即newValue需要进行向requiredType的转换)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (typeDescriptor != <span class="keyword">null</span> &amp;&amp; requiredType != <span class="keyword">null</span> &amp;&amp; Collection<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">requiredType</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">    <span class="title">convertedValue</span> <span class="title">instanceof</span> <span class="title">String</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//此处代码逻辑 是 当属性为Collection&lt;Class&gt;|Collection&lt;Eunm&gt; 时,可以将该字符串当作CSV转化    </span></span><br><span class="line">  TypeDescriptor elementTypeDesc = typeDescriptor.getElementTypeDescriptor();</span><br><span class="line">  <span class="keyword">if</span> (elementTypeDesc != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; elementType = elementTypeDesc.getType();</span><br><span class="line">    <span class="keyword">if</span> (Class<span class="class">.<span class="keyword">class</span> </span>== elementType || Enum<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">elementType</span>)) </span>&#123;</span><br><span class="line">      convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (editor == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 根据requiredType从map中获取对应的propertyEditor</span></span><br><span class="line">  editor = findDefaultEditor(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进行转换</span></span><br><span class="line">convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> standardConversion = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//....下边的逻辑是对于不能直接适配的情况,进一步的标准处理</span></span><br></pre></td></tr></table></figure></li></ul><img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/doConvertValue.png" class="" title="doConvertValue"><figure class="highlight java"><figcaption><span>doConvertValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际转换逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">doConvertValue</span><span class="params">(@Nullable Object oldValue, @Nullable Object newValue,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Class&lt;?&gt; requiredType, @Nullable PropertyEditor editor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Object convertedValue = newValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (editor != <span class="keyword">null</span> &amp;&amp; !(convertedValue <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line">      <span class="comment">//一般来说spring基本都是将string类型进行转换,但是如果此处的value并不是String,</span></span><br><span class="line">      <span class="comment">//那么就要调用PropertyEditor的setValue进行转换,然后再get出来,这个set逻辑要</span></span><br><span class="line">      <span class="comment">//用户自己实现,或者spring内部提供了对应的转换器</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">editor.setValue(convertedValue);</span><br><span class="line">Object newConvertedValue = editor.getValue();</span><br><span class="line"><span class="keyword">if</span> (newConvertedValue != convertedValue) &#123;</span><br><span class="line">convertedValue = newConvertedValue;</span><br><span class="line"><span class="comment">// Reset PropertyEditor: It already did a proper conversion.</span></span><br><span class="line"><span class="comment">// Don't use it again for a setAsText call.</span></span><br><span class="line">editor = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"PropertyEditor ["</span> + editor.getClass().getName() + <span class="string">"] does not support setValue call"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Swallow and proceed.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object returnValue = convertedValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isArray() &amp;&amp; convertedValue <span class="keyword">instanceof</span> String[]) &#123;</span><br><span class="line">  <span class="comment">//若转换类型不为数组,并且给定的value为String数组,则将value转为成CVS</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Converting String array to comma-delimited String ["</span> + convertedValue + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">convertedValue = StringUtils.arrayToCommaDelimitedString((String[]) convertedValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若经过上述两操作,cV还是String,那么就可以执行Text类型转换</span></span><br><span class="line"><span class="keyword">if</span> (convertedValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"><span class="keyword">if</span> (editor != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Use PropertyEditor's setAsText in case of a String value.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Converting String to ["</span> + requiredType + <span class="string">"] using property editor ["</span> + editor + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String newTextValue = (String) convertedValue;</span><br><span class="line"><span class="keyword">return</span> doConvertTextValue(oldValue, newTextValue, editor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (String<span class="class">.<span class="keyword">class</span> </span>== requiredType) &#123;</span><br><span class="line">returnValue = convertedValue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> returnValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Object <span class="title">doConvertTextValue</span><span class="params">(@Nullable Object oldValue, String newTextValue, PropertyEditor editor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">editor.setValue(oldValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"PropertyEditor ["</span> + editor.getClass().getName() + <span class="string">"] does not support setValue call"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Swallow and proceed.</span></span><br><span class="line">&#125;</span><br><span class="line">editor.setAsText(newTextValue);</span><br><span class="line"><span class="keyword">return</span> editor.getValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure><ul><li>例子</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sub sub;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">//不需要转换,$&#123;test&#125;从ev中获取</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"D:/1.txt"</span>)    </span><br><span class="line">    <span class="keyword">private</span> File file;    <span class="comment">//通过FileEditor 转换</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"1,2,3,4"</span>)</span><br><span class="line">    <span class="keyword">private</span> String[] test2; <span class="comment">//通过StringArrayEditor 直接转换</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"I:/BaiduNetdisk/api-ms-win-core-console-l1-1-0.dll,I:/BaiduNetdisk/api-ms-win-core-datetime-l1-1-0.dll"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;File&gt; files; <span class="comment">//先通过CustomCollectionEditor ,再通过FileEditor转换</span></span><br><span class="line">    <span class="comment">//但是默认情况下,这个转换器并不能正确处理这种类型</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//private File[] files   //没有该类型转换器</span></span><br></pre></td></tr></table></figure><p>这里描述一下非基础类型数组|集合转换逻辑<br>convertIfNecessary-&gt;判断能否进行CVS处理,如果不行则执行CustomCollectionEditor转换,结果是一个<br>单个 元素list,后续逻辑中 进行遍历,再调用convertIfNecessary,那么结果一定是错的.</p><ul><li>添加自定义编辑器<br>通过CustomEditorConfigurer实现,这是一个BF_post</li></ul><h4 id="spring-post处理器"><a class="header-anchor" href="#spring-post处理器">¶</a>spring_post处理器</h4><ul><li>BeanPostProcessor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MergedBeanDefinitionPostProcessor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MergedBeanDefinitionPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcessMergedBeanDefinition</span><span class="params">(RootBeanDefinition beanDefinition, Class&lt;?&gt; beanType, String beanName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">resetBeanDefinition</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>InstantiationAwareBeanPostProcessor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Instantiation表示实例化,即ioc反射创建BeanWrap;Initialization表示初始化,指ioc对于bean的init逻辑,如init-method</li><li>SmartInstantiationAwareBeanPostProcessor#getEarlyBeanReference发生在早期引用获取过程</li><li>具体执行顺序参考<a href="/2019/05/21/ioc/#%E5%85%B3%E4%BA%8E%E5%8D%95%E4%BE%8Bbean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98">生命周期</a></li></ul><h4 id="LTW"><a class="header-anchor" href="#LTW">¶</a>LTW</h4><p>载入时织入,使用方式参考<a href="https://www.w3xue.com/exp/article/20189/1890.html" target="_blank" rel="noopener">LTW</a>,</p><ul><li>由<code>LoadTimeWeaverBeanDefinitionParser</code>创建<code>AspectJWeavingEnabler</code>以及<code>DefaultContextLoadTimeWeaver</code></li></ul><h4 id="MessageSource"><a class="header-anchor" href="#MessageSource">¶</a>MessageSource</h4><p>该接口是spring提供的和i18n相关的基础类,使用起来并不复杂</p><ul><li><p>ResourceBulde:jdk实现的国际化类,也是messageSource的内部原理</p><ul><li>准备多种语言properties文件<img src="/2020/02/11/spring%E5%B8%B8%E8%A7%81/%E5%A4%9A%E8%AF%AD%E8%A8%80.png" class="">error.properties<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000=error</span><br><span class="line">0001=info</span><br></pre></td></tr></table></figure>error_zh.Properties<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0000=错误</span><br><span class="line">test=this is a &#123;0&#125;</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据Local获取不同的ResourceBulde</span></span><br><span class="line">ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">"error"</span>,Locale.getDefault());</span><br><span class="line">String zh_test = resourceBundle.getString(<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">//this is a &#123;0&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>MessageFormat:jdk提供用来替换占位符的工具类</p><ul><li>接上文<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MessageFormat messageFormat = <span class="keyword">new</span> MessageFormat(zh_test);</span><br><span class="line">messageFormat.format(<span class="keyword">new</span> String[]&#123;<span class="string">"测试"</span>&#125;)</span><br><span class="line"><span class="comment">//静态调用</span></span><br><span class="line">MessageFormat.format(<span class="string">"this is a &#123;0&#125;"</span>,<span class="string">"测试"</span>)</span><br><span class="line"><span class="comment">//结果都是 this is a 测试</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>MessageSource</p><ul><li>定义<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* code 表示要转换的key,如上文的0000,test</span></span><br><span class="line"><span class="comment">* args 表示可以替换的占位符,如MessageFormat.format("this is a &#123;0&#125;",new String[]&#123;"测试"&#125;)第二个参数</span></span><br><span class="line"><span class="comment">* defaultMessage 表示未能匹配时返回的默认值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale)</span></span>;</span><br><span class="line"><span class="comment">//无默认,不匹配则抛出异常</span></span><br><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">(String code, @Nullable Object[] args, Locale locale)</span> <span class="keyword">throws</span> NoSuchMessageException</span>;</span><br><span class="line"><span class="comment">//MessageSourceResolvable仅仅是封装了第一个函数的前三个参数</span></span><br><span class="line"><span class="function">String <span class="title">getMessage</span><span class="params">(MessageSourceResolvable resolvable, Locale locale)</span> <span class="keyword">throws</span> NoSuchMessageException</span>;</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ResourceBundleMessageSource是spring提供的实现之一</span></span><br><span class="line">ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line"><span class="comment">//设置properties</span></span><br><span class="line">messageSource.setBasename(<span class="string">"error"</span>);</span><br><span class="line">messageSource.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">String message = messageSource.getMessage(<span class="string">"0001"</span>, <span class="keyword">null</span>, Locale.ENGLISH);</span><br><span class="line">System.out.println(message);</span><br><span class="line"><span class="comment">//error</span></span><br><span class="line">String str1 = messageSource.getMessage(<span class="string">"test"</span>,<span class="keyword">new</span> String[]&#123;<span class="string">"测试"</span>&#125;,Locale.CHINESE);</span><br><span class="line">System.out.println(str1);</span><br><span class="line"><span class="comment">//this is a 测试</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="spring框架中提供的特殊调用点"><a class="header-anchor" href="#spring框架中提供的特殊调用点">¶</a>spring框架中提供的特殊调用点</h4><h5 id="spring-web关于web容器的初始化"><a class="header-anchor" href="#spring-web关于web容器的初始化">¶</a>spring web关于web容器的初始化</h5><ul><li>web相关:参考<a href="/2019/02/19/SpringMVC%E6%BA%90%E7%A0%81/#dispatcherServlet">dispatcherServlet</a><ul><li>ContextLoaderListener:初始化MVC中ioc容器</li><li>SpringServletContainerInitializer:ServletContainerInitializer框架</li><li>WebApplicationInitializer:web初始化实际调用接口</li></ul></li><li>MVC相关<ul><li>WebMvcConfigurer:MVC内部的设置</li></ul></li><li>spring context<ul><li>ApplicationContextInitializer:该接口被context#refresh的调用|或context创建者调用<br>,就是整体项目的入口,如SpringApplication | FrameworkServlet</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> spring组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC核心</title>
      <link href="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/"/>
      <url>/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="spring关键组件解析"><a class="header-anchor" href="#spring关键组件解析">¶</a>spring关键组件解析</h3><p>本文核心在于说明mvc处理请求的两大组件<code>mapping</code>和<code>adapter</code>,以及渲染过程.</p><h4 id="一、mapping"><a class="header-anchor" href="#一、mapping">¶</a>一、mapping</h4><p>用来提供key-value的请求缓存视图,以及匹配url.<br>该对象用来初始化系统中的<code>handler</code>,以及用来匹配请求</p><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/Mapping.png" class=""><figure class="highlight java"><figcaption><span>HandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure><ul><li>HandlerExecutionChain:用于调用拦截链,包含<code>Handler</code></li></ul><figure class="highlight java"><figcaption><span>HandlerExecutionChain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerExecutionChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(HandlerExecutionChain<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//此处的handler没有使用统一接口</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object handler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerInterceptor[] interceptors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerInterceptor&gt; interceptorList;</span><br></pre></td></tr></table></figure><ul><li>Handler:实际上执行请求逻辑的组件<ul><li>HttpRequestHandler</li><li>HandlerMethod</li><li>Servlet</li><li>Controller</li></ul></li><li>Mapping的作用和其子类<br>调用逻辑:</li></ul><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/mapping%E8%B0%83%E7%94%A8%E9%80%BB%E8%BE%91.png" class=""><p>实际上就两种类型<code>AbstractUrlHandlerMapping</code>和<code>AbstractHandlerMethodMapping</code></p><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/Mapping%E5%AD%90%E7%B1%BB.png" class=""><h5 id="1-1-AbstractHandlerMapping"><a class="header-anchor" href="#1-1-AbstractHandlerMapping">¶</a>1.1 AbstractHandlerMapping</h5><pre><code>初始化拦截器,实现普遍逻辑</code></pre>  <figure class="highlight java"><figcaption><span>AbstractHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandlerMapping</span> <span class="keyword">extends</span> <span class="title">WebApplicationObjectSupport</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">HandlerMapping</span>, <span class="title">Ordered</span>, <span class="title">BeanNameAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//获取拦截链</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">extendInterceptors(<span class="keyword">this</span>.interceptors);</span><br><span class="line">detectMappedInterceptors(<span class="keyword">this</span>.adaptedInterceptors);</span><br><span class="line">initInterceptors();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//核心逻辑</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//该逻辑由子类实现</span></span><br><span class="line">Object handler = getHandlerInternal(request);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">handler = getDefaultHandler();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bean name or resolved handler?</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">String handlerName = (String) handler;</span><br><span class="line">handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//此处为公共逻辑</span></span><br><span class="line">HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Mapped to "</span> + handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (logger.isDebugEnabled() &amp;&amp; !request.getDispatcherType().equals(DispatcherType.ASYNC)) &#123;</span><br><span class="line">logger.debug(<span class="string">"Mapped to "</span> + executionChain.getHandler());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CorsUtils.isCorsRequest(request)) &#123;</span><br><span class="line">CorsConfiguration globalConfig = <span class="keyword">this</span>.corsConfigurationSource.getCorsConfiguration(request);</span><br><span class="line">CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class="line">CorsConfiguration config = (globalConfig != <span class="keyword">null</span> ? globalConfig.combine(handlerConfig) : handlerConfig);</span><br><span class="line">executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> executionChain;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------getHandlerExecutionChain--------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandlerExecutionChain</span><span class="params">(Object handler, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="comment">//添加拦截器</span></span><br><span class="line">HandlerExecutionChain chain = (handler <span class="keyword">instanceof</span> HandlerExecutionChain ?</span><br><span class="line">(HandlerExecutionChain) handler : <span class="keyword">new</span> HandlerExecutionChain(handler));</span><br><span class="line"></span><br><span class="line">String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request, LOOKUP_PATH);</span><br><span class="line"><span class="keyword">for</span> (HandlerInterceptor interceptor : <span class="keyword">this</span>.adaptedInterceptors) &#123;</span><br><span class="line"><span class="keyword">if</span> (interceptor <span class="keyword">instanceof</span> MappedInterceptor) &#123;</span><br><span class="line">MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class="line"><span class="keyword">if</span> (mappedInterceptor.matches(lookupPath, <span class="keyword">this</span>.pathMatcher)) &#123;</span><br><span class="line">chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">chain.addInterceptor(interceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chain;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="1-2-AbstractUrlHandlerMapping类型"><a class="header-anchor" href="#1-2-AbstractUrlHandlerMapping类型">¶</a>1.2 AbstractUrlHandlerMapping类型</h5><p>该类型缓存key-value键值对,通过map来实现</p> <figure class="highlight java"><figcaption><span>AbstractUrlHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; handlerMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//当没有任何匹配时可以使用该handler</span></span><br><span class="line"><span class="keyword">private</span> Object rootHandler;</span><br><span class="line"><span class="comment">//该函数 供子类调用用于注册handler</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandler</span><span class="params">(String urlPath, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="comment">//url类型的配置逻辑</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">Object handler = lookupHandler(lookupPath, request);</span><br><span class="line">  <span class="comment">//省略</span></span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置handler</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">lookupHandler</span><span class="params">(String urlPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// Direct match? 即缓存中存在</span></span><br><span class="line">Object handler = <span class="keyword">this</span>.handlerMap.get(urlPath);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123; <span class="comment">//若为string类型则从bean容器中获取,并做一次处理</span></span><br><span class="line"><span class="comment">// Bean name or resolved handler?</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">String handlerName = (String) handler;</span><br><span class="line">handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">&#125;</span><br><span class="line">validateHandler(handler, request);</span><br><span class="line"><span class="keyword">return</span> buildPathExposingHandler(handler, urlPath, urlPath, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pattern match? 即最初缓存的可能是 带有统配符模式的url路径</span></span><br><span class="line">List&lt;String&gt; matchingPatterns = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String registeredPattern : <span class="keyword">this</span>.handlerMap.keySet()) &#123;</span><br><span class="line"><span class="keyword">if</span> (getPathMatcher().match(registeredPattern, urlPath)) &#123;</span><br><span class="line">matchingPatterns.add(registeredPattern);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (useTrailingSlashMatch()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!registeredPattern.endsWith(<span class="string">"/"</span>) &amp;&amp; getPathMatcher().match(registeredPattern + <span class="string">"/"</span>, urlPath)) &#123;</span><br><span class="line">matchingPatterns.add(registeredPattern +<span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String bestMatch = <span class="keyword">null</span>;</span><br><span class="line">Comparator&lt;String&gt; patternComparator = getPathMatcher().getPatternComparator(urlPath);</span><br><span class="line"><span class="keyword">if</span> (!matchingPatterns.isEmpty()) &#123;</span><br><span class="line">matchingPatterns.sort(patternComparator);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled() &amp;&amp; matchingPatterns.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">logger.trace(<span class="string">"Matching patterns "</span> + matchingPatterns);</span><br><span class="line">&#125;</span><br><span class="line">bestMatch = matchingPatterns.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bestMatch != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//此处逻辑和直接直接相同</span></span><br><span class="line">handler = <span class="keyword">this</span>.handlerMap.get(bestMatch);</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (bestMatch.endsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">handler = <span class="keyword">this</span>.handlerMap.get(bestMatch.substring(<span class="number">0</span>, bestMatch.length() - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Could not find handler for best pattern match ["</span> + bestMatch + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Bean name or resolved handler?</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">String handlerName = (String) handler;</span><br><span class="line">handler = obtainApplicationContext().getBean(handlerName);</span><br><span class="line">&#125;</span><br><span class="line">validateHandler(handler, request);</span><br><span class="line">String pathWithinMapping = getPathMatcher().extractPathWithinPattern(bestMatch, urlPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// There might be multiple 'best patterns', let's make sure we have the correct URI template variables</span></span><br><span class="line"><span class="comment">// for all of them</span></span><br><span class="line">Map&lt;String, String&gt; uriTemplateVariables = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String matchingPattern : matchingPatterns) &#123;</span><br><span class="line"><span class="keyword">if</span> (patternComparator.compare(bestMatch, matchingPattern) == <span class="number">0</span>) &#123;</span><br><span class="line">Map&lt;String, String&gt; vars = getPathMatcher().extractUriTemplateVariables(matchingPattern, urlPath);</span><br><span class="line">Map&lt;String, String&gt; decodedVars = getUrlPathHelper().decodePathVariables(request, vars);</span><br><span class="line">uriTemplateVariables.putAll(decodedVars);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled() &amp;&amp; uriTemplateVariables.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">logger.trace(<span class="string">"URI variables "</span> + uriTemplateVariables);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> buildPathExposingHandler(handler, bestMatch, pathWithinMapping, uriTemplateVariables);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No handler found...</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SimpleUrlHandlerMapping</li></ul>  <figure class="highlight java"><figcaption><span>SimpleUrlHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Setter|Getter,使用者如果要使用该`mapping`,则需要手动添加该map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; urlMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.initApplicationContext();</span><br><span class="line">registerHandlers(<span class="keyword">this</span>.urlMap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerHandlers</span><span class="params">(Map&lt;String, Object&gt; urlMap)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (urlMap.isEmpty()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No patterns in "</span> + formatMappingName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">urlMap.forEach((url, handler) -&gt; &#123;</span><br><span class="line"><span class="comment">// Prepend with slash if not already present.</span></span><br><span class="line"><span class="keyword">if</span> (!url.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">url = <span class="string">"/"</span> + url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Remove whitespace from handler bean name.</span></span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">handler = ((String) handler).trim();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用父类注册函数</span></span><br><span class="line">registerHandler(url, handler);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">List&lt;String&gt; patterns = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (getRootHandler() != <span class="keyword">null</span>) &#123;</span><br><span class="line">patterns.add(<span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (getDefaultHandler() != <span class="keyword">null</span>) &#123;</span><br><span class="line">patterns.add(<span class="string">"/**"</span>);</span><br><span class="line">&#125;</span><br><span class="line">patterns.addAll(getHandlerMap().keySet());</span><br><span class="line">logger.debug(<span class="string">"Patterns "</span> + patterns + <span class="string">" in "</span> + formatMappingName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举个使用的例子,casServer的用法</p><figure class="highlight java"><figcaption><span>CasWebAppConfiguration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasWebAppConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Controller <span class="title">rootController</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ParameterizableViewController() &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handleRequestInternal</span><span class="params">(<span class="keyword">final</span> HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"> val queryString = request.getQueryString();</span><br><span class="line"> val url = request.getContextPath() + <span class="string">"/login"</span></span><br><span class="line"> + Optional.ofNullable(queryString).map(string -&gt; <span class="string">'?'</span> + string).orElse(StringUtils.EMPTY);</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> RedirectView(response.encodeURL(url)));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="meta">@Lazy</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">handlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> val mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line"></span><br><span class="line"> val root = rootController();</span><br><span class="line"> mapping.setOrder(<span class="number">1</span>);</span><br><span class="line"> mapping.setAlwaysUseFullPath(<span class="keyword">true</span>);</span><br><span class="line"> mapping.setRootHandler(root);</span><br><span class="line"> val urls = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"> urls.put(<span class="string">"/"</span>, root);</span><br><span class="line"></span><br><span class="line"> mapping.setUrlMap(urls);</span><br><span class="line"> <span class="keyword">return</span> mapping;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BeanNameUrlHandlerMapping</li></ul><figure class="highlight java"><figcaption><span>BeanNameUrlHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDetectingUrlHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initApplicationContext</span><span class="params">()</span> <span class="keyword">throws</span> ApplicationContextException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.initApplicationContext();</span><br><span class="line">detectHandlers();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlers</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="comment">//获取ioc容器中的bean</span></span><br><span class="line">ApplicationContext applicationContext = obtainApplicationContext();</span><br><span class="line">String[] beanNames = (<span class="keyword">this</span>.detectHandlersInAncestorContexts ?</span><br><span class="line">BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, Object.class) :</span><br><span class="line">applicationContext.getBeanNamesForType(Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Take any bean name that we can determine URLs for.</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">String[] urls = determineUrlsForHandler(beanName);</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(urls)) &#123;</span><br><span class="line"><span class="comment">// URL paths found: Let's consider it a handler.</span></span><br><span class="line">registerHandler(urls, beanName); <span class="comment">//注册</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((logger.isDebugEnabled() &amp;&amp; !getHandlerMap().isEmpty()) || logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Detected "</span> + getHandlerMap().size() + <span class="string">" mappings in "</span> + formatMappingName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanNameUrlHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractDetectingUrlHandlerMapping</span> </span>&#123;</span><br><span class="line"><span class="comment">//将以"/"开头的bean注册</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</span><br><span class="line">List&lt;String&gt; urls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (beanName.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">urls.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">String[] aliases = obtainApplicationContext().getAliases(beanName);</span><br><span class="line"><span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line"><span class="keyword">if</span> (alias.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">urls.add(alias);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> StringUtils.toStringArray(urls);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3-AbstractHandlerMethodMapping"><a class="header-anchor" href="#1-3-AbstractHandlerMethodMapping">¶</a>1.3 AbstractHandlerMethodMapping</h5><p>该子类用于将Controller中的函数转换成HandlerMethod对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型T表示每一个方法的映射对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandlerMethodMapping</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractHandlerMapping</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="comment">//映射缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MappingRegistry mappingRegistry = <span class="keyword">new</span> MappingRegistry();</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">initHandlerMethods();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------initHandlerMethods--------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initHandlerMethods</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (String beanName : getCandidateBeanNames()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</span><br><span class="line">processCandidateBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数量</span></span><br><span class="line">handlerMethodsInitialized(getHandlerMethods());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------processCandidateBean------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processCandidateBean</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; beanType = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beanType = obtainApplicationContext().getType(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Could not resolve type for bean '"</span> + beanName + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanType != <span class="keyword">null</span> &amp;&amp; isHandler(beanType)) &#123; <span class="comment">//isHandler由子类实现,如RequestMappingHandlerMapping 要判断@Controller或者@RequestMapping注解</span></span><br><span class="line">detectHandlerMethods(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//----------------detectHandlerMethods---------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">detectHandlerMethods</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; handlerType = (handler <span class="keyword">instanceof</span> String ?</span><br><span class="line">obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handlerType != <span class="keyword">null</span>) &#123;</span><br><span class="line">Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class="line"></span><br><span class="line">Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class="line">(MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//该函数由子类实现,返回泛型T,即当前userType中每个符合要求的函数的映射对象</span></span><br><span class="line"><span class="keyword">return</span> getMappingForMethod(method, userType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid mapping on handler class ["</span> +</span><br><span class="line">userType.getName() + <span class="string">"]: "</span> + method, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(formatMappings(userType, methods));</span><br><span class="line">&#125;</span><br><span class="line">methods.forEach((method, mapping) -&gt; &#123;</span><br><span class="line">Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line"><span class="comment">//handler表示控制器对象</span></span><br><span class="line"><span class="comment">//invocableMethod表示对应函数</span></span><br><span class="line"><span class="comment">//mapping表示函数映射对象</span></span><br><span class="line">registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取handler</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">getHandlerInternal</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class="line">request.setAttribute(LOOKUP_PATH, lookupPath);</span><br><span class="line"><span class="keyword">this</span>.mappingRegistry.acquireReadLock(); <span class="comment">//读锁</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//返回handler</span></span><br><span class="line">HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class="line"><span class="keyword">return</span> (handlerMethod != <span class="keyword">null</span> ? handlerMethod.createWithResolvedBean() : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.mappingRegistry.releaseReadLock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取HandlerMethod</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HandlerMethod <span class="title">lookupHandlerMethod</span><span class="params">(String lookupPath, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//Match为保存单个T和HandlerMethod的内部节点对象</span></span><br><span class="line">List&lt;Match&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;T&gt; directPathMatches = <span class="keyword">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class="line"><span class="keyword">if</span> (directPathMatches != <span class="keyword">null</span>) &#123;</span><br><span class="line">addMatchingMappings(directPathMatches, matches, request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (matches.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// No choice but to go through all mappings...</span></span><br><span class="line">addMatchingMappings(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!matches.isEmpty()) &#123;</span><br><span class="line">Comparator&lt;Match&gt; comparator = <span class="keyword">new</span> MatchComparator(getMappingComparator(request));</span><br><span class="line">matches.sort(comparator);</span><br><span class="line">Match bestMatch = matches.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (matches.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(matches.size() + <span class="string">" matching mappings: "</span> + matches);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class="line"><span class="keyword">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class="line">&#125;</span><br><span class="line">Match secondBestMatch = matches.get(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class="number">0</span>) &#123;</span><br><span class="line">Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class="line">Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class="line">String uri = request.getRequestURI();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Ambiguous handler methods mapped for '"</span> + uri + <span class="string">"': &#123;"</span> + m1 + <span class="string">", "</span> + m2 + <span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(BEST_MATCHING_HANDLER_ATTRIBUTE, bestMatch.handlerMethod);</span><br><span class="line">handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class="line"><span class="keyword">return</span> bestMatch.handlerMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> handleNoMatch(<span class="keyword">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内部类MappingRegistry</li></ul> <figure class="highlight java"><figcaption><span>MappingRegistry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MappingRegistry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;T, MappingRegistration&lt;T&gt;&gt; registry = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   <span class="comment">//表示映射T和HanderMethod字典表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;T, HandlerMethod&gt; mappingLookup = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">   <span class="comment">//url和映射T</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MultiValueMap&lt;String, T&gt; urlLookup = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;HandlerMethod&gt;&gt; nameLookup = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;HandlerMethod, CorsConfiguration&gt; corsLookup = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册handler逻辑,该函数一般在子类初始化时调用</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> T 表示映射对象</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> handler 表示如<span class="doctag">@Controller</span> 类(即用户类,可能被代理)</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span> method 表示方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(T mapping, Object handler, Method method)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Assert that the handler method is not a suspending one.</span></span><br><span class="line"><span class="keyword">if</span> (KotlinDetector.isKotlinType(method.getDeclaringClass()) &amp;&amp; KotlinDelegate.isSuspend(method)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unsupported suspending handler method detected: "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.readWriteLock.writeLock().lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerMethod handlerMethod = createHandlerMethod(handler, method);</span><br><span class="line"><span class="comment">//若已经缓存则异常</span></span><br><span class="line">validateMethodMapping(handlerMethod, mapping);</span><br><span class="line">缓存T-&gt;hnadlerMethod</span><br><span class="line"><span class="keyword">this</span>.mappingLookup.put(mapping, handlerMethod);</span><br><span class="line"><span class="comment">//获取映射对象的url信息</span></span><br><span class="line">List&lt;String&gt; directUrls = getDirectUrls(mapping);</span><br><span class="line"><span class="comment">//缓存url-&gt;T信息</span></span><br><span class="line"><span class="keyword">for</span> (String url : directUrls) &#123;</span><br><span class="line"><span class="keyword">this</span>.urlLookup.add(url, mapping);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (getNamingStrategy() != <span class="keyword">null</span>) &#123;</span><br><span class="line">name = getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class="line">addMappingName(name, handlerMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);</span><br><span class="line"><span class="keyword">if</span> (corsConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.corsLookup.put(handlerMethod, corsConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.registry.put(mapping, <span class="keyword">new</span> MappingRegistration&lt;&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.readWriteLock.writeLock().unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RequestMappingInfoHandlerMapping</li></ul> <figure class="highlight java"><figcaption><span>RequestMappingInfoHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//这就是上述映射T的实现,用来表示一个MVC请求函数信息,每个含义 易于理解</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingInfo</span> <span class="keyword">implements</span> <span class="title">RequestCondition</span>&lt;<span class="title">RequestMappingInfo</span>&gt; </span>&#123;</span><br><span class="line"> <span class="meta">@Nullable</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//url路径 匹配条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> PatternsRequestCondition patternsCondition;</span><br><span class="line">  <span class="comment">// http请求方法匹配条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> RequestMethodsRequestCondition methodsCondition;</span><br><span class="line">  <span class="comment">//请求参数条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ParamsRequestCondition paramsCondition;</span><br><span class="line">  <span class="comment">//请求头条件</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> HeadersRequestCondition headersCondition;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ConsumesRequestCondition consumesCondition;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> ProducesRequestCondition producesCondition;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> RequestConditionHolder customConditionHolder;</span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingInfoHandlerMapping</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodMapping</span>&lt;<span class="title">RequestMappingInfo</span>&gt; </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>RequestMappingHandlerMapping<br>MVC中关于HandlerMethod的标准实现</li></ul> <figure class="highlight java"><figcaption><span>RequestMappingHandlerMapping</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerMapping</span> <span class="keyword">extends</span> <span class="title">RequestMappingInfoHandlerMapping</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">MatchableHandlerMapping</span>, <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.config = <span class="keyword">new</span> RequestMappingInfo.BuilderConfiguration();</span><br><span class="line"><span class="keyword">this</span>.config.setUrlPathHelper(getUrlPathHelper());</span><br><span class="line"><span class="keyword">this</span>.config.setPathMatcher(getPathMatcher());</span><br><span class="line"><span class="keyword">this</span>.config.setSuffixPatternMatch(<span class="keyword">this</span>.useSuffixPatternMatch);</span><br><span class="line"><span class="keyword">this</span>.config.setTrailingSlashMatch(<span class="keyword">this</span>.useTrailingSlashMatch);</span><br><span class="line"><span class="keyword">this</span>.config.setRegisteredSuffixPatternMatch(<span class="keyword">this</span>.useRegisteredSuffixPatternMatch);</span><br><span class="line"><span class="keyword">this</span>.config.setContentNegotiationManager(getContentNegotiationManager());</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 此函数在父类初始化时使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHandler</span><span class="params">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller<span class="class">.<span class="keyword">class</span>) ||</span></span><br><span class="line"><span class="class"><span class="title">AnnotatedElementUtils</span>.<span class="title">hasAnnotation</span>(<span class="title">beanType</span>, <span class="title">RequestMapping</span>.<span class="title">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  父类初始化时调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RequestMappingInfo <span class="title">getMappingForMethod</span><span class="params">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class="line">RequestMappingInfo info = createRequestMappingInfo(method);</span><br><span class="line"><span class="keyword">if</span> (info != <span class="keyword">null</span>) &#123;</span><br><span class="line">RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);</span><br><span class="line"><span class="keyword">if</span> (typeInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">info = typeInfo.combine(info);</span><br><span class="line">&#125;</span><br><span class="line">String prefix = getPathPrefix(handlerType);</span><br><span class="line"><span class="keyword">if</span> (prefix != <span class="keyword">null</span>) &#123;</span><br><span class="line">info = RequestMappingInfo.paths(prefix).options(<span class="keyword">this</span>.config).build().combine(info);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、HandlerAdapter-Handler适配器"><a class="header-anchor" href="#二、HandlerAdapter-Handler适配器">¶</a>二、HandlerAdapter:Handler适配器</h4><h5 id="2-1-概念"><a class="header-anchor" href="#2-1-概念">¶</a>2.1 概念</h5><p>设配器模式调用内部handler</p><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/HandlerAdapter.png" class="" title="HandlerAdapter"><ul><li>HandlerAdapter:典型的适配器模式</li></ul><figure class="highlight java"><figcaption><span>HandlerAdapter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>; <span class="comment">//是否支持内部的handler</span></span><br><span class="line"><span class="function">ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception</span>; <span class="comment">//执行真正的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>handle类型<ul><li>Controller:spring提供的接口,返回MVC视图</li><li>HttpRequestHandler:不能返回视图</li><li>Servlet:不能返回视图</li><li>HandlerMethod:用户常见的控制器实际就是该类型<ul><li>ResourceHttpRequestHandler:用来将请求转发给<code>DefaultServlet</code>处理静态资源</li></ul></li></ul></li></ul><h5 id="2-2-不常用情况"><a class="header-anchor" href="#2-2-不常用情况">¶</a>2.2 不常用情况</h5><ul><li>SimpleServletHandlerAdapter<br>用来处理Servlet类型,即<code>mapping</code>中handler 是Servlet</li></ul><figure class="highlight java"><figcaption><span>SimpleServletHandlerAdapter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleServletHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Servlet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">((Servlet) handler).service(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SimpleControllerHandlerAdapter<br>用以处理<code>Controller</code>类型,spring提供的web接口</li></ul><figure class="highlight java"><figcaption><span>SimpleControllerHandlerAdapter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleControllerHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ((Controller) handler).handleRequest(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> LastModified) &#123;</span><br><span class="line"><span class="keyword">return</span> ((LastModified) handler).getLastModified(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>HttpRequestHandlerAdapter<br>支持<code>HttpRequestHandler</code></li></ul><figure class="highlight java"><figcaption><span>HttpRequestHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (handler <span class="keyword">instanceof</span> HttpRequestHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">((HttpRequestHandler) handler).handleRequest(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest request, Object handler)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (handler <span class="keyword">instanceof</span> LastModified) &#123;</span><br><span class="line"><span class="keyword">return</span> ((LastModified) handler).getLastModified(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总结<br>以上三种类型使用起来不太常见,<code>HttpRequestHandler</code>以及<code>Controller</code>类型spring由几个默认实现,如果spring没有提供特别的标签如<br><code>&lt;mvc:resource&gt;</code>,用户使用一般就得创建特定的mapping,参考本文<a href="#abstracturlhandlermapping%E7%B1%BB%E5%9E%8B">SimpleUrlHandlerMapping</a>cas的例子</li></ul><h4 id="三、-RequestMappingHandlerAdapter"><a class="header-anchor" href="#三、-RequestMappingHandlerAdapter">¶</a>三、 RequestMappingHandlerAdapter</h4><p>该适配器是最为常见的,也是大部分是时候都要使用的</p><ul><li>调用模型</li></ul><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/mvc%E8%B0%83%E7%94%A8%E6%A8%A1%E5%9E%8B.png" class=""><ul><li>图中XXMethod,实际都是<code>HandlerMethod</code>封装代表了函数调用<ul><li><code>ModelMethod</code>:是对<code>@ModelAttribute</code>标记的函数的封装,其类型为<code>InvokeHandlerMethod</code></li><li><code>InitMethod</code>:是对<code>@InitBinder</code>标记函数的封装,其类型是<code>InvokeHandlerMethod</code></li><li><code>ControllerMethod</code>:是对此次请求匹配到的函数的封装,其类型是<code>ServletInvocableHandlerMethod</code></li></ul></li></ul><h5 id="3-1-属性"><a class="header-anchor" href="#3-1-属性">¶</a>3.1 属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; customArgumentResolvers;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入参解析器Composite</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolverComposite argumentResolvers;</span><br><span class="line">  <span class="comment">//用来创建DataBinder时,给其初始化的解析器组件</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolverComposite initBinderArgumentResolvers;</span><br><span class="line"><span class="comment">//自定义返回值处理器</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMethodReturnValueHandler&gt; customReturnValueHandlers;</span><br><span class="line">  <span class="comment">//返回值处理器Composite</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodReturnValueHandlerComposite returnValueHandlers;</span><br><span class="line">  <span class="comment">//视图处理器</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ModelAndViewResolver&gt; modelAndViewResolvers;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span> ContentNegotiationManager contentNegotiationManager = <span class="keyword">new</span> ContentNegotiationManager();</span><br><span class="line">  <span class="comment">//消息转换器</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; requestResponseBodyAdvice = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="comment">//WebDataBinder初始化</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> WebBindingInitializer webBindingInitializer;</span><br><span class="line">  <span class="comment">//异步线程执行器</span></span><br><span class="line"><span class="keyword">private</span> AsyncTaskExecutor taskExecutor = <span class="keyword">new</span> SimpleAsyncTaskExecutor(<span class="string">"MvcAsync"</span>);</span><br><span class="line">  <span class="comment">//异常超时时间</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Long asyncRequestTimeout;</span><br><span class="line">  <span class="comment">//异步Callable拦击器</span></span><br><span class="line"><span class="keyword">private</span> CallableProcessingInterceptor[] callableInterceptors = <span class="keyword">new</span> CallableProcessingInterceptor[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//异步DeferredResult拦击器</span></span><br><span class="line"><span class="keyword">private</span> DeferredResultProcessingInterceptor[] deferredResultInterceptors = <span class="keyword">new</span> DeferredResultProcessingInterceptor[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line"><span class="keyword">private</span> ReactiveAdapterRegistry reactiveAdapterRegistry = ReactiveAdapterRegistry.getSharedInstance();</span><br><span class="line">  <span class="comment">//....  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> ignoreDefaultModelOnRedirect = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> cacheSecondsForSessionAttributeHandlers = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> synchronizeOnSession = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SessionAttributeStore sessionAttributeStore = <span class="keyword">new</span> DefaultSessionAttributeStore();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ParameterNameDiscoverer parameterNameDiscoverer = <span class="keyword">new</span> DefaultParameterNameDiscoverer();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ConfigurableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//key值表示一个@Controller类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//value表示其sesstionAttributesHandler</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, SessionAttributesHandler&gt; sessionAttributesHandlerCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line">  <span class="comment">//value表示@InitBinder在该类中的函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; initBinderCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line">  <span class="comment">// @ModelAttribute在该类中函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; modelAttributeCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//key表示一个@ControllerAdvice修饰的类</span></span><br><span class="line">  <span class="comment">// @ModelAttribute在该类中函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ControllerAdviceBean, Set&lt;Method&gt;&gt; modelAttributeAdviceCache = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">//value表示@InitBinder在该类中的函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;ControllerAdviceBean, Set&lt;Method&gt;&gt; initBinderAdviceCache = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><h5 id="3-2-内部组件"><a class="header-anchor" href="#3-2-内部组件">¶</a>3.2 内部组件</h5><h6 id="3-2-1-WebDataBinder"><a class="header-anchor" href="#3-2-1-WebDataBinder">¶</a>3.2.1 WebDataBinder</h6><p>该组件用来bind,valid,converte,属于DataBinder体系,特别功能可以从Request中获取参数进行bind操作</p><figure class="highlight java"><figcaption><span>WebDataBinder</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDataBinder</span> <span class="keyword">extends</span> <span class="title">DataBinder</span> </span>&#123;</span><br><span class="line">  <span class="comment">//这两个数据都会在处理@ModelAttribute入参调用</span></span><br><span class="line">  <span class="comment">//表示前端传送的数据前缀</span></span><br><span class="line"><span class="keyword">private</span> String fieldMarkerPrefix = DEFAULT_FIELD_MARKER_PREFIX;</span><br><span class="line"><span class="comment">//表示前端传送数据的mark</span></span><br><span class="line"><span class="keyword">private</span> String fieldDefaultPrefix = DEFAULT_FIELD_DEFAULT_PREFIX;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>preix作用<br><figure class="highlight java"><figcaption><span>例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"prefix"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinderTest</span><span class="params">(WebDataBinder dataBinder)</span></span>&#123;</span><br><span class="line">   <span class="comment">//该前缀说明,当按照入参的key找不到则按照prefix+para找</span></span><br><span class="line"> dataBinder.setFieldDefaultPrefix(<span class="string">"u."</span>);</span><br><span class="line"> <span class="comment">///该前缀说明,当按照入参的key找不到则按照prefix+para找,若找到,该属性置为空</span></span><br><span class="line"> dataBinder.setFieldMarkerPrefix(<span class="string">"x."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//请求参数为 ?u.name=123&amp;x.password=xx</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"用来说明dataBinder的prefix属性作用"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/prefixTest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinderMethodTest</span><span class="params">(@ModelAttribute(<span class="string">"prefix"</span>)</span> User user)</span>&#123;</span><br><span class="line"> System.out.println(user);</span><br><span class="line"> <span class="comment">//User&#123;name='123', password='null'&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h6 id="3-2-2-SessionAttributesHandler"><a class="header-anchor" href="#3-2-2-SessionAttributesHandler">¶</a>3.2.2 SessionAttributesHandler</h6><p>用来处理@SessionAttributes</p><figure class="highlight java"><figcaption><span>SessionAttributesHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@SessionAttributes中的key</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; attributeNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"> <span class="comment">//同上type</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; attributeTypes = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; knownAttributeNames = Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">4</span>));</span><br><span class="line"> <span class="comment">//用来向request获取|储存sesssion#attr的</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SessionAttributeStore sessionAttributeStore;</span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SessionAttributesHandler</span><span class="params">(Class&lt;?&gt; handlerType, SessionAttributeStore sessionAttributeStore)</span> </span>&#123;</span><br><span class="line">Assert.notNull(sessionAttributeStore, <span class="string">"SessionAttributeStore may not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.sessionAttributeStore = sessionAttributeStore;</span><br><span class="line">   <span class="comment">//获取handlerType中的@SessionAttributes,并且缓存name type</span></span><br><span class="line">SessionAttributes ann = AnnotatedElementUtils.findMergedAnnotation(handlerType, SessionAttributes<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (ann != <span class="keyword">null</span>) &#123;</span><br><span class="line">Collections.addAll(<span class="keyword">this</span>.attributeNames, ann.names());</span><br><span class="line">Collections.addAll(<span class="keyword">this</span>.attributeTypes, ann.types());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.knownAttributeNames.addAll(<span class="keyword">this</span>.attributeNames);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>######3.2.3 InitBinderFactory<br>用来创造WebDataBinder</p><ul><li>关系</li></ul><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/DataBinderFactory.png" class="" title="uml类图"><ul><li>逻辑</li></ul><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/DataBinderFactroy%E9%80%BB%E8%BE%91.png" class="" title="工厂逻辑"><ul><li>代码逻辑</li></ul><figure class="highlight java"><figcaption><span>DataBinderFactroy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-------------------------DefaultDataBinderFactory------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> WebDataBinder <span class="title">createBinder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">NativeWebRequest webRequest, @Nullable Object target, String objectName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">WebDataBinder dataBinder = createBinderInstance(target, objectName, webRequest);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.initializer != <span class="keyword">null</span>) &#123; <span class="comment">//这个initializer也属于mvc配置模块的组件</span></span><br><span class="line"><span class="keyword">this</span>.initializer.initBinder(dataBinder, webRequest);</span><br><span class="line">&#125;</span><br><span class="line">initBinder(dataBinder, webRequest);<span class="comment">//子类实现</span></span><br><span class="line"><span class="keyword">return</span> dataBinder;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------InitBinderDataBinderFactory-------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder dataBinder, NativeWebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (InvocableHandlerMethod binderMethod : <span class="keyword">this</span>.binderMethods) &#123; <span class="comment">//遍历InvocableHandlerMethod</span></span><br><span class="line"><span class="keyword">if</span> (isBinderMethodApplicable(binderMethod, dataBinder)) &#123;<span class="comment">//@InitBinder#name能够和DataBinder内部要处理的对象配置 || @InitBinder#name为空</span></span><br><span class="line"><span class="comment">//注意此处第三个参数,也就是说InitMethod,用户使用时形参中的WebDataBinder不是入参处理器提供的,而是这里提供的</span></span><br><span class="line">Object returnValue = binderMethod.invokeForRequest(request, <span class="keyword">null</span>, dataBinder);</span><br><span class="line"><span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"@InitBinder methods must not return a value (should be void): "</span> + binderMethod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isBinderMethodApplicable</span><span class="params">(HandlerMethod initBinderMethod, WebDataBinder dataBinder)</span> </span>&#123;</span><br><span class="line">InitBinder ann = initBinderMethod.getMethodAnnotation(InitBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Assert.state(ann != <span class="keyword">null</span>, <span class="string">"No InitBinder annotation"</span>);</span><br><span class="line">String[] names = ann.value();</span><br><span class="line"><span class="keyword">return</span> (ObjectUtils.isEmpty(names) || ObjectUtils.containsElement(names, dataBinder.getObjectName()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-4-ModelFactory"><a class="header-anchor" href="#3-2-4-ModelFactory">¶</a>3.2.4 ModelFactory</h6><p>处理@ModelAttribute(用于函数中),表示对此次mvc流程进行模型构造过程</p><ul><li>属性</li></ul><figure class="highlight java"><figcaption><span>ModelFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelFactory</span> </span>&#123;</span><br><span class="line"><span class="comment">//封装了InvocableHandlerMethod</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ModelMethod&gt; modelMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//更新model时使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebDataBinderFactory dataBinderFactory;</span><br><span class="line"><span class="comment">//处理@SessionAttributes注解</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SessionAttributesHandler sessionAttributesHandler;</span><br></pre></td></tr></table></figure><ul><li>逻辑</li></ul><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/ModealFactory.png" class=""><ul><li>代码逻辑</li></ul><figure class="highlight java"><figcaption><span>ModealFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HandlerMethod就是Controller的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initModel</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container, HandlerMethod handlerMethod)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//从request中获取@SessionAttributes标识的session#attr</span></span><br><span class="line">Map&lt;String, ?&gt; sessionAttributes = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttributes(request);</span><br><span class="line"><span class="comment">//mvc缓存</span></span><br><span class="line">container.mergeAttributes(sessionAttributes);</span><br><span class="line"><span class="comment">//调用ModelMethod</span></span><br><span class="line">invokeModelAttributeMethods(request, container);</span><br><span class="line">    <span class="comment">//如果此次用调用的ControllerMethod中存在@ModelAttribute参数并且和@SessionAttributes匹配,</span></span><br><span class="line"><span class="comment">//mvc容器在所有ModelMethod调用之后还是没有缓存</span></span><br><span class="line"><span class="keyword">for</span> (String name : findSessionAttributeArguments(handlerMethod)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!container.containsAttribute(name)) &#123;</span><br><span class="line">Object value = <span class="keyword">this</span>.sessionAttributesHandler.retrieveAttribute(request, name);</span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> HttpSessionRequiredException(<span class="string">"Expected session attribute '"</span> + name + <span class="string">"'"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line">container.addAttribute(name, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设法调用符合条件的ModelMethod</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeModelAttributeMethods</span><span class="params">(NativeWebRequest request, ModelAndViewContainer container)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="keyword">this</span>.modelMethods.isEmpty()) &#123;</span><br><span class="line">InvocableHandlerMethod modelMethod = getNextModelMethod(container).getHandlerMethod();</span><br><span class="line">ModelAttribute ann = modelMethod.getMethodAnnotation(ModelAttribute<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Assert.state(ann != <span class="keyword">null</span>, <span class="string">"No ModelAttribute annotation"</span>);</span><br><span class="line"><span class="comment">//这里说明若mvc已经存在对应模型,但是又遭遇到了modelMethod,</span></span><br><span class="line"><span class="comment">//若modelMethod表示该属性!binding,mvc则改变对应属性binging,并跳过此次modelMethod函数</span></span><br><span class="line"><span class="keyword">if</span> (container.containsAttribute(ann.name())) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ann.binding()) &#123;</span><br><span class="line">container.setBindingDisabled(ann.name());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//modelMethod调用</span></span><br><span class="line">Object returnValue = modelMethod.invokeForRequest(request, container);</span><br><span class="line"><span class="keyword">if</span> (!modelMethod.isVoid())&#123;</span><br><span class="line">String returnValueName = getNameForReturnValue(returnValue, modelMethod.getReturnType());</span><br><span class="line"><span class="keyword">if</span> (!ann.binding()) &#123;</span><br><span class="line">container.setBindingDisabled(returnValueName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!container.containsAttribute(returnValueName)) &#123;</span><br><span class="line">container.addAttribute(returnValueName, returnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匹配条件</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelMethod <span class="title">getNextModelMethod</span><span class="params">(ModelAndViewContainer container)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ModelMethod modelMethod : <span class="keyword">this</span>.modelMethods) &#123;<span class="comment">//若mvc并没有缓存请求的model则跳过</span></span><br><span class="line"><span class="keyword">if</span> (modelMethod.checkDependencies(container)) &#123;</span><br><span class="line"><span class="keyword">this</span>.modelMethods.remove(modelMethod);</span><br><span class="line"><span class="keyword">return</span> modelMethod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这说明该modelMethod没有请求模型的必要,或者mvc就是没有缓存,那么就只能在入参处理时进行创造了</span></span><br><span class="line">ModelMethod modelMethod = <span class="keyword">this</span>.modelMethods.get(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">this</span>.modelMethods.remove(modelMethod);</span><br><span class="line"><span class="keyword">return</span> modelMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------内部类-------------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InvocableHandlerMethod handlerMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; dependencies = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ModelMethod</span><span class="params">(InvocableHandlerMethod handlerMethod)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMethod = handlerMethod;</span><br><span class="line"><span class="comment">//若该ModelMethod形参函数@ModelAttrubite说明其请求模型,则加入依赖</span></span><br><span class="line"><span class="keyword">for</span> (MethodParameter parameter : handlerMethod.getMethodParameters()) &#123;</span><br><span class="line"><span class="keyword">if</span> (parameter.hasParameterAnnotation(ModelAttribute<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dependencies.add(getNameForParameter(parameter));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InvocableHandlerMethod <span class="title">getHandlerMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.handlerMethod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkDependencies</span><span class="params">(ModelAndViewContainer mavContainer)</span> </span>&#123;</span><br><span class="line"><span class="comment">//简单来说就是看该ModelMethod形参中请求模型在mvc中是否缓存</span></span><br><span class="line"><span class="keyword">for</span> (String name : <span class="keyword">this</span>.dependencies) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mavContainer.containsAttribute(name)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.handlerMethod.getMethod().toGenericString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-5-HandlerMethod"><a class="header-anchor" href="#3-2-5-HandlerMethod">¶</a>3.2.5 HandlerMethod</h6><p>封装调用函数</p><img src="/2019/12/26/springMVC%E6%A0%B8%E5%BF%83/HandlerMethod.png" class=""><ul><li>HandlerMethod</li><li>InvokeHandlerMethod</li></ul><figure class="highlight java"><figcaption><span>InvocableHandlerMethod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//提供给入参处理器使用来创建databinder</span></span><br><span class="line"><span class="keyword">private</span> WebDataBinderFactory dataBinderFactory;</span><br><span class="line"><span class="comment">//入参处理器</span></span><br><span class="line"><span class="keyword">private</span> HandlerMethodArgumentResolverComposite resolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite();</span><br><span class="line"><span class="comment">//参数名处理</span></span><br><span class="line"><span class="keyword">private</span> ParameterNameDiscoverer parameterNameDiscoverer = <span class="keyword">new</span> DefaultParameterNameDiscoverer();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... providedArgs)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//入参处理调用</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Arguments: "</span> + Arrays.toString(args));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反射调用真正的函数</span></span><br><span class="line"><span class="keyword">return</span> doInvoke(args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入参处理</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="meta">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class="line">Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//形参封装</span></span><br><span class="line">MethodParameter[] parameters = getMethodParameters();</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;</span><br><span class="line"><span class="keyword">return</span> EMPTY_ARGS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object[] args = <span class="keyword">new</span> Object[parameters.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">MethodParameter parameter = parameters[i];</span><br><span class="line">parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"><span class="comment">//获取默认提供的形参</span></span><br><span class="line">args[i] = findProvidedArgument(parameter, providedArgs);</span><br><span class="line"><span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用对应的入参 处理器</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.resolvers.supportsParameter(parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(formatArgumentError(parameter, <span class="string">"No suitable resolver"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">args[i] = <span class="keyword">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="comment">// Leave stack trace for later, exception may actually be resolved and handled...</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">String exMsg = ex.getMessage();</span><br><span class="line"><span class="keyword">if</span> (exMsg != <span class="keyword">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;</span><br><span class="line">logger.debug(formatArgumentError(parameter, exMsg));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ServletInvocableHandlerMethod</li></ul><h6 id="3-2-5-ModelAndViewContainer"><a class="header-anchor" href="#3-2-5-ModelAndViewContainer">¶</a>3.2.5 ModelAndViewContainer</h6><p>这就是mvc请求处理过程中一直传递的mvc容器</p><h5 id="3-3-适配器初始化"><a class="header-anchor" href="#3-3-适配器初始化">¶</a>3.3 适配器初始化</h5><figure class="highlight java"><figcaption><span>初始化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Do this first, it may add ResponseBody advice beans</span></span><br><span class="line"><span class="comment">//处理全局缓存</span></span><br><span class="line">initControllerAdviceCache();</span><br><span class="line"><span class="comment">//入参处理器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultArgumentResolvers();</span><br><span class="line"><span class="keyword">this</span>.argumentResolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//InitBinder中的</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.initBinderArgumentResolvers == <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;HandlerMethodArgumentResolver&gt; resolvers = getDefaultInitBinderArgumentResolvers();</span><br><span class="line"><span class="keyword">this</span>.initBinderArgumentResolvers = <span class="keyword">new</span> HandlerMethodArgumentResolverComposite().addResolvers(resolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers == <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;HandlerMethodReturnValueHandler&gt; handlers = getDefaultReturnValueHandlers();</span><br><span class="line"><span class="keyword">this</span>.returnValueHandlers = <span class="keyword">new</span> HandlerMethodReturnValueHandlerComposite().addHandlers(handlers);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取context中@ControllerAdvice类,将其中@ModelAttribute,@InitBinder,以及RequestBodyAdvice放置到对应缓存中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initControllerAdviceCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (getApplicationContext() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;ControllerAdviceBean&gt; adviceBeans = ControllerAdviceBean.findAnnotatedBeans(getApplicationContext());</span><br><span class="line"></span><br><span class="line">List&lt;Object&gt; requestResponseBodyAdviceBeans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (ControllerAdviceBean adviceBean : adviceBeans) &#123;</span><br><span class="line">Class&lt;?&gt; beanType = adviceBean.getBeanType();</span><br><span class="line"><span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unresolvable type for ControllerAdviceBean: "</span> + adviceBean);</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;Method&gt; attrMethods = MethodIntrospector.selectMethods(beanType, MODEL_ATTRIBUTE_METHODS);</span><br><span class="line"><span class="keyword">if</span> (!attrMethods.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.modelAttributeAdviceCache.put(adviceBean, attrMethods);</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;Method&gt; binderMethods = MethodIntrospector.selectMethods(beanType, INIT_BINDER_METHODS);</span><br><span class="line"><span class="keyword">if</span> (!binderMethods.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.initBinderAdviceCache.put(adviceBean, binderMethods);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (RequestBodyAdvice<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanType</span>) || <span class="title">ResponseBodyAdvice</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">beanType</span>)) </span>&#123;</span><br><span class="line">requestResponseBodyAdviceBeans.add(adviceBean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!requestResponseBodyAdviceBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.requestResponseBodyAdvice.addAll(<span class="number">0</span>, requestResponseBodyAdviceBeans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="keyword">int</span> modelSize = <span class="keyword">this</span>.modelAttributeAdviceCache.size();</span><br><span class="line"><span class="keyword">int</span> binderSize = <span class="keyword">this</span>.initBinderAdviceCache.size();</span><br><span class="line"><span class="keyword">int</span> reqCount = getBodyAdviceCount(RequestBodyAdvice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">int</span> resCount = getBodyAdviceCount(ResponseBodyAdvice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (modelSize == <span class="number">0</span> &amp;&amp; binderSize == <span class="number">0</span> &amp;&amp; reqCount == <span class="number">0</span> &amp;&amp; resCount == <span class="number">0</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"ControllerAdvice beans: none"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"ControllerAdvice beans: "</span> + modelSize + <span class="string">" @ModelAttribute, "</span> + binderSize +</span><br><span class="line"><span class="string">" @InitBinder, "</span> + reqCount + <span class="string">" RequestBodyAdvice, "</span> + resCount + <span class="string">" ResponseBodyAdvice"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-4-代码调用逻辑"><a class="header-anchor" href="#3-4-代码调用逻辑">¶</a>3.4 代码调用逻辑</h5><figure class="highlight java"><figcaption><span>RequestMappingHandlerAdapter</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">rotected ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//两个工厂创建</span></span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line">      <span class="comment">//将当前HandlerMethod转换为...</span></span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.returnValueHandlers != <span class="keyword">null</span>) &#123;</span><br><span class="line">invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">&#125;</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line"><span class="comment">//建立model,依次处理ModelMethod</span></span><br><span class="line">modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line">     <span class="comment">//异步框架</span></span><br><span class="line">AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">Object result = asyncManager.getConcurrentResult();</span><br><span class="line">mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">asyncManager.clearConcurrentResult();</span><br><span class="line">LogFormatUtils.traceDebug(logger, traceOn -&gt; &#123;</span><br><span class="line">String formatted = LogFormatUtils.formatValue(result, !traceOn);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Resume with async result ["</span> + formatted + <span class="string">"]"</span>;</span><br><span class="line">&#125;);</span><br><span class="line">invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//ControllerMethod调用</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//视图获取</span></span><br><span class="line"><span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">webRequest.requestCompleted();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------WebDataBinderFactory创建--------------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> WebDataBinderFactory <span class="title">getDataBinderFactory</span><span class="params">(HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; handlerType = handlerMethod.getBeanType();</span><br><span class="line"><span class="comment">//[1]尝试缓存</span></span><br><span class="line">Set&lt;Method&gt; methods = <span class="keyword">this</span>.initBinderCache.get(handlerType);</span><br><span class="line"><span class="comment">//[!1]</span></span><br><span class="line"><span class="comment">//[2]当前ControllerMethod中获取标记了@InitBinder的函数</span></span><br><span class="line"><span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">methods = MethodIntrospector.selectMethods(handlerType, INIT_BINDER_METHODS);</span><br><span class="line"><span class="keyword">this</span>.initBinderCache.put(handlerType, methods);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[!2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[3] 首先将增强类中的@InitBinder标记函数转换为InitMethod,再转换对应Controller中的</span></span><br><span class="line">List&lt;InvocableHandlerMethod&gt; initBinderMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Global methods first</span></span><br><span class="line"><span class="keyword">this</span>.initBinderAdviceCache.forEach((controllerAdviceBean, methodSet) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (controllerAdviceBean.isApplicableToBeanType(handlerType)) &#123;</span><br><span class="line">Object bean = controllerAdviceBean.resolveBean();</span><br><span class="line"><span class="keyword">for</span> (Method method : methodSet) &#123;</span><br><span class="line">initBinderMethods.add(createInitBinderMethod(bean, method));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">Object bean = handlerMethod.getBean();</span><br><span class="line">initBinderMethods.add(createInitBinderMethod(bean, method));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[!3]</span></span><br><span class="line"><span class="comment">//创建工厂</span></span><br><span class="line"><span class="keyword">return</span> createDataBinderFactory(initBinderMethods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> InvocableHandlerMethod <span class="title">createInitBinderMethod</span><span class="params">(Object bean, Method method)</span> </span>&#123;</span><br><span class="line">InvocableHandlerMethod binderMethod = <span class="keyword">new</span> InvocableHandlerMethod(bean, method);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.initBinderArgumentResolvers != <span class="keyword">null</span>) &#123;<span class="comment">//若这个为空,InitMethod就无法处理了处理DataBinder之外的形参?</span></span><br><span class="line">binderMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.initBinderArgumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line">binderMethod.setDataBinderFactory(<span class="keyword">new</span> DefaultDataBinderFactory(<span class="keyword">this</span>.webBindingInitializer));</span><br><span class="line">binderMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"><span class="keyword">return</span> binderMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------ModelFactory创建--------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ModelFactory <span class="title">getModelFactory</span><span class="params">(HandlerMethod handlerMethod, WebDataBinderFactory binderFactory)</span> </span>&#123;</span><br><span class="line"><span class="comment">//逻辑和上边一样,缓存-&gt;处理advice--&gt;处理Controller中</span></span><br><span class="line">SessionAttributesHandler sessionAttrHandler = getSessionAttributesHandler(handlerMethod);</span><br><span class="line">Class&lt;?&gt; handlerType = handlerMethod.getBeanType();</span><br><span class="line">Set&lt;Method&gt; methods = <span class="keyword">this</span>.modelAttributeCache.get(handlerType);</span><br><span class="line"><span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">methods = MethodIntrospector.selectMethods(handlerType, MODEL_ATTRIBUTE_METHODS);</span><br><span class="line"><span class="keyword">this</span>.modelAttributeCache.put(handlerType, methods);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;InvocableHandlerMethod&gt; attrMethods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// Global methods first</span></span><br><span class="line"><span class="keyword">this</span>.modelAttributeAdviceCache.forEach((controllerAdviceBean, methodSet) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (controllerAdviceBean.isApplicableToBeanType(handlerType)) &#123;</span><br><span class="line">Object bean = controllerAdviceBean.resolveBean();</span><br><span class="line"><span class="keyword">for</span> (Method method : methodSet) &#123;</span><br><span class="line">attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">Object bean = handlerMethod.getBean();</span><br><span class="line">attrMethods.add(createModelAttributeMethod(binderFactory, bean, method));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelFactory(attrMethods, binderFactory, sessionAttrHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> InvocableHandlerMethod <span class="title">createModelAttributeMethod</span><span class="params">(WebDataBinderFactory factory, Object bean, Method method)</span> </span>&#123;</span><br><span class="line">InvocableHandlerMethod attrMethod = <span class="keyword">new</span> InvocableHandlerMethod(bean, method);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers != <span class="keyword">null</span>) &#123;<span class="comment">//ModelFactory拥有完整的入参处理器</span></span><br><span class="line">attrMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">&#125;</span><br><span class="line">attrMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line">attrMethod.setDataBinderFactory(factory);</span><br><span class="line"><span class="keyword">return</span> attrMethod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------视图获取--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> springMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2019/09/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/09/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>本片博客的目的是为了深入掌握代码设计,相关的内容有uml类图,面向对象原则,设计模式等.<br>进一步了解这些原则和思想是为了能够在书写代码以及阅读源码时更加有效率.</p><h4 id="uml类图"><a class="header-anchor" href="#uml类图">¶</a>uml类图</h4><p>UML类图包含了6种关系</p><img src="/2019/09/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E7%B1%BB%E5%9B%BE%E5%85%B3%E7%B3%BB.png" class=""><p>关系强弱: 泛化=实现&gt;组合&gt;聚合&gt;关联&gt;依赖</p><ul><li>其中组合,聚合,关联只能通过语义区分,在代码中体现都是成员属性(has a)</li><li>方法返回值也是依赖关系,idea中依赖create表示在函数中使用new</li></ul><img src="/2019/09/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E4%BE%8B%E5%AD%90.png" class=""><ul><li>1对多使用集合和数组就能实现</li><li>create表示依赖关系,并创建对象</li></ul><figure class="highlight java"><figcaption><span>TestC</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> TestA testA;</span><br><span class="line">    <span class="keyword">private</span> List&lt;TestB&gt; testBList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestA <span class="title">test</span><span class="params">(TestA testA)</span> </span>&#123;</span><br><span class="line">        TestA.test();</span><br><span class="line">        <span class="keyword">new</span> TestA();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="面向对象原则"><a class="header-anchor" href="#面向对象原则">¶</a>面向对象原则</h4><img src="/2019/09/27/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/spring%E4%BE%8B%E5%AD%90.png" class="" title="DefaultListBeanFactory.java"><p>以此图为起点,看看何时能够完全说明spring的设计<br>ps:此张图并不能说明图中所有接口的相关所有情况,仅仅只能说明和<code>DefaultListBeanFactory</code>的关系<br><a href="https://blog.csdn.net/qq_34760445/article/details/82931002#_154" target="_blank" rel="noopener">参考</a></p><h5 id="单一职责原则和接口隔离原则"><a class="header-anchor" href="#单一职责原则和接口隔离原则">¶</a>单一职责原则和接口隔离原则</h5><ul><li>前者简要来说就是分离一个类|接口的功能,使得单一业务影响该类.</li><li>后者指将接口分离成数个小接口<br>问题和理解:</li></ul><ol><li>接口并不能直接实现函数,那么出现一个接口至少要提供一个抽象类或者default函数,以便让子<br>类选择较为契合的功能,如<code>ListableBeanFactory</code>拥有多个子抽象类(图中未显示),说明spring设计<br>符合<tt>接口隔离原则</tt></li><li>接口实现可以将子接口视为统一大接口,在该过程中如何保持接口继承树的单一职责原则</li></ol><h5 id="开闭原则和里氏替换原则"><a class="header-anchor" href="#开闭原则和里氏替换原则">¶</a>开闭原则和里氏替换原则</h5><ul><li>开闭原则:对象设计过程中,应保持对拓展开发,对修改关闭.<ul><li>拓展性和修改关闭通过继承实现,实际上就是面向接口编程</li></ul></li><li>里氏替换原则:出现父类调用的函数,可以完全替换成子类,并不影响其功能.<ul><li>重载和重写<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">重载(overload):条件是是函数名相同,形参不同(顺序,类型,数量)</span><br><span class="line">重写(override):条件是参数相同,返回值可以缩小,修饰符大于等于父类,抛出异常小于等于父类.</span><br></pre></td></tr></table></figure></li><li>子类只能重新父类抽象方法(此时父类就是抽象类).</li><li>子类可以新增方法.</li><li>子类<strong>重载overload</strong>父类函数时,入参应该扩大.</li><li>子类实现父类方法(重载/重写或者实现抽象方法)返回值要缩小.</li></ul></li></ul><h6 id="迪米特原则-最少知道原则"><a class="header-anchor" href="#迪米特原则-最少知道原则">¶</a>迪米特原则(最少知道原则)</h6><ul><li>降低耦合性,若A类依赖B类,可以通过B类去处理C而不是直接处理C.</li><li>也可以采取依赖倒置,即A包含C类的接口进行处理.</li></ul><h6 id="依赖倒置和"><a class="header-anchor" href="#依赖倒置和">¶</a>依赖倒置和</h6>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习一</title>
      <link href="/2019/09/24/git%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
      <url>/2019/09/24/git%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习一</title>
      <link href="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
      <url>/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h4 id="springBoot概述"><a class="header-anchor" href="#springBoot概述">¶</a>springBoot概述</h4><h5 id="启动逻辑"><a class="header-anchor" href="#启动逻辑">¶</a>启动逻辑</h5><ul><li>构造器</li></ul><figure class="highlight java"><figcaption><span>SpringApplication</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));<span class="comment">//实际就是调用#run(),传递的源</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<span class="comment">//判断web类型,如servlet</span></span><br><span class="line">setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>))</span>; <span class="comment">//获取ApplicationContextInitializer子类,该子类实际上属于一种回调,设置springApplication中的回调</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;<span class="comment">//获取监听器</span></span><br><span class="line"><span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();<span class="comment">//源</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载通过"META-INF/spring.factories"文件定义的类,参考SpringFactoriesLoader实现,逻辑并不是很难</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@para</span> type 表示要创建的class类型</span></span><br><span class="line"><span class="comment">* <span class="doctag">@para</span> parametterTypes 该类型的构造器参数类型</span></span><br><span class="line"><span class="comment">* <span class="doctag">@para</span> args 实际参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">getSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;?&gt;[] parameterTypes, Object... args)</span> </span>&#123;</span><br><span class="line">ClassLoader classLoader = getClassLoader();</span><br><span class="line"><span class="comment">// Use names and ensure unique to protect against duplicates</span></span><br><span class="line">Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(</span><br><span class="line">SpringFactoriesLoader.loadFactoryNames(type, classLoader));</span><br><span class="line">List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</span><br><span class="line">classLoader, args, names);</span><br><span class="line">AnnotationAwareOrderComparator.sort(instances);</span><br><span class="line"><span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说构造器完成了Initializer回调的设置和监听器的设置</p><ul><li>run整体逻辑</li></ul><figure class="highlight java"><figcaption><span>run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();<span class="comment">//该工具是spring的计时工具</span></span><br><span class="line">stopWatch.start();</span><br><span class="line">ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">configureHeadlessProperty();</span><br><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);<span class="comment">//获取SpringApplicationRunListener,并执行这些监听器,观察者模式,见下文.</span></span><br><span class="line">listeners.starting();<span class="comment">//执行starting相关监听器</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">args);<span class="comment">//封装入参</span></span><br><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">applicationArguments);<span class="comment">//处理环境</span></span><br><span class="line"><span class="comment">//根据env中 spring.beaninfo.ignore来设置System.pre中的属性,具体这是干啥的,我不是很清楚</span></span><br><span class="line">configureIgnoreBeanInfo(environment);</span><br><span class="line"><span class="comment">//这是一个花里胡哨的东西,用来打印控制台图案,定义banner.txt|banner.jpg|banner.gif试试</span></span><br><span class="line">Banner printedBanner = printBanner(environment);</span><br><span class="line"><span class="comment">//根据app类型创建context,如AnnotationConfigServletWebServerApplicationContext</span></span><br><span class="line">context = createApplicationContext();</span><br><span class="line"><span class="comment">//创建Reporters</span></span><br><span class="line">exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">SpringBootExceptionReporter<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">new Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">printedBanner);</span><br><span class="line">refreshContext(context);</span><br><span class="line">afterRefresh(context, applicationArguments);</span><br><span class="line">stopWatch.stop();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line"><span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">.logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">&#125;</span><br><span class="line">listeners.started(context);</span><br><span class="line">callRunners(context, applicationArguments);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">listeners.running(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepareEnvironment</li></ul><figure class="highlight java"><figcaption><span>环境准备</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建ServletEnv</span></span><br><span class="line">ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">listeners.environmentPrepared(environment);</span><br><span class="line">bindToSpringApplication(environment);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">.convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">&#125;</span><br><span class="line">ConfigurationPropertySources.attach(environment);</span><br><span class="line"><span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//类型转换器</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.addConversionService) &#123;</span><br><span class="line">ConversionService conversionService = ApplicationConversionService</span><br><span class="line">.getSharedInstance();</span><br><span class="line">environment.setConversionService(</span><br><span class="line">(ConfigurableConversionService) conversionService);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将arg作为env中的属性加入</span></span><br><span class="line">configurePropertySources(environment, args);</span><br><span class="line"><span class="comment">//设置Profile</span></span><br><span class="line">configureProfiles(environment, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepareContext</li></ul><figure class="highlight java"><figcaption><span>context准备</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">context.setEnvironment(environment);</span><br><span class="line"><span class="comment">//添加了几个bean</span></span><br><span class="line">postProcessApplicationContext(context);</span><br><span class="line"><span class="comment">//执行ApplicationInit</span></span><br><span class="line">applyInitializers(context);</span><br><span class="line"><span class="comment">//发送contextPrepared事件</span></span><br><span class="line">listeners.contextPrepared(context);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">logStartupProfileInfo(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加参数bean和banner</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line"><span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">.setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载源</span></span><br><span class="line">Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line"><span class="comment">//执行ApplicationPreparedEvent事件</span></span><br><span class="line">listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(</span><br><span class="line"><span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</span><br><span class="line">&#125;</span><br><span class="line">BeanDefinitionLoader loader = createBeanDefinitionLoader(</span><br><span class="line">getBeanDefinitionRegistry(context), sources);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">loader.setEnvironment(<span class="keyword">this</span>.environment);</span><br><span class="line">&#125;</span><br><span class="line">loader.load();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line"><span class="comment">//BeanDefinitionLoader#load</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">load</span><span class="params">(Class&lt;?&gt; source)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isGroovyPresent()</span><br><span class="line">&amp;&amp; GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">source</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Any GroovyLoaders added in beans&#123;&#125; DSL can contribute beans here</span></span><br><span class="line">GroovyBeanDefinitionSource loader = BeanUtils.instantiateClass(source,</span><br><span class="line">GroovyBeanDefinitionSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">load(loader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isComponent(source)) &#123;<span class="comment">//不使用groovy的情况,这里通过递归判断source本身是否声明Component注解||其注解中是否有声明Compoent||其接口||父类</span></span><br><span class="line"><span class="comment">//如果符合条件,则通过注解reader将该bean设置为BeanFacotry#Registry中,等待实例化</span></span><br><span class="line"><span class="comment">//此处还应该注意的点是,该reader将符合条件的源,转为了AnnotatedGenericBeanDefinition,供Config..Precessor解析时处理</span></span><br><span class="line"><span class="keyword">this</span>.annotatedReader.register(source);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="spring中机制"><a class="header-anchor" href="#spring中机制">¶</a>spring中机制</h5><h6 id="spring中事件概述"><a class="header-anchor" href="#spring中事件概述">¶</a>spring中事件概述</h6><figure class="highlight java"><figcaption><span>事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的观察者模式,由事件源发起事件,然后传递事件给下属监听器,以springBoot中SpringApplicationRunListeners部分为例子</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringApplicationRunListeners</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;SpringApplicationRunListener&gt; listeners;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//其中的属性都是由SpringFactoriesLoader获取的子类,默认情况下只有EventPublishingRunListener</span></span><br><span class="line"><span class="keyword">for</span> (SpringApplicationRunListener listener : <span class="keyword">this</span>.listeners) &#123;</span><br><span class="line">listener.starting();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventPublishingRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SpringApplication application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String[] args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SimpleApplicationEventMulticaster initialMulticaster;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventPublishingRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.application = application;<span class="comment">//反射构造时指定的SpringApplication对象</span></span><br><span class="line"><span class="keyword">this</span>.args = args;<span class="comment">//该参数便是run(arg)</span></span><br><span class="line"><span class="keyword">this</span>.initialMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();<span class="comment">//spring默认的事件广播器</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</span><br><span class="line"><span class="keyword">this</span>.initialMulticaster.addApplicationListener(listener);<span class="comment">//这样就application构造时创建的监听器加入到了广播器中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//传播事件</span></span><br><span class="line"><span class="keyword">this</span>.initialMulticaster.multicastEvent(</span><br><span class="line"><span class="keyword">new</span> ApplicationStartingEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//caster</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleApplicationEventMulticaster</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationEventMulticaster</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">multicastEvent(event, resolveDefaultEventType(event));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</span><br><span class="line"><span class="comment">//这里的逻辑就是从之前创建caster时放置的listener中取出能够支持这种事件类型的监听器</span></span><br><span class="line">Executor executor = getTaskExecutor();</span><br><span class="line"><span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">executor.execute(() -&gt; invokeListener(listener, event));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">invokeListener(listener, event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>springApp整个过程经历的监听器:</p><ul><li>start阶段<ul><li>LoggingApplicationListener:用来初始化日志系统</li><li>BackgroundPreinitializer:通过设置system中IGNORE_BACKGROUNDPREINITIALIZER_PROPERTY_NAME为true可以屏蔽提前初始化</li><li>DelegatingApplicationListener:用来委托其他监听器的监听器,在starting时没有作用</li><li>LiquibaseServiceLocatorApplicationListener:liqiubase是一个数据库工具,该监听器会在使用者使用了该库时替换掉serviceLoader</li></ul></li><li>environmentPrepared阶段:进行环境设置后调用  <img src="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/envedLis.png" class=""><ul><li>ConfigFileApplicationListener:从<code>classpath:/,classpath:/config/,file:./,file:./config/</code>加载<code>application.properties</code>或<code>application.yml</code>到env中</li><li>AnsiOutputApplicationListener:根据<code>pring.output.ansi.enabled</code>,决定是否开启AnsiOutput</li><li>LoggingApplicationListener</li><li>…</li></ul></li><li>contextPrepared阶段:完成initializers调用后进行  <img src="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/contextLis.png" class=""><ul><li>前者不做事情</li></ul></li><li>contextLoaded阶段:完成source注册后启动  <img src="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/loadedLis.png" class=""></li></ul><h6 id="Environment相关"><a class="header-anchor" href="#Environment相关">¶</a>Environment相关</h6><img src="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/StanderSE.png" class=""><ul><li>PropertyResolver:spring提供的访问属性接口</li><li>Environment:表示环境接口,Profiles(配置文件)和Properties.</li><li>AbstractEnvironment: 该类中的propertySources则真正缓存着环境属性</li></ul><figure class="highlight java"><figcaption><span>AbstractEnvironment</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableEnvironment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IGNORE_GETENV_PROPERTY_NAME = <span class="string">"spring.getenv.ignore"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVE_PROFILES_PROPERTY_NAME = <span class="string">"spring.profiles.active"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PROFILES_PROPERTY_NAME = <span class="string">"spring.profiles.default"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; activeProfiles = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; defaultProfiles = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(getReservedDefaultProfiles());</span><br><span class="line"></span><br><span class="line"><span class="comment">//该对象实际缓存着多个PropertySource</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MutablePropertySources propertySources = <span class="keyword">new</span> MutablePropertySources();</span><br><span class="line">        <span class="comment">//通过该接口进行读取属性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class="line"><span class="keyword">new</span> PropertySourcesPropertyResolver(<span class="keyword">this</span>.propertySources);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造env对象时进行加载属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">customizePropertySources(<span class="keyword">this</span>.propertySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父类为空,显而易见将不同子类要初始化的env属性添加到propertySources中</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardEnvironment</span> <span class="keyword">extends</span> <span class="title">AbstractEnvironment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** System environment property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME = <span class="string">"systemEnvironment"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** JVM system properties property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME = <span class="string">"systemProperties"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类进行的初始化工作</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">propertySources.addLast(<span class="keyword">new</span> MapPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));<span class="comment">//获取System中proprety</span></span><br><span class="line">propertySources.addLast(<span class="keyword">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));<span class="comment">//System中env</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同理serverlt</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardServletEnvironment</span> <span class="keyword">extends</span> <span class="title">StandardEnvironment</span> <span class="keyword">implements</span> <span class="title">ConfigurableWebEnvironment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Servlet context init parameters property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVLET_CONTEXT_PROPERTY_SOURCE_NAME = <span class="string">"servletContextInitParams"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Servlet config init parameters property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVLET_CONFIG_PROPERTY_SOURCE_NAME = <span class="string">"servletConfigInitParams"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** JNDI property source name: &#123;<span class="doctag">@value</span>&#125;. */</span></span><br><span class="line">        <span class="comment">//添加servlet相关的环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String JNDI_PROPERTY_SOURCE_NAME = <span class="string">"jndiProperties"</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这两种类型的PropretySource说明该环境不能在初始化时获取,因此作为占位符</span></span><br><span class="line">propertySources.addLast(<span class="keyword">new</span> StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));</span><br><span class="line">propertySources.addLast(<span class="keyword">new</span> StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));</span><br><span class="line"><span class="keyword">if</span> (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">propertySources.addLast(<span class="keyword">new</span> JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">super</span>.customizePropertySources(propertySources);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数会被springMVC的FrameServlet调用,此时才设置有关于serlvet的环境变量</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initPropertySources</span><span class="params">(@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line">WebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//假设springMVC进行初始化时,会调到此处</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initServletPropertySources</span><span class="params">(MutablePropertySources sources,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Assert.notNull(sources, <span class="string">"'propertySources' must not be null"</span>);</span><br><span class="line">String name = StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME;</span><br><span class="line"><span class="keyword">if</span> (servletContext != <span class="keyword">null</span> &amp;&amp; sources.contains(name) &amp;&amp; sources.get(name) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line"><span class="comment">//这里逻辑很简单,仅仅是替换掉初始化时的占位符,缓存servletContext</span></span><br><span class="line">sources.replace(name, <span class="keyword">new</span> ServletContextPropertySource(name, servletContext));</span><br><span class="line">&#125;</span><br><span class="line">name = StandardServletEnvironment.SERVLET_CONFIG_PROPERTY_SOURCE_NAME;</span><br><span class="line"><span class="keyword">if</span> (servletConfig != <span class="keyword">null</span> &amp;&amp; sources.contains(name) &amp;&amp; sources.get(name) <span class="keyword">instanceof</span> StubPropertySource) &#123;</span><br><span class="line"><span class="comment">//同上,缓存servletConfig</span></span><br><span class="line">sources.replace(name, <span class="keyword">new</span> ServletConfigPropertySource(name, servletConfig));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关于PropertySource</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySource</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"><span class="comment">//该有可能是System.Properties System.env等</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> T source;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a new &#123;<span class="doctag">@code</span> PropertySource&#125; with the given name and source object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertySource</span><span class="params">(String name, T source)</span> </span>&#123;</span><br><span class="line">Assert.hasText(name, <span class="string">"Property source name must contain at least one character"</span>);</span><br><span class="line">Assert.notNull(source, <span class="string">"Property source must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.source = source;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ApplicationContextInitializer"><a class="header-anchor" href="#ApplicationContextInitializer">¶</a>ApplicationContextInitializer</h6><p>这些类是在context#refreshed之前调用,在SpringApplication中有一下实例:</p><ul><li>DelegatingApplicationContextInitializer:由名字也能知道,该类从env中获取context.initializer.classes定义的Initializer对象,再调用它们的init函数</li><li>SharedMetadataReaderFactoryContextInitializer:向context中添加了一个BeanFacotryPost处理器,CachingMetadataReaderFactoryPostProcessor,context#fresh阶段调用</li><li>ContextIdApplicationContextInitializer:向context设置了一个ContextId对象,并设置了该bean</li><li>ConfigurationWarningsApplicationContextInitializer:添加ConfigurationWarningsPostProcessor处理器</li><li>ServerPortInfoApplicationContextInitializer:该init也是一个ApplicationListener,用来处理WebServerInitializedEvent,设置web prot信息</li><li>ConditionEvaluationReportLoggingListener:该类和上类似,用来设置一个appListener,输出一些报告</li></ul><h6 id="boot中context"><a class="header-anchor" href="#boot中context">¶</a>boot中context</h6><p>AnnotationConfigServletWebServerApplicationContext的特有逻辑</p><ul><li>构造</li></ul><figure class="highlight java"><figcaption><span>AnnotationConfigServletWebServerApplicationContext</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigServletWebServerApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//这里构造给此种类型的context附加了很多def和post</span></span><br><span class="line"><span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AnnotatedBeanDefinitionReader</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> </span>&#123;</span><br><span class="line">Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">Assert.notNull(environment, <span class="string">"Environment must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.registry = registry;</span><br><span class="line"><span class="keyword">this</span>.conditionEvaluator = <span class="keyword">new</span> ConditionEvaluator(registry, environment, <span class="keyword">null</span>);</span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AnnotationConfigUtils</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerAnnotationConfigProcessors</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">registerAnnotationConfigProcessors(registry, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">registerAnnotationConfigProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry, @Nullable Object source)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">DefaultListableBeanFactory beanFactory = unwrapDefaultListableBeanFactory(registry);</span><br><span class="line"><span class="keyword">if</span> (beanFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(beanFactory.getDependencyComparator() <span class="keyword">instanceof</span> AnnotationAwareOrderComparator)) &#123;</span><br><span class="line">beanFactory.setDependencyComparator(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(beanFactory.getAutowireCandidateResolver() <span class="keyword">instanceof</span> ContextAnnotationAutowireCandidateResolver)) &#123;</span><br><span class="line">beanFactory.setAutowireCandidateResolver(<span class="keyword">new</span> ContextAnnotationAutowireCandidateResolver());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"><span class="comment">// ConfigurationClassPostProcessor用来处理config注解的factoryPost处理器,调用时机在</span></span><br><span class="line"><span class="comment">//AbstractApplicationContext #invokeBeanFactoryPostProcessors()</span></span><br><span class="line"><span class="keyword">if</span> (!registry.containsBeanDefinition(CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(ConfigurationClassPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BeanPost子类,AutowiredAnnotationBeanPostProcessor,ioc逻辑</span></span><br><span class="line"><span class="keyword">if</span> (!registry.containsBeanDefinition(AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(AutowiredAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for JSR-250 support, and if present add the CommonAnnotationBeanPostProcessor.</span></span><br><span class="line"><span class="comment">// CommonAnnotationBeanPostProcessor,用来实现JSR-250,详见 javax-annotation-api包</span></span><br><span class="line"><span class="keyword">if</span> (jsr250Present &amp;&amp; !registry.containsBeanDefinition(COMMON_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(CommonAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, COMMON_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for JPA support, and if present add the PersistenceAnnotationBeanPostProcessor.</span></span><br><span class="line"><span class="comment">// JPA支持,PersistenceAnnotationBeanPostProcessor,属于spring... . orm 包下</span></span><br><span class="line"><span class="keyword">if</span> (jpaPresent &amp;&amp; !registry.containsBeanDefinition(PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">def.setBeanClass(ClassUtils.forName(PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME,</span><br><span class="line">AnnotationConfigUtils<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()))</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"Cannot load optional framework class: "</span> + PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME, ex);</span><br><span class="line">&#125;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这两个暂时不看</span></span><br><span class="line"><span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(EventListenerMethodProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_PROCESSOR_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!registry.containsBeanDefinition(EVENT_LISTENER_FACTORY_BEAN_NAME)) &#123;</span><br><span class="line">RootBeanDefinition def = <span class="keyword">new</span> RootBeanDefinition(DefaultEventListenerFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">def.setSource(source);</span><br><span class="line">beanDefs.add(registerPostProcessor(registry, def, EVENT_LISTENER_FACTORY_BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> beanDefs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将bean注册到registry,并没有分类成不同的处理器,分类交给了context自己去实现</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinitionHolder <span class="title">registerPostProcessor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry, RootBeanDefinition definition, String beanName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">registry.registerBeanDefinition(beanName, definition);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(definition, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上步骤,该context可能创建一下几个bean定义:</p><ul><li>ConfigurationClassPostProcessor  <img src="/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/ConfigurationClassPostProcessor.png" class=""><ul><li>ioc创建实例后调用aware接口<ul><li>context#fresh时,执行registry和factoryPost逻辑</li></ul></li></ul>  <figure class="highlight java"><figcaption><span>ConfigurationClassPostProcessor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BeanDefinitionRegistryPostProcessor逻辑,完成了@Configurable注解类的解析处理</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Derive further bean definitions from the configuration classes in the registry.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> registryId = System.identityHashCode(registry);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.registriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"postProcessBeanDefinitionRegistry already called on this post-processor against "</span> + registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.factoriesPostProcessed.contains(registryId)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"postProcessBeanFactory already called on this post-processor against "</span> + registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.registriesPostProcessed.add(registryId);</span><br><span class="line"></span><br><span class="line">processConfigBeanDefinitions(registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processConfigBeanDefinitions</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">String[] candidateNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String beanName : candidateNames) &#123;</span><br><span class="line">BeanDefinition beanDef = registry.getBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||</span><br><span class="line">ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) &#123;</span><br><span class="line"><span class="comment">//如果这个bean中有一个属性org.springframework.context.annotation.ConfigurationClassPostProcessor.configurationClass</span></span><br><span class="line"><span class="comment">//被设置为full||lite,那么说明给bean被处理过,则不进行处理</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Bean definition has already been processed as a configuration class: "</span> + beanDef);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则检查该bean是否@Configuration或者@Component,也就是说@Bean并发一定要写在Configuration类中</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">configCandidates.add(<span class="keyword">new</span> BeanDefinitionHolder(beanDef, beanName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return immediately if no @Configuration classes were found</span></span><br><span class="line"><span class="keyword">if</span> (configCandidates.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sort by previously determined @Order value, if applicable</span></span><br><span class="line">configCandidates.sort((bd1, bd2) -&gt; &#123;</span><br><span class="line"><span class="keyword">int</span> i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());</span><br><span class="line"><span class="keyword">int</span> i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());</span><br><span class="line"><span class="keyword">return</span> Integer.compare(i1, i2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span></span><br><span class="line">SingletonBeanRegistry sbr = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (registry <span class="keyword">instanceof</span> SingletonBeanRegistry) &#123;</span><br><span class="line">sbr = (SingletonBeanRegistry) registry;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.localBeanNameGeneratorSet) &#123;</span><br><span class="line">BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);</span><br><span class="line"><span class="keyword">if</span> (generator != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.componentScanBeanNameGenerator = generator;</span><br><span class="line"><span class="keyword">this</span>.importBeanNameGenerator = generator;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parse each @Configuration class</span></span><br><span class="line"><span class="comment">//解析regsitry中包含的Configuration类</span></span><br><span class="line">ConfigurationClassParser parser = <span class="keyword">new</span> ConfigurationClassParser(</span><br><span class="line"><span class="keyword">this</span>.metadataReaderFactory, <span class="keyword">this</span>.problemReporter, <span class="keyword">this</span>.environment,</span><br><span class="line"><span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.componentScanBeanNameGenerator, registry);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示要处理的配置类</span></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);</span><br><span class="line"><span class="comment">//已经解析过的类</span></span><br><span class="line">Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="keyword">new</span> HashSet&lt;&gt;(configCandidates.size());</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//使用解析器进行解析,</span></span><br><span class="line">parser.parse(candidates);</span><br><span class="line">parser.validate();</span><br><span class="line"><span class="comment">//获取进行parser处理的classes</span></span><br><span class="line">Set&lt;ConfigurationClass&gt; configClasses = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses());</span><br><span class="line">configClasses.removeAll(alreadyParsed);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read the model and create bean definitions based on its content</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.reader == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.reader = <span class="keyword">new</span> ConfigurationClassBeanDefinitionReader(</span><br><span class="line">registry, <span class="keyword">this</span>.sourceExtractor, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.environment,</span><br><span class="line"><span class="keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//载入beanDef,至此spring将用户定义的能够扫描的所有bean都注册;</span></span><br><span class="line"><span class="comment">//将@Bean注解的方法设置为ConfigClass中的一个属性,交由下边这个reader进行处理</span></span><br><span class="line"><span class="comment">// reader类型为ConfigurationClassBeanDefinitionReader,单独的类,不属于任何继承树</span></span><br><span class="line"><span class="keyword">this</span>.reader.loadBeanDefinitions(configClasses);</span><br><span class="line"><span class="comment">//设置已经处理</span></span><br><span class="line">alreadyParsed.addAll(configClasses);</span><br><span class="line"><span class="comment">//清空备选</span></span><br><span class="line">candidates.clear();</span><br><span class="line"><span class="keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;</span><br><span class="line"><span class="comment">//再次获取一次names,判断是否要继续进行一次</span></span><br><span class="line">String[] newCandidateNames = registry.getBeanDefinitionNames();</span><br><span class="line">Set&lt;String&gt; oldCandidateNames = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(candidateNames));</span><br><span class="line">Set&lt;String&gt; alreadyParsedClasses = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;</span><br><span class="line">alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String candidateName : newCandidateNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;</span><br><span class="line">BeanDefinition bd = registry.getBeanDefinition(candidateName);</span><br><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="keyword">this</span>.metadataReaderFactory) &amp;&amp;</span><br><span class="line">!alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;</span><br><span class="line">candidates.add(<span class="keyword">new</span> BeanDefinitionHolder(bd, candidateName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">candidateNames = newCandidateNames;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!candidates.isEmpty());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span></span><br><span class="line"><span class="keyword">if</span> (sbr != <span class="keyword">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;</span><br><span class="line">sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.metadataReaderFactory <span class="keyword">instanceof</span> CachingMetadataReaderFactory) &#123;</span><br><span class="line"><span class="comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span></span><br><span class="line"><span class="comment">// for a shared cache since it'll be cleared by the ApplicationContext.</span></span><br><span class="line">((CachingMetadataReaderFactory) <span class="keyword">this</span>.metadataReaderFactory).clearCache();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConfigurationClassParser逻辑</li></ul>  <figure class="highlight java"><figcaption><span>ConfigurationClassParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类是用来解析@Configuration注解类的入口类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">//def的类型选择解析的方式</span></span><br><span class="line"><span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据不同beanDef创建不同的ConfigClass</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(@Nullable String className, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Assert.notNull(className, <span class="string">"No bean class name for configuration class bean definition"</span>);</span><br><span class="line">MetadataReader reader = <span class="keyword">this</span>.metadataReaderFactory.getMetadataReader(className);</span><br><span class="line">processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(reader, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Class&lt;?&gt; clazz, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(clazz, beanName));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(AnnotationMetadata metadata, String beanName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">processConfigurationClass(<span class="keyword">new</span> ConfigurationClass(metadata, beanName));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processConfigurationClass</span><span class="params">(ConfigurationClass configClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//configurationClasses是一个map,每次调用前获取给class是否之前处理过,处理import逻辑</span></span><br><span class="line">ConfigurationClass existingClass = <span class="keyword">this</span>.configurationClasses.get(configClass);</span><br><span class="line"><span class="keyword">if</span> (existingClass != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line"><span class="keyword">if</span> (existingClass.isImported()) &#123;</span><br><span class="line">existingClass.mergeImportedBy(configClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Otherwise ignore new imported config class; existing non-imported class overrides it.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Explicit bean definition found, probably replacing an import.</span></span><br><span class="line"><span class="comment">// Let's remove the old one and go with the new one.</span></span><br><span class="line"><span class="keyword">this</span>.configurationClasses.remove(configClass);</span><br><span class="line"><span class="keyword">this</span>.knownSuperclasses.values().removeIf(configClass::equals);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Recursively process the configuration class and its superclass hierarchy.</span></span><br><span class="line"><span class="comment">//递归的处理该配置类其父类,当srouce==null,表示处理干净了</span></span><br><span class="line">SourceClass sourceClass = asSourceClass(configClass);</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sourceClass = doProcessConfigurationClass(configClass, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (sourceClass != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.configurationClasses.put(configClass, configClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> SourceClass <span class="title">doProcessConfigurationClass</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (configClass.getMetadata().isAnnotated(Component<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line"><span class="comment">// Recursively process any member (nested) classes first</span></span><br><span class="line"><span class="comment">//如果该配置是Component注解类,则开始处理内部类</span></span><br><span class="line">processMemberClasses(configClass, sourceClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @PropertySource annotations</span></span><br><span class="line"><span class="comment">// 处理该类的PropertySource注解,将资源注入到env中,使用在ioc中</span></span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">sourceClass.getMetadata(), PropertySources<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class"><span class="title">org</span>.<span class="title">springframework</span>.<span class="title">context</span>.<span class="title">annotation</span>.<span class="title">PropertySource</span>.<span class="title">class</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment <span class="keyword">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class="line">processPropertySource(propertySource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.info(<span class="string">"Ignoring @PropertySource annotation on ["</span> + sourceClass.getMetadata().getClassName() +</span><br><span class="line"><span class="string">"]. Reason: Environment must implement ConfigurableEnvironment"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @ComponentScan annotations</span></span><br><span class="line"><span class="comment">// 处理@ComponentScan注解</span></span><br><span class="line"><span class="comment">// [1] AnnotationAttributes是一个map,用来封装注解信息,并附带类型转换方法</span></span><br><span class="line"><span class="comment">// [2] attributesForRepeatable方法用来获取注解信息</span></span><br><span class="line"><span class="comment">// [3] componentScanParser真正用来处理</span></span><br><span class="line">Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(</span><br><span class="line">sourceClass.getMetadata(), ComponentScans<span class="class">.<span class="keyword">class</span>, <span class="title">ComponentScan</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (!componentScans.isEmpty() &amp;&amp;</span><br><span class="line">!<span class="keyword">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) &#123;</span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;</span><br><span class="line"><span class="comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately</span></span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =</span><br><span class="line"><span class="keyword">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());</span><br><span class="line"><span class="comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span></span><br><span class="line"><span class="comment">// 将通过Scan获取的def再进行一次处理</span></span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;</span><br><span class="line">BeanDefinition bdCand = holder.getBeanDefinition().getOriginatingBeanDefinition();</span><br><span class="line"><span class="keyword">if</span> (bdCand == <span class="keyword">null</span>) &#123;</span><br><span class="line">bdCand = holder.getBeanDefinition();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="keyword">this</span>.metadataReaderFactory)) &#123;</span><br><span class="line">parse(bdCand.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @Import annotations</span></span><br><span class="line"><span class="comment">// @Import注解相当于将一个bean,引入配置</span></span><br><span class="line">processImports(configClass, sourceClass, getImports(sourceClass), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process any @ImportResource annotations</span></span><br><span class="line"><span class="comment">// 处理是否存在ImportResource注解,并使用对应的reader来处理,默认为BeanDefinitionReader</span></span><br><span class="line"><span class="comment">// 此时仅仅将该resource和reader放置到configClass中,并没有处理</span></span><br><span class="line">AnnotationAttributes importResource =</span><br><span class="line">AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (importResource != <span class="keyword">null</span>) &#123;</span><br><span class="line">String[] resources = importResource.getStringArray(<span class="string">"locations"</span>);</span><br><span class="line">Class&lt;? extends BeanDefinitionReader&gt; readerClass = importResource.getClass(<span class="string">"reader"</span>);</span><br><span class="line"><span class="keyword">for</span> (String resource : resources) &#123;</span><br><span class="line">String resolvedResource = <span class="keyword">this</span>.environment.resolveRequiredPlaceholders(resource);</span><br><span class="line">configClass.addImportedResource(resolvedResource, readerClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process individual @Bean methods</span></span><br><span class="line"><span class="comment">// 获取@Bean定义的函数类型,在这个过程中并没有将@Bean注解的方法注册进去</span></span><br><span class="line">Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);</span><br><span class="line"><span class="keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;</span><br><span class="line">configClass.addBeanMethod(<span class="keyword">new</span> BeanMethod(methodMetadata, configClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process default methods on interfaces</span></span><br><span class="line"><span class="comment">// 获取配置类的接口中,定义为default的@Bean函数</span></span><br><span class="line">processInterfaces(configClass, sourceClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process superclass, if any</span></span><br><span class="line"><span class="comment">// 如果有父类则处理父类,java是单向继承</span></span><br><span class="line"><span class="keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;</span><br><span class="line">String superclass = sourceClass.getMetadata().getSuperClassName();</span><br><span class="line"><span class="keyword">if</span> (superclass != <span class="keyword">null</span> &amp;&amp; !superclass.startsWith(<span class="string">"java"</span>) &amp;&amp;</span><br><span class="line">!<span class="keyword">this</span>.knownSuperclasses.containsKey(superclass)) &#123;</span><br><span class="line"><span class="keyword">this</span>.knownSuperclasses.put(superclass, configClass);</span><br><span class="line"><span class="comment">// Superclass found, return its annotation metadata and recurse</span></span><br><span class="line"><span class="keyword">return</span> sourceClass.getSuperClass();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// No superclass -&gt; processing is complete</span></span><br><span class="line"><span class="comment">//到这里说明处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register member (nested) classes that happen to be configuration classes themselves.</span></span><br><span class="line"><span class="comment"> * 处理配置类的内部类,是否符合条件的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processMemberClasses</span><span class="params">(ConfigurationClass configClass, SourceClass sourceClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//获取内部类</span></span><br><span class="line">Collection&lt;SourceClass&gt; memberClasses = sourceClass.getMemberClasses();</span><br><span class="line"><span class="keyword">if</span> (!memberClasses.isEmpty()) &#123;</span><br><span class="line">List&lt;SourceClass&gt; candidates = <span class="keyword">new</span> ArrayList&lt;&gt;(memberClasses.size());</span><br><span class="line"><span class="keyword">for</span> (SourceClass memberClass : memberClasses) &#123;</span><br><span class="line"><span class="comment">//判断是否符合条件</span></span><br><span class="line"><span class="keyword">if</span> (ConfigurationClassUtils.isConfigurationCandidate(memberClass.getMetadata()) &amp;&amp;</span><br><span class="line">!memberClass.getMetadata().getClassName().equals(configClass.getMetadata().getClassName())) &#123;</span><br><span class="line">candidates.add(memberClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">OrderComparator.sort(candidates);</span><br><span class="line"><span class="keyword">for</span> (SourceClass candidate : candidates) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.importStack.contains(configClass)) &#123;</span><br><span class="line"><span class="keyword">this</span>.problemReporter.error(<span class="keyword">new</span> CircularImportProblem(configClass, <span class="keyword">this</span>.importStack));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.importStack.push(configClass);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用上边的函数进行处理</span></span><br><span class="line">processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.importStack.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ComponentScanAnnotationParser,扫描包,获取配置了@Component注解的类进行处理</li></ul>  <figure class="highlight java"><figcaption><span>ComponentScanAnnotationParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这部分代码什么简单,通过componentScan获取注解内部的属性,以设置ClassPathBeanDefinitionScanner的属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">parse</span><span class="params">(AnnotationAttributes componentScan, <span class="keyword">final</span> String declaringClass)</span> </span>&#123;</span><br><span class="line"><span class="comment">//此处useDefaultFilters属性,决定了后后边进行匹配时应该符合的类,默认匹配@Component和@ManagedBean</span></span><br><span class="line">ClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>.registry,</span><br><span class="line">componentScan.getBoolean(<span class="string">"useDefaultFilters"</span>), <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader);</span><br><span class="line"></span><br><span class="line">Class&lt;? extends BeanNameGenerator&gt; generatorClass = componentScan.getClass(<span class="string">"nameGenerator"</span>);</span><br><span class="line"><span class="keyword">boolean</span> useInheritedGenerator = (BeanNameGenerator<span class="class">.<span class="keyword">class</span> </span>== generatorClass);</span><br><span class="line">scanner.setBeanNameGenerator(useInheritedGenerator ? <span class="keyword">this</span>.beanNameGenerator :</span><br><span class="line">BeanUtils.instantiateClass(generatorClass));</span><br><span class="line"></span><br><span class="line">ScopedProxyMode scopedProxyMode = componentScan.getEnum(<span class="string">"scopedProxy"</span>);</span><br><span class="line"><span class="keyword">if</span> (scopedProxyMode != ScopedProxyMode.DEFAULT) &#123;</span><br><span class="line">scanner.setScopedProxyMode(scopedProxyMode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Class&lt;? extends ScopeMetadataResolver&gt; resolverClass = componentScan.getClass(<span class="string">"scopeResolver"</span>);</span><br><span class="line">scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.setResourcePattern(componentScan.getString(<span class="string">"resourcePattern"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes filter : componentScan.getAnnotationArray(<span class="string">"includeFilters"</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (TypeFilter typeFilter : typeFiltersFor(filter)) &#123;</span><br><span class="line">scanner.addIncludeFilter(typeFilter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes filter : componentScan.getAnnotationArray(<span class="string">"excludeFilters"</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (TypeFilter typeFilter : typeFiltersFor(filter)) &#123;</span><br><span class="line">scanner.addExcludeFilter(typeFilter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> lazyInit = componentScan.getBoolean(<span class="string">"lazyInit"</span>);</span><br><span class="line"><span class="keyword">if</span> (lazyInit) &#123;</span><br><span class="line">scanner.getBeanDefinitionDefaults().setLazyInit(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; basePackages = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">String[] basePackagesArray = componentScan.getStringArray(<span class="string">"basePackages"</span>);</span><br><span class="line"><span class="keyword">for</span> (String pkg : basePackagesArray) &#123;</span><br><span class="line">String[] tokenized = StringUtils.tokenizeToStringArray(<span class="keyword">this</span>.environment.resolvePlaceholders(pkg),</span><br><span class="line">ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">Collections.addAll(basePackages, tokenized);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; clazz : componentScan.getClassArray(<span class="string">"basePackageClasses"</span>)) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果注解默认没有设置扫描路径,那么扫描路径就是注解类的包以及子路径</span></span><br><span class="line"><span class="comment">//如test.Demo,则扫描路径就是test包下</span></span><br><span class="line"><span class="keyword">if</span> (basePackages.isEmpty()) &#123;</span><br><span class="line">basePackages.add(ClassUtils.getPackageName(declaringClass));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.addExcludeFilter(<span class="keyword">new</span> AbstractTypeHierarchyTraversingFilter(<span class="keyword">false</span>, <span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">matchClassName</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> declaringClass.equals(className);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//进行解析</span></span><br><span class="line"><span class="keyword">return</span> scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ClassPathBeanDefinitionScanner类</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;BeanDefinitionHolder&gt; <span class="title">doScan</span><span class="params">(String... basePackages)</span> </span>&#123;</span><br><span class="line">Assert.notEmpty(basePackages, <span class="string">"At least one base package must be specified"</span>);</span><br><span class="line">Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String basePackage : basePackages) &#123;</span><br><span class="line"><span class="comment">//寻找拥有Component注解的类,间接拥有也可以,如Service,Configuration等注解</span></span><br><span class="line"><span class="comment">//jsr250 @ManagedBean</span></span><br><span class="line"><span class="comment">//jsr330 @Named</span></span><br><span class="line">Set&lt;BeanDefinition&gt; candidates = findCandidateComponents(basePackage);</span><br><span class="line"><span class="keyword">for</span> (BeanDefinition candidate : candidates) &#123;</span><br><span class="line"><span class="comment">//设置scope</span></span><br><span class="line">ScopeMetadata scopeMetadata = <span class="keyword">this</span>.scopeMetadataResolver.resolveScopeMetadata(candidate);</span><br><span class="line">candidate.setScope(scopeMetadata.getScopeName());</span><br><span class="line"><span class="comment">//使用命名器设置beanName</span></span><br><span class="line">String beanName = <span class="keyword">this</span>.beanNameGenerator.generateBeanName(candidate, <span class="keyword">this</span>.registry);</span><br><span class="line"><span class="comment">//根据不同的def,使用不同方式处理,并注册到resgity中,具体参考源码</span></span><br><span class="line"><span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">postProcessBeanDefinition((AbstractBeanDefinition) candidate, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (candidate <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">AnnotationConfigUtils.processCommonDefinitionAnnotations((AnnotatedBeanDefinition) candidate);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (checkCandidate(beanName, candidate)) &#123;</span><br><span class="line">BeanDefinitionHolder definitionHolder = <span class="keyword">new</span> BeanDefinitionHolder(candidate, beanName);</span><br><span class="line">definitionHolder =</span><br><span class="line">AnnotationConfigUtils.applyScopedProxyMode(scopeMetadata, definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">beanDefinitions.add(definitionHolder);</span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">registerBeanDefinition(definitionHolder, <span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanDefinitions;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取符合的类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;BeanDefinition&gt; <span class="title">findCandidateComponents</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.componentsIndex != <span class="keyword">null</span> &amp;&amp; indexSupportsIncludeFilters()) &#123;</span><br><span class="line"><span class="keyword">return</span> addCandidateComponentsFromIndex(<span class="keyword">this</span>.componentsIndex, basePackage);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> scanCandidateComponents(basePackage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;BeanDefinition&gt; <span class="title">scanCandidateComponents</span><span class="params">(String basePackage)</span> </span>&#123;</span><br><span class="line">Set&lt;BeanDefinition&gt; candidates = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//使用Resource,拼装一个ant路径,如test包,会创建一个test/**/*.class,就能获取所有该包下的类</span></span><br><span class="line">String packageSearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX</span><br><span class="line">resolveBasePackage(basePackage) + <span class="string">'/'</span> + <span class="keyword">this</span>.resourcePattern;</span><br><span class="line">Resource[] resources = getResourcePatternResolver().getResources(packageSearchPath);</span><br><span class="line"><span class="keyword">boolean</span> traceEnabled = logger.isTraceEnabled();</span><br><span class="line"><span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line"><span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.trace(<span class="string">"Scanning "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (resource.isReadable()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MetadataReader metadataReader = getMetadataReaderFactory().getMetadataReader(resource);</span><br><span class="line"><span class="keyword">if</span> (isCandidateComponent(metadataReader)) &#123;</span><br><span class="line"><span class="comment">//ScannedGenericBeanDefinition(sbd)创建</span></span><br><span class="line">ScannedGenericBeanDefinition sbd = <span class="keyword">new</span> ScannedGenericBeanDefinition(metadataReader);</span><br><span class="line">sbd.setResource(resource);</span><br><span class="line">sbd.setSource(resource);</span><br><span class="line"><span class="keyword">if</span> (isCandidateComponent(sbd)) &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Identified candidate component class: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">candidates.add(sbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">logger.debug(<span class="string">"Ignored because not a concrete top-level class: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.trace(<span class="string">"Ignored because not matching any filter: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to read candidate component class: "</span> + resource, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (traceEnabled) &#123;</span><br><span class="line">logger.trace(<span class="string">"Ignored because not readable: "</span> + resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"I/O failure during classpath scanning"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> candidates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Import注解处理</li></ul>  <figure class="highlight java"><figcaption><span>ConfigurationClassParser</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于@import注解有关的类,这些类关系不是很复杂,简单来说就是传递一些要加入的bean的信息</span></span><br><span class="line"><span class="comment">//ImportSelector:用来返回要注册的bean的String</span></span><br><span class="line"><span class="comment">//在ConfigurationClassParser有5个辅助用的内部类</span></span><br><span class="line"><span class="comment">//DeferredImportSelectorHolder:包装ImportSelector和configurationClass</span></span><br><span class="line"><span class="comment">//DeferredImportSelectorHandler:包装上者的list</span></span><br><span class="line"><span class="comment">//DeferredImportSelectorGrouping:包装Group</span></span><br><span class="line"><span class="comment">//DeferredImportSelectorGroupingHandler:包装上者list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  [1] ImportSelector类型进行hander,以获取更多的group</span></span><br><span class="line"><span class="comment"> *  [2] 一般类型则当做Config进行解析,实际上无论是否是Config类型,都会加入到Classes中等待注册</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">        *  SpringBoot会提供一个AutoConfigurationImportSelector,它会将META下所有的spring.factory不分</span></span><br><span class="line"><span class="comment"> * type加入到group中,供后边进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processImports</span><span class="params">(ConfigurationClass configClass, SourceClass currentSourceClass,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;SourceClass&gt; importCandidates, <span class="keyword">boolean</span> checkForCircularImports)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (importCandidates.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;</span><br><span class="line"><span class="keyword">this</span>.problemReporter.error(<span class="keyword">new</span> CircularImportProblem(configClass, <span class="keyword">this</span>.importStack));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.importStack.push(configClass);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (SourceClass candidate : importCandidates) &#123;</span><br><span class="line"><span class="keyword">if</span> (candidate.isAssignable(ImportSelector<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Selector类型</span></span><br><span class="line"><span class="comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span></span><br><span class="line">Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line"></span><br><span class="line">ImportSelector selector = BeanUtils.instantiateClass(candidateClass, ImportSelector<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">selector, <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line"><span class="keyword">if</span> (selector <span class="keyword">instanceof</span> DeferredImportSelector) &#123;</span><br><span class="line"><span class="comment">//Deferred类型则加入到Handler中</span></span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.handle(</span><br><span class="line">configClass, (DeferredImportSelector) selector);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//否则递归调用</span></span><br><span class="line">String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());</span><br><span class="line">Collection&lt;SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames);</span><br><span class="line">processImports(configClass, currentSourceClass, importSourceClasses, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line"><span class="comment">// delegate to it to register additional bean definitions</span></span><br><span class="line">Class&lt;?&gt; candidateClass = candidate.loadClass();</span><br><span class="line">ImportBeanDefinitionRegistrar registrar =</span><br><span class="line">BeanUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">ParserStrategyUtils.invokeAwareMethods(</span><br><span class="line">registrar, <span class="keyword">this</span>.environment, <span class="keyword">this</span>.resourceLoader, <span class="keyword">this</span>.registry);</span><br><span class="line">`configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span></span><br><span class="line"><span class="comment">// process it as an @Configuration class</span></span><br><span class="line"><span class="comment">// 注意看,如果该该类型与select无关,则直接把它当做配置类型用来,可以回去看处理Conf的代码,</span></span><br><span class="line"><span class="comment">// 最后一步将class加入到了ConfigClasses中,这个map最后会被注册</span></span><br><span class="line"><span class="keyword">this</span>.importStack.registerImport(</span><br><span class="line">currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());</span><br><span class="line">processConfigurationClass(candidate.asConfigClass(configClass));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to process import candidates for configuration class ["</span> +</span><br><span class="line">configClass.getMetadata().getClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.importStack.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;</span><br><span class="line">BeanDefinition bd = holder.getBeanDefinition();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AnnotatedBeanDefinition) &#123;</span><br><span class="line">parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bd <span class="keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;</span><br><span class="line">parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">parse(bd.getBeanClassName(), holder.getBeanName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to parse configuration class ["</span> + bd.getBeanClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当处理完一个Config类之后,开始处理Import</span></span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectorHandler.process();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理内部</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredImportSelectorHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;DeferredImportSelectorHolder&gt; deferredImports = <span class="keyword">this</span>.deferredImportSelectors;</span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectors = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (deferredImports != <span class="keyword">null</span>) &#123;</span><br><span class="line">DeferredImportSelectorGroupingHandler handler = <span class="keyword">new</span> DeferredImportSelectorGroupingHandler();</span><br><span class="line">deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span><br><span class="line"><span class="comment">//填充deferredImports</span></span><br><span class="line">deferredImports.forEach(handler::register);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">handler.processGroupImports();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.deferredImportSelectors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredImportSelectorGroupingHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processGroupImports</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (DeferredImportSelectorGrouping grouping : <span class="keyword">this</span>.groupings.values()) &#123;</span><br><span class="line"><span class="comment">//遍历group,调用getImport(),遍历其中的entry,</span></span><br><span class="line">grouping.getImports().forEach(entry -&gt; &#123;</span><br><span class="line">ConfigurationClass configurationClass = <span class="keyword">this</span>.configurationClasses.get(</span><br><span class="line">entry.getMetadata());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//将group#entry的每一组都去调用processImports逻辑</span></span><br><span class="line">processImports(configurationClass, asSourceClass(configurationClass),</span><br><span class="line">asSourceClasses(entry.getImportClassName()), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Failed to process import candidates for configuration class ["</span> +</span><br><span class="line">configurationClass.getMetadata().getClassName() + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConfigurationClassBeanDefinitionReader 处理Classes</li></ul>  <figure class="highlight java"><figcaption><span>ConfigurationClassBeanDefinitionReader</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历目标</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(Set&lt;ConfigurationClass&gt; configurationModel)</span> </span>&#123;</span><br><span class="line">TrackedConditionEvaluator trackedConditionEvaluator = <span class="keyword">new</span> TrackedConditionEvaluator();</span><br><span class="line"><span class="keyword">for</span> (ConfigurationClass configClass : configurationModel) &#123;</span><br><span class="line">loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Read a particular &#123;<span class="doctag">@link</span> ConfigurationClass&#125;, registering bean definitions</span></span><br><span class="line"><span class="comment"> * for the class itself and all of its &#123;<span class="doctag">@link</span> Bean&#125; methods.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitionsForConfigurationClass</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;</span><br><span class="line">String beanName = configClass.getBeanName();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="keyword">this</span>.registry.containsBeanDefinition(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.registry.removeBeanDefinition(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理import类型,并进行注册</span></span><br><span class="line"><span class="keyword">if</span> (configClass.isImported()) &#123;</span><br><span class="line">registerBeanDefinitionForImportedConfigurationClass(configClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此处处理@Bean</span></span><br><span class="line"><span class="keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;</span><br><span class="line">loadBeanDefinitionsForBeanMethod(beanMethod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加载@ImportResource</span></span><br><span class="line">loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());</span><br><span class="line">loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>AutowiredAnnotationBeanPostProcessor</li><li>CommonAnnotationBeanPostProcessor</li><li>PersistenceAnnotationBeanPostProcessor</li><li>EventListenerMethodProcessor</li><li>DefaultEventListenerFactory</li></ul><h5 id="待整理内容"><a class="header-anchor" href="#待整理内容">¶</a>待整理内容</h5><ul><li>JSR250:指javax.annation包中的注解,如postConstruct</li><li>JSR330:指javax.inject包,用来用来替代ioc框架中的注解,以达到通配</li><li>JPA:需要多个依赖,使用spring-boot-starter-data-jpa这个依赖就可以解决这些问题</li><li>AliasFor注解:参考<a href="https://www.jianshu.com/p/869ed7037833" target="_blank" rel="noopener">AliasFor</a></li><li>注解的实质:参考<a href="https://www.zhihu.com/question/24401191" target="_blank" rel="noopener">注解是怎么实现的</a></li><li>@Repeatable:jdk8新增的注解,实现单个注解重复使用</li><li>JSR303:验证注解</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven学习</title>
      <link href="/2019/08/11/maven%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/08/11/maven%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>关于maven的使用和概念不是本文要探讨的问题,这里解决的问题是maven依赖关系和继承传递相关问题</p><h4 id="简单概念"><a class="header-anchor" href="#简单概念">¶</a>简单概念</h4><ul><li>子项目可以直接引用父pom依赖</li></ul><h4 id="optional和exclude"><a class="header-anchor" href="#optional和exclude">¶</a>optional和exclude</h4><p>简单来说optional用来控制是否传递该依赖,<code>true</code>表示不会直接传递该依赖</p><ol><li>创建一个pom工程作为前置准备</li></ol><figure class="highlight cmd"><figcaption><span>依赖关系</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   A     B</span><br><span class="line">   |_____|    </span><br><span class="line">      |</span><br><span class="line">      C   </span><br><span class="line">通过install命令将当前模块打包成pom,放置到本地仓库中  </span><br></pre></td></tr></table></figure><figure class="highlight xml"><figcaption><span>C.pom</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.light<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.light<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>B<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块A</span></span><br><span class="line"><span class="keyword">package</span> com.light.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">aTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"atest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块B</span></span><br><span class="line"><span class="keyword">package</span> com.light.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"bTest"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模块C</span></span><br><span class="line"><span class="keyword">import</span> com.light.a.ATest;</span><br><span class="line"><span class="keyword">import</span> com.light.b.BTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cTest use"</span>);</span><br><span class="line">        ATest.aTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cTest2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cTest use"</span>);</span><br><span class="line">        BTest.bTest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>将这个工程当作第三方依赖,构建一个新的pom项目</li></ol><figure class="highlight xml"><figcaption><span>mavenTest2.pom</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.light<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mavenTest2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.light<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>C<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.light<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>A<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该工程来验证代码</p><figure class="highlight java"><figcaption><span>代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CTest.cTest1();</span><br><span class="line">        CTest.cTest2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="comment">//cTest use</span></span><br><span class="line"><span class="comment">//atest</span></span><br><span class="line"><span class="comment">//cTest use</span></span><br><span class="line"><span class="comment">//Exception in thread "main" java.lang.NoClassDefFoundError: BTest</span></span><br><span class="line"><span class="comment">//查看java执行命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//"C:\Program Files\Java\jdk-12\bin\java.exe"   </span></span><br><span class="line"><span class="comment">// classpath "F:\code\mavenTest2\target\classes;</span></span><br><span class="line"><span class="comment">// C:\Users\Administrator\.m2\repository\com\light\C\1.0-SNAPSHOT\C-1.0-SNAPSHOT.jar;</span></span><br><span class="line"><span class="comment">//C:\Users\Administrator\.m2\repository\com\light\A\1.0-SNAPSHOT\A-1.0-SNAPSHOT.jar;</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>这个例子明确说明几点</p><ul><li>javac命令的理解:<ul><li>仅仅会处理目标(可以理解为当前项目)的依赖关系,只要满足直接依赖关系就能够通过编译.</li><li>如该例子中mavenTest2–&gt;C 并没有对于A,B的依赖,因此即使没有A,B的依赖依旧能够通过编译,在运行时抛出异常</li><li>这里更加说明了javac编译过程对于非本类的信息仅仅是记录了符号引用,具体可以通过javap -v去研究</li></ul></li><li>maven工具本质:<ul><li>还是围绕javac 和java本身进行一些外围处理,该例子中mavenTest2的直接引用是C,由于使用了<code>optional</code>,因此</li><li>通过maven执行的java命令是没有指定B的classPath</li></ul></li><li>带有optional的依赖pom被其他项目引用时,是不会主动下载引用的,典型的spring中log4j的使用方式,使用optional和类加载器实现(貌似没有调用spi)</li></ul><figure class="highlight xml"><figcaption><span>spring-jcl.pom</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Commons Logging Bridge<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Commons Logging Bridge<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/spring-projects/spring-framework<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring IO<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://projects.spring.io/spring-framework<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jhoeller<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Juergen Hoeller<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span>jhoeller@pivotal.io<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">connection</span>&gt;</span>scm:git:git://github.com/spring-projects/spring-framework<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>scm:git:git://github.com/spring-projects/spring-framework<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/spring-projects/spring-framework<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system</span>&gt;</span>Jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jira.springsource.org/browse/SPR<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个pom是spring项目大部分pom引用的顶层,简要的说,关注<code>&lt;optional&gt;true&lt;/optional&gt;</code>表示<code>log4j2</code>和<code>slf4j</code>都是不向下传递的,<br>对于spring构建者来说,他们完成了编译工作,至此:</p><ol><li>当我们使用maven构建spring项目时,spring中带有<code>&lt;optional&gt;true&lt;/optional&gt;</code>的依赖不会被引入到项目中,如果我们不引入日志api,则在spring中不会有日志输出</li><li>可以仔细观察idea的依赖,maven不会主动下载’<optional>true</optional>’这样的依赖.<br>具体spring如何使用spi方式(实际上不是spi api)动态确定log框架</li></ol><figure class="highlight java"><figcaption><span>LogAdapter.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.commons.logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.LogRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.ExtendedLogger;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.spi.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.spi.LocationAwareLogger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring's common JCL adapter behind &#123;<span class="doctag">@link</span> LogFactory&#125; and &#123;<span class="doctag">@link</span> LogFactoryService&#125;.</span></span><br><span class="line"><span class="comment"> * Detects the presence of Log4j 2.x / SLF4J, falling back to &#123;<span class="doctag">@code</span> java.util.logging&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LogApi logApi = LogApi.JUL;</span><br><span class="line"><span class="comment">//简单来说spring没有直接使用spi即ServiceLoader.java,这个东西比较简单,以后再说</span></span><br><span class="line"><span class="comment">//spirng采用了直接使用 类加载器来加载可能存在的log框架</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">ClassLoader cl = LogAdapter<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try Log4j 2.x API</span></span><br><span class="line">cl.loadClass(<span class="string">"org.apache.logging.log4j.spi.ExtendedLogger"</span>);</span><br><span class="line">logApi = LogApi.LOG4J;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex1) &#123;<span class="comment">//该异常不是运行时异常,在类加载时抛出</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try SLF4J 1.7 SPI</span></span><br><span class="line">cl.loadClass(<span class="string">"org.slf4j.spi.LocationAwareLogger"</span>);</span><br><span class="line">logApi = LogApi.SLF4J_LAL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex2) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// Try SLF4J 1.7 API</span></span><br><span class="line">cl.loadClass(<span class="string">"org.slf4j.Logger"</span>);</span><br><span class="line">logApi = LogApi.SLF4J;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex3) &#123;</span><br><span class="line"><span class="comment">// Keep java.util.logging as default</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><optional>的使用场景就是上述的例子</li><li><exclude> 就是给任意pom拒绝某个依赖的能力</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hbase</title>
      <link href="/2019/07/17/hbase/"/>
      <url>/2019/07/17/hbase/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>本文要解决的问题</p><ul><li>hbase概念</li><li>hbase和传统RDBMS数据库相比较的不同</li><li>hbase连接池问题</li></ul><h5 id="基础概念"><a class="header-anchor" href="#基础概念">¶</a>基础概念</h5><ul><li>rowkey: 通过该列来表示一个行数据</li><li>column family:表示一个族</li><li>qualifier:表示族中的一个key</li><li>version:每一个value可以有不同的版本</li></ul><p>例如:建立一张用户表,ID,姓,名,密码</p><table><thead><tr><th>ID</th><th>姓</th><th>名</th><th>密码</th><th>时间戳</th></tr></thead><tbody><tr><td>1</td><td>张</td><td>三</td><td>111</td><td>20160102</td></tr><tr><td>2</td><td>李</td><td>四</td><td>222</td><td>20130214</td></tr></tbody></table><center>关系型数据库</center><table><thead><tr><th>Row-Key</th><th>Value(CF,Qualifier,Version)</th></tr></thead><tbody><tr><td>1</td><td>info{‘姓’:‘张’,‘名’:‘三’} pwd:{‘密码’:111}</td></tr><tr><td>2</td><td>info{‘姓’:‘李’,‘名’:‘四’} pwd:{‘密码’:222}</td></tr></tbody></table><center>hbase(逻辑上)</center><ul><li>解释: 实际上在物理磁盘上hbase并不是如此储存数据的,只是根据rowkey将数据组织在一起,这里info,pwd就是cf, ‘姓’,'名’就是qualifier</li></ul><h5 id="java-api和hbase的交互"><a class="header-anchor" href="#java-api和hbase的交互">¶</a>java api和hbase的交互</h5><ul><li>通过Htable来交互,实际上最终交互的对象是HConnection</li></ul><figure class="highlight java"><figcaption><span>HTable</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HTable</span><span class="params">(Configuration conf, <span class="keyword">final</span> <span class="keyword">byte</span>[] tableName)</span></span></span><br><span class="line"><span class="function"> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(conf, TableName.valueOf(tableName));</span><br><span class="line"> &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HTable</span><span class="params">(Configuration conf, <span class="keyword">final</span> TableName tableName)</span></span></span><br><span class="line"><span class="function"> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.tableName = tableName;</span><br><span class="line">   <span class="keyword">this</span>.cleanupPoolOnClose = <span class="keyword">this</span>.cleanupConnectionOnClose = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">if</span> (conf == <span class="keyword">null</span>) &#123;</span><br><span class="line">     <span class="keyword">this</span>.connection = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">this</span>.connection = HConnectionManager.getConnection(conf);</span><br><span class="line">   <span class="keyword">this</span>.configuration = conf;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.pool = getDefaultExecutor(conf);</span><br><span class="line">   <span class="keyword">this</span>.finishSetup();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//交互方式,由HTable封装的函数就能够于数据库交互</span></span><br><span class="line">  <span class="keyword">public</span> Result[] get(List&lt;Get&gt; gets) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   <span class="keyword">if</span> (gets.size() == <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> Result[]&#123;get(gets.get(<span class="number">0</span>))&#125;;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     Object [] r1 = batch((List)gets); <span class="comment">//调用HConnect进行处理</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// translate.</span></span><br><span class="line">     Result [] results = <span class="keyword">new</span> Result[r1.length];</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (Object o : r1) &#123;</span><br><span class="line">       <span class="comment">// batch ensures if there is a failure we get an exception instead</span></span><br><span class="line">       results[i++] = (Result) o;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> results;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">     <span class="keyword">throw</span> (InterruptedIOException)<span class="keyword">new</span> InterruptedIOException().initCause(e);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>Scan的作用,用来处理返回数据类型,处理的逻辑在迭代过程中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个查询的例子</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;JSONObject&gt; <span class="title">getAllDataFromTable</span><span class="params">(String tableName)</span> </span>&#123;</span><br><span class="line">List&lt;JSONObject&gt; dataJsonList = <span class="keyword">new</span> ArrayList&lt;JSONObject&gt;();</span><br><span class="line"><span class="comment">//HTableInterface是HTable的父类接口</span></span><br><span class="line">HTableInterface hTableInterface = tablePool.getTable(tableName); <span class="comment">//这里引入了表池的概念,实际该类被废弃了</span></span><br><span class="line">ResultScanner rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs = hTableInterface.getScanner(<span class="keyword">new</span> Scan());<span class="comment">//获取Scanner</span></span><br><span class="line"><span class="keyword">for</span> (Result result : rs) &#123;<span class="comment">//迭代过程中发生了连接并获取数据</span></span><br><span class="line">JSONObject dataJsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">String rowkey = <span class="keyword">new</span> String(result.getRow());</span><br><span class="line">dataJsonObject.put(<span class="string">"rowkey"</span>, rowkey);</span><br><span class="line"><span class="keyword">for</span> (KeyValue keyValue : result.raw()) &#123;</span><br><span class="line">dataJsonObject.put(<span class="keyword">new</span> String(keyValue.getQualifier()),</span><br><span class="line"><span class="keyword">new</span> String(keyValue.getValue()));</span><br><span class="line">&#125;</span><br><span class="line">dataJsonList.add(dataJsonObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//log.error("getAllDataFromTable() IOException :: ", e);</span></span><br><span class="line">System.out.println(<span class="string">"getAllDataFromTable() IOException"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">rs.close();<span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dataJsonList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aop</title>
      <link href="/2019/05/25/aop/"/>
      <url>/2019/05/25/aop/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><ul><li>springAop和AspectJ的关系<br>在spring的aop模块中提供了切面编程实际上都是一种动态代理机制<br>从实现来说一种是jdk代理,一种是cglib<br>从语法上讲一种是使用aopalliance定义的advice来实现,一种是spring使用aspectj语法来实现<br>从spring底层机制来说无论是直接使用aspectj语法还是使用advice类,过程都是将advisor转换成Interceptor的过程</li><li>真正的AspectJ<br>spring提供了<code>spring.aspectJ</code>模块与其集成,AspectJ使用参考<a href="https://blog.mythsman.com/post/5d301cf2976abc05b34546be/" target="_blank" rel="noopener">AspectJ</a></li></ul><h3 id="spring中aop的实现"><a class="header-anchor" href="#spring中aop的实现">¶</a>spring中aop的实现</h3><h4 id="从ProxyFactory开始"><a class="header-anchor" href="#从ProxyFactory开始">¶</a>从ProxyFactory开始</h4><img src="/2019/05/25/aop/ProxyFactory.png" class=""><ul><li>Advised接口表示包含了Interceptors|advice|advices|以及代理接口</li><li>Support都是包含了有效信息,提供组装的接口<br>例子:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该例子使用了jdk代理</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">     factory.setTarget(<span class="keyword">new</span> MyProxyInstance());</span><br><span class="line">       factory.setInterfaces(ProxyInterface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       factory.addAdvice(<span class="keyword">new</span> BeforeMethod());</span><br><span class="line">       factory.addAdvice(<span class="keyword">new</span> AfterMethod());</span><br><span class="line">       factory.addAdvice(<span class="keyword">new</span> ThrowsAd());</span><br><span class="line">       factory.addAdvice(<span class="keyword">new</span> AroundMethod());</span><br><span class="line">       factory.addAdvice(<span class="keyword">new</span> IntrodcutionAdvice()); <span class="comment">//引介增强</span></span><br><span class="line">       <span class="keyword">this</span>.&lt;ProxyInterface&gt;getProxy().test();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="术语和类"><a class="header-anchor" href="#术语和类">¶</a>术语和类</h5><ul><li>术语<ul><li>JoinPoint连接点,实际就是指的方法,其衍生的类有MethodInvocation表示一个方法调用</li><li>PointCut 切点,描述如何匹配位置,内部包含ClassFilter用来匹配类,MethodMatcher用来匹配方法</li><li>Advice 增强</li><li>Advisor 切面 包含了切点和增强,spring用PointCutAdvisor描述</li><li>拦截器 就是spring将advisor转换成动态代理时调用的逻辑</li></ul></li></ul><h5 id="类"><a class="header-anchor" href="#类">¶</a>类</h5><p>spring提供了基本五种advice可以通过实现方式不同做一个细分</p><ul><li>基本的非Introduction的advice<ul><li>MethodBeforeAdvice<img src="/2019/05/25/aop/BeforeAdvice.png" class=""></li><li>AfterReturningAdvice<img src="/2019/05/25/aop/afterRunnging.png" class=""></li><li>ThrowsAdvice<img src="/2019/05/25/aop/ThrowsAdvice.png" class=""></li><li>MethodInterceptor<img src="/2019/05/25/aop/MethodInterceptor.png" class="">  </li></ul></li><li>Introduction类型的增强,实际就是添加了代理接口<ul><li>该类在初始化时会获取实现类的直接父接口,也就是用户要增强的接口,源码在构造器部分,不写出来了</li></ul></li></ul><img src="/2019/05/25/aop/DelegatingIntroductionInterceptor.png" class="">    <p>可以直观的看到上述5个接口其中环绕和引介本身都属于拦截器</p><h5 id="advice到advisor的转换"><a class="header-anchor" href="#advice到advisor的转换">¶</a>advice到advisor的转换</h5><p>该阶段发生在向ProxyFactory添加advice时,当然用户可以直接添加advisor</p><figure class="highlight java"><figcaption><span>AdvisedSupport</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAdvice</span><span class="params">(Advice advice)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="keyword">this</span>.advisors.size();</span><br><span class="line">addAdvice(pos, advice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAdvice</span><span class="params">(<span class="keyword">int</span> pos, Advice advice)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (advice <span class="keyword">instanceof</span> IntroductionInfo) &#123; <span class="comment">//实际上我们实现的引介增强提供了要代理的接口</span></span><br><span class="line"><span class="comment">// We don't need an IntroductionAdvisor for this kind of introduction:</span></span><br><span class="line"><span class="comment">// It's fully self-describing.</span></span><br><span class="line">addAdvisor(pos, <span class="keyword">new</span> DefaultIntroductionAdvisor(advice, (IntroductionInfo) advice));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (advice <span class="keyword">instanceof</span> DynamicIntroductionAdvice) &#123; <span class="comment">//不能直接添加这种引介</span></span><br><span class="line"><span class="comment">// We need an IntroductionAdvisor for this kind of introduction.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"DynamicIntroductionAdvice may only be added as part of IntroductionAdvisor"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="comment">//非Introduction类型</span></span><br><span class="line">addAdvisor(pos, <span class="keyword">new</span> DefaultPointcutAdvisor(advice));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理IntroductionInfo类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAdvisor</span><span class="params">(<span class="keyword">int</span> pos, Advisor advisor)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">validateIntroductionAdvisor((IntroductionAdvisor) advisor);</span><br><span class="line">&#125;</span><br><span class="line">addAdvisorInternal(pos, advisor);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从IntroductionAdvisor获取要增强的接口</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateIntroductionAdvisor</span><span class="params">(IntroductionAdvisor advisor)</span> </span>&#123;</span><br><span class="line">advisor.validateInterfaces();</span><br><span class="line"><span class="comment">// If the advisor passed validation, we can make the change.</span></span><br><span class="line">Class&lt;?&gt;[] ifcs = advisor.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; ifc : ifcs) &#123;</span><br><span class="line">addInterface(ifc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引介基本Advisor</p><img src="/2019/05/25/aop/DefaultIntroductionAdvisor.png" class=""><p>注意增强advice匹配条件仅仅是类,因此该advisor并不是<code>PointCut</code>子类,仅仅是<code>ClassFilter</code>子类</p><figure class="highlight java"><figcaption><span>DefaultIntroductionAdvisor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二个参数一般情况就是用户实现的接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultIntroductionAdvisor</span><span class="params">(Advice advice, @Nullable IntroductionInfo introductionInfo)</span> </span>&#123;</span><br><span class="line">Assert.notNull(advice, <span class="string">"Advice must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.advice = advice;</span><br><span class="line"><span class="keyword">if</span> (introductionInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">Class&lt;?&gt;[] introducedInterfaces = introductionInfo.getInterfaces(); <span class="comment">//获取增加的接口</span></span><br><span class="line"><span class="keyword">if</span> (introducedInterfaces.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"IntroductionAdviceSupport implements no interfaces"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; ifc : introducedInterfaces) &#123;</span><br><span class="line">addInterface(ifc); <span class="comment">//将信息的接口添加进set</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultPointcutAdvisor:典型的PointCutAdvisor,由 内部PointCut决定匹配</p><figure class="highlight java"><figcaption><span>DefaultPointcutAdvisor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DefaultPointcutAdvisor</span><span class="params">(Advice advice)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(Pointcut.TRUE, advice); <span class="comment">//Pointcut默认匹配所有Class的任意Method</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring支持的代理模式"><a class="header-anchor" href="#spring支持的代理模式">¶</a>spring支持的代理模式</h4><p>jdk Proxy和cglib</p><figure class="highlight java"><figcaption><span>ProxyFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[1] 外部接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createAopProxy().getProxy();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[2] aop代理</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">activate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>); <span class="comment">//ProxyFactory本身就是一个配置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类DefaultAopProxyFactory,通过代理AopProxyFactory创建AopProxy</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line"><span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户没有提供要代理的接口,即config#interfaces为空或者只有SpringProxy接口被代理</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNoUserSuppliedProxyInterfaces</span><span class="params">(AdvisedSupport config)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] ifcs = config.getProxiedInterfaces();</span><br><span class="line">return (ifcs.length == 0 || (ifcs.length == 1 &amp;&amp; SpringProxy.class.isAssignableFrom(ifcs[0])));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>spring提供了两种代理 jdk和cglib,前者的实现导致只能对接口进行代理,后者可以对类进行代理</li><li>设置ProxyTargetClass=true,表示接受目标是类时,直接代理和代理接口一样;一般来当传递的target为类,这样就是开启cglib.</li><li>&lt;aop:aspectj-autoproxy proxy-target-class=“true”/&gt; | @EnableAspectJAutoProxy(proxyTargetClass = true)</li></ul><h5 id="JDK-proxy"><a class="header-anchor" href="#JDK-proxy">¶</a>JDK proxy</h5><h6 id="开启jdk代理"><a class="header-anchor" href="#开启jdk代理">¶</a>开启jdk代理</h6><ul><li>jdk代理过程中,将target作为最终原本调用的代理对象,可以参看proxy代理部分,也就是说该对象不指定或者并不是接口对象,那么必定会导致最终调用异常</li><li>只有主动调用setInterfaces才能启用jdk代理,否则就是cglib代理,当然除去代理对象本身就是个接口(会抛出异常),或者代理对象本身是个Proxy类(即jdk proxy生成的类)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ProxyFactory factory=<span class="keyword">new</span> ProxyFactory();</span><br><span class="line">    <span class="comment">//关于spring jdk代理</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  (T)factory.getProxy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test0</span><span class="params">()</span></span>&#123;</span><br><span class="line">        factory.setTarget(<span class="keyword">new</span> NoInterface());</span><br><span class="line">        factory.setInterfaces(<span class="keyword">new</span> Class[]&#123;ProxyInterface<span class="class">.<span class="keyword">class</span>,<span class="title">ProxyInterface2</span>.<span class="title">class</span>&#125;)</span>;</span><br><span class="line">        <span class="keyword">this</span>.&lt;ProxyInterface&gt;getProxy().test(); <span class="comment">//此处会跳出异常</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="调用逻辑"><a class="header-anchor" href="#调用逻辑">¶</a>调用逻辑</h6><ul><li>注意该类本身就是一个InvocationHandler,因此其invoke函数就是支持代理执行的逻辑</li></ul><figure class="highlight java"><figcaption><span>JdkDynamicAopProxy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAopProxy</span> <span class="keyword">implements</span> <span class="title">AopProxy</span>, <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getProxy(ClassUtils.getDefaultClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Creating JDK dynamic proxy: "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//advised即ProxyFactory本身,该函数生成了该代理模式下生成的所有接口</span></span><br><span class="line">Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//确定是否重写了equals和hash方法</span></span><br><span class="line">findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line"><span class="comment">//jdk代理</span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring如何获取代理接口的<ul><li>这个函数说明的问题是,想使用jdk proxy的动作是主动添加interface,而不是仅仅传递target,spring并没有主动解析目标类的父接口</li></ul></li></ul><figure class="highlight java"><figcaption><span>AopProxyUtils</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt;[] completeProxiedInterfaces(AdvisedSupport advised, <span class="keyword">boolean</span> decoratingProxy) &#123;</span><br><span class="line">Class&lt;?&gt;[] specifiedInterfaces = advised.getProxiedInterfaces();</span><br><span class="line"><span class="comment">//当用户没有提供代理接口时,检查是否代理对象是一个proxy</span></span><br><span class="line"><span class="keyword">if</span> (specifiedInterfaces.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// No user-specified interfaces: check whether target class is an interface.</span></span><br><span class="line">Class&lt;?&gt; targetClass = advised.getTargetClass();</span><br><span class="line"><span class="keyword">if</span> (targetClass != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (targetClass.isInterface()) &#123;</span><br><span class="line">advised.setInterfaces(targetClass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">advised.setInterfaces(targetClass.getInterfaces());</span><br><span class="line">&#125;</span><br><span class="line">specifiedInterfaces = advised.getProxiedInterfaces();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> addSpringProxy = !advised.isInterfaceProxied(SpringProxy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">boolean</span> addAdvised = !advised.isOpaque() &amp;&amp; !advised.isInterfaceProxied(Advised<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">boolean</span> addDecoratingProxy = (decoratingProxy &amp;&amp; !advised.isInterfaceProxied(DecoratingProxy<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"><span class="keyword">int</span> nonUserIfcCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//spring会主动添加三个代理接口 SpringProxy   | Advised   |DecoratingProxy</span></span><br><span class="line"><span class="keyword">if</span> (addSpringProxy) &#123;</span><br><span class="line">nonUserIfcCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (addAdvised) &#123;</span><br><span class="line">nonUserIfcCount++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (addDecoratingProxy) &#123;</span><br><span class="line">nonUserIfcCount++;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt;[] proxiedInterfaces = <span class="keyword">new</span> Class&lt;?&gt;[specifiedInterfaces.length + nonUserIfcCount];</span><br><span class="line">System.arraycopy(specifiedInterfaces, <span class="number">0</span>, proxiedInterfaces, <span class="number">0</span>, specifiedInterfaces.length);</span><br><span class="line"><span class="keyword">int</span> index = specifiedInterfaces.length;</span><br><span class="line"><span class="keyword">if</span> (addSpringProxy) &#123;</span><br><span class="line">proxiedInterfaces[index] = SpringProxy<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (addAdvised) &#123;</span><br><span class="line">proxiedInterfaces[index] =  <span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (addDecoratingProxy) &#123;</span><br><span class="line">proxiedInterfaces[index] = DecoratingProxy<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> proxiedInterfaces;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JdkDynamicAopProxy#invoke,这是代理逻辑</li></ul><figure class="highlight java"><figcaption><span>JdkDynamicAopProxy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">MethodInvocation invocation;</span><br><span class="line">Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//此处体现了目标源</span></span><br><span class="line">TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</span><br><span class="line">Object target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">       <span class="comment">//没有重写equals,调用Object#equals</span></span><br><span class="line"><span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line"><span class="comment">//同上</span></span><br><span class="line"><span class="keyword">return</span> hashCode();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果调用是DecoratingProxy#getDeclaringClass则调用如下函数</span></span><br><span class="line"><span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="keyword">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">method.getDeclaringClass().isAssignableFrom(Advised<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line"><span class="comment">// 这个函数的逻辑实际就是调用method.invoke,jdk反射调用函数</span></span><br><span class="line"><span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object retVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line"><span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取代理目标</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line">Class&lt;?&gt; targetClass = (target != <span class="keyword">null</span> ? target.getClass() : <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取拦截链,这是核心逻辑之一</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//如果拦截链为空,则调用反射</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line"><span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line"><span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//创建一个使用拦截逻辑的方法调用,核心逻辑之一</span></span><br><span class="line">invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Massage return value if necessary.</span></span><br><span class="line">Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line"><span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">returnType != Object<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">returnType</span>.<span class="title">isInstance</span>(<span class="title">proxy</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">!<span class="title">RawTargetAccess</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line"><span class="comment">// Special case: it returned "this" and the return type of the method</span></span><br><span class="line"><span class="comment">// is type-compatible. Note that we can't help if the target sets</span></span><br><span class="line"><span class="comment">// a reference to itself in another returned object.</span></span><br><span class="line">retVal = proxy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</span><br><span class="line"><span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line"><span class="comment">// Must have come from TargetSource.</span></span><br><span class="line">targetSource.releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line"><span class="comment">// Restore old proxy.</span></span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>说明此处的<code>targetSource</code>,如果使用spring中jdk代理不提供源|或者目标源和代理接口并非实现关系,那么当真正函数调用时spring会抛出异常,<br>这里实际上就是我在<a href="/2019/05/22/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#%E6%80%BB%E7%BB%93">jdk动态代理</a>提及的若不提供源,那么代理无意义.</li><li>获取拦截链<br>这里的逻辑剥离了advisor,其中切点用来筛选,而advice用来创建拦截链</li></ul><figure class="highlight java"><figcaption><span>AdvisedSupport</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存机制  method-拦截链</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">MethodCacheKey cacheKey = <span class="keyword">new</span> MethodCacheKey(method);</span><br><span class="line">List&lt;Object&gt; cached = <span class="keyword">this</span>.methodCache.get(cacheKey);</span><br><span class="line"><span class="keyword">if</span> (cached == <span class="keyword">null</span>) &#123;</span><br><span class="line">cached = <span class="keyword">this</span>.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice(</span><br><span class="line"><span class="keyword">this</span>, method, targetClass);</span><br><span class="line"><span class="keyword">this</span>.methodCache.put(cacheKey, cached);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cached;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAdvisorChainFactory</span> <span class="keyword">implements</span> <span class="title">AdvisorChainFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getInterceptorsAndDynamicInterceptionAdvice</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Advised config, Method method, @Nullable Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AdvisorAdapterRegistry用来创建拦截器</span></span><br><span class="line">AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();</span><br><span class="line">Advisor[] advisors = config.getAdvisors();</span><br><span class="line">List&lt;Object&gt; interceptorList = <span class="keyword">new</span> ArrayList&lt;&gt;(advisors.length);</span><br><span class="line">Class&lt;?&gt; actualClass = (targetClass != <span class="keyword">null</span> ? targetClass : method.getDeclaringClass());</span><br><span class="line">Boolean hasIntroductions = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line"><span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> PointcutAdvisor) &#123; <span class="comment">////默认的前置  后置 抛出 环绕 都时这种类型</span></span><br><span class="line"><span class="comment">// Add it conditionally.</span></span><br><span class="line">PointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;</span><br><span class="line"><span class="keyword">if</span> (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) &#123; <span class="comment">//做一次类型匹配</span></span><br><span class="line">MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher(); <span class="comment">//获取方法匹配器</span></span><br><span class="line"><span class="keyword">boolean</span> match;</span><br><span class="line"><span class="keyword">if</span> (mm <span class="keyword">instanceof</span> IntroductionAwareMethodMatcher) &#123; <span class="comment">//不清楚的方法匹配其类型</span></span><br><span class="line"><span class="keyword">if</span> (hasIntroductions == <span class="keyword">null</span>) &#123;</span><br><span class="line">hasIntroductions = hasMatchingIntroductions(advisors, actualClass);</span><br><span class="line">&#125;</span><br><span class="line">match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">match = mm.matches(method, actualClass); <span class="comment">//匹配一次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (match) &#123;</span><br><span class="line">MethodInterceptor[] interceptors = registry.getInterceptors(advisor); <span class="comment">//创造拦截器,返回数组说明用户实现的部分可以属于多个增强</span></span><br><span class="line"><span class="keyword">if</span> (mm.isRuntime()) &#123; <span class="comment">//动态切点则创建动态拦截器</span></span><br><span class="line"><span class="comment">// Creating a new object instance in the getInterceptors() method</span></span><br><span class="line"><span class="comment">// isn't a problem as we normally cache created chains.</span></span><br><span class="line"><span class="keyword">for</span> (MethodInterceptor interceptor : interceptors) &#123;</span><br><span class="line">interceptorList.add(<span class="keyword">new</span> InterceptorAndDynamicMethodMatcher(interceptor, mm));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123; <span class="comment">//引介增强</span></span><br><span class="line">IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line"><span class="keyword">if</span> (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line">Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Interceptor[] interceptors = registry.getInterceptors(advisor);</span><br><span class="line">interceptorList.addAll(Arrays.asList(interceptors));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> interceptorList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine whether the Advisors contain matching introductions.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasMatchingIntroductions</span><span class="params">(Advisor[] advisors, Class&lt;?&gt; actualClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line"><span class="keyword">if</span> (advisor <span class="keyword">instanceof</span> IntroductionAdvisor) &#123;</span><br><span class="line">IntroductionAdvisor ia = (IntroductionAdvisor) advisor;</span><br><span class="line"><span class="keyword">if</span> (ia.getClassFilter().matches(actualClass)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截器创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultAdvisorAdapterRegistry</span> <span class="keyword">implements</span> <span class="title">AdvisorAdapterRegistry</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="keyword">throws</span> UnknownAdviceTypeException &#123;</span><br><span class="line">List&lt;MethodInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">Advice advice = advisor.getAdvice();</span><br><span class="line"><span class="keyword">if</span> (advice <span class="keyword">instanceof</span> MethodInterceptor) &#123; <span class="comment">//环绕 引介本身就是拦截器</span></span><br><span class="line">interceptors.add((MethodInterceptor) advice);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (AdvisorAdapter adapter : <span class="keyword">this</span>.adapters) &#123; <span class="comment">//其他三种通过适配器创建</span></span><br><span class="line"><span class="keyword">if</span> (adapter.supportsAdvice(advice)) &#123;</span><br><span class="line">interceptors.add(adapter.getInterceptor(advisor));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (interceptors.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnknownAdviceTypeException(advisor.getAdvice());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> interceptors.toArray(<span class="keyword">new</span> MethodInterceptor[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>拦截器调用逻辑</li></ul><figure class="highlight java"><figcaption><span>拦截器调用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line"><span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">retVal = invocation.proceed();</span><br><span class="line"><span class="comment">//创建ReflectiveMethodInvocation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectiveMethodInvocation</span> <span class="keyword">implements</span> <span class="title">ProxyMethodInvocation</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ReflectiveMethodInvocation</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">Object proxy, @Nullable Object target, Method method, @Nullable Object[] arguments,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable Class&lt;?&gt; targetClass, List&lt;Object&gt; interceptorsAndDynamicMethodMatchers)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.proxy = proxy; <span class="comment">//代理对象</span></span><br><span class="line"><span class="keyword">this</span>.target = target; <span class="comment">//代理目标</span></span><br><span class="line"><span class="keyword">this</span>.targetClass = targetClass; <span class="comment">//目标class类型</span></span><br><span class="line"><span class="keyword">this</span>.method = BridgeMethodResolver.findBridgedMethod(method); <span class="comment">//方法</span></span><br><span class="line"><span class="keyword">this</span>.arguments = AopProxyUtils.adaptArgumentsIfNecessary(method, arguments); <span class="comment">//参数</span></span><br><span class="line"><span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers = interceptorsAndDynamicMethodMatchers; <span class="comment">//该方法对应的拦截链</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截器的调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">proceed</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">//当拦截器调用结束则使用反射,去调用函数本身,实际就是递归的返回条件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.currentInterceptorIndex == <span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.size() - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> invokeJoinpoint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object interceptorOrInterceptionAdvice =</span><br><span class="line"><span class="keyword">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="keyword">this</span>.currentInterceptorIndex);</span><br><span class="line"><span class="keyword">if</span> (interceptorOrInterceptionAdvice <span class="keyword">instanceof</span> InterceptorAndDynamicMethodMatcher) &#123; <span class="comment">//动态切点就会匹配到这里</span></span><br><span class="line"><span class="comment">// Evaluate dynamic method matcher here: static part will already have</span></span><br><span class="line"><span class="comment">// been evaluated and found to match.</span></span><br><span class="line">InterceptorAndDynamicMethodMatcher dm =</span><br><span class="line">(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;</span><br><span class="line">Class&lt;?&gt; targetClass = (<span class="keyword">this</span>.targetClass != <span class="keyword">null</span> ? <span class="keyword">this</span>.targetClass : <span class="keyword">this</span>.method.getDeclaringClass());</span><br><span class="line"><span class="keyword">if</span> (dm.methodMatcher.matches(<span class="keyword">this</span>.method, targetClass, <span class="keyword">this</span>.arguments)) &#123; <span class="comment">//做一次动态匹配,如果匹配成功就调用</span></span><br><span class="line"><span class="keyword">return</span> dm.interceptor.invoke(<span class="keyword">this</span>); <span class="comment">//调用拦截器中的增强</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果动态拦截器失败则进行下一个拦截</span></span><br><span class="line"><span class="keyword">return</span> proceed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// It's an interceptor, so we just invoke it: The pointcut will have</span></span><br><span class="line"><span class="comment">// been evaluated statically before this object was constructed.</span></span><br><span class="line"><span class="keyword">return</span> ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处对于非动态拦截器采取了一种十分有趣的写法,具体实现不好描述,简单的理解为递归调用<br>默认的5种类型拦截器放置顺序都能保证正确的执行,只是具体顺序有些不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">     factory.setTarget(<span class="keyword">new</span> MyProxyInstance());</span><br><span class="line">        factory.setInterfaces(ProxyInterface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> AroundMethod());</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> AfterMethod());</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> BeforeMethod());</span><br><span class="line">        <span class="keyword">this</span>.&lt;ProxyInterface&gt;getProxy().test();</span><br><span class="line"><span class="comment">//结果:</span></span><br><span class="line"><span class="comment">//test环绕前</span></span><br><span class="line"><span class="comment">//test前执行</span></span><br><span class="line"><span class="comment">//采取jdk proxy</span></span><br><span class="line"><span class="comment">//test执行后</span></span><br><span class="line"><span class="comment">//test环绕后</span></span><br><span class="line">  factory.setTarget(<span class="keyword">new</span> MyProxyInstance());</span><br><span class="line">        factory.setInterfaces(ProxyInterface<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> ThrowsAd());</span><br><span class="line">factory.addAdvice(<span class="keyword">new</span> AfterMethod());</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> AroundMethod());</span><br><span class="line">        <span class="keyword">this</span>.&lt;ProxyInterface&gt;getProxy().test();</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">test环绕前</span><br><span class="line">test前执行</span><br><span class="line">采取jdk proxy</span><br><span class="line">test环绕后</span><br><span class="line">test执行后</span><br></pre></td></tr></table></figure><h6 id="拦截器"><a class="header-anchor" href="#拦截器">¶</a>拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前置拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodBeforeAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">BeforeAdvice</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123; <span class="comment">//mi表示方法调用</span></span><br><span class="line"><span class="keyword">this</span>.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis()); <span class="comment">//调用用户实现</span></span><br><span class="line"><span class="keyword">return</span> mi.proceed();<span class="comment">//可以理解为递归,等待此处循环调用结束,因此before实现的部分一定会在方法调用前被调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后置拦截</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterReturningAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">AfterAdvice</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object retVal = mi.proceed(); <span class="comment">//继续递归执行</span></span><br><span class="line"><span class="keyword">this</span>.advice.afterReturning(retVal, mi.getMethod(), mi.getArguments(), mi.getThis());<span class="comment">//只有递归结束后才能调用,因此该逻辑必然在函数调用后才能被调用</span></span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//环绕拦截实际是一个普通的拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AroundMethod</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Method method= invocation.getMethod();</span><br><span class="line">        Object arg[]= invocation.getArguments();</span><br><span class="line">        System.out.println(method.getName()+<span class="string">"环绕前"</span>);</span><br><span class="line"><span class="comment">//        Object re=method.invoke(invocation.getThis(),arg);  这句代码就会导致递归返回,如果该method拦截链没有调用完,那么就会到此为止</span></span><br><span class="line">        <span class="keyword">var</span> re= invocation.proceed(); <span class="comment">//如此调用就会继续进入拦截链逻辑</span></span><br><span class="line">        System.out.println(method.getName()+<span class="string">"环绕后"</span>);</span><br><span class="line">        <span class="keyword">return</span> re;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异常拦截器,由于ThrowsAdvice是个标记接口,因此在该拦截器中定义用户能够实现的函数模式<br><code>public void afterThrowing(Exception ex)</code><br><code>public void afterThrowing(RemoteException)</code><br><code>public void afterThrowing(Method method, Object[] args, Object target, Exception ex)</code><br><code>public void afterThrowing(Method method, Object[] args, Object target, ServletException ex)</code><br>函数名必须时<code>afterThrowing</code></li></ul><figure class="highlight java"><figcaption><span>ThrowsAdviceInterceptor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsAdviceInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">AfterAdvice</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThrowsAdviceInterceptor</span><span class="params">(Object throwsAdvice)</span> </span>&#123;</span><br><span class="line">Assert.notNull(throwsAdvice, <span class="string">"Advice must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.throwsAdvice = throwsAdvice;</span><br><span class="line"></span><br><span class="line">Method[] methods = throwsAdvice.getClass().getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line"><span class="keyword">if</span> (method.getName().equals(AFTER_THROWING) &amp;&amp;</span><br><span class="line">(method.getParameterCount() == <span class="number">1</span> || method.getParameterCount() == <span class="number">4</span>)) &#123;<span class="comment">//检查函数名和参数</span></span><br><span class="line">Class&lt;?&gt; throwableParam = method.getParameterTypes()[method.getParameterCount() - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (Throwable<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">throwableParam</span>)) </span>&#123; <span class="comment">//若符合</span></span><br><span class="line"><span class="comment">// An exception handler to register...</span></span><br><span class="line"><span class="keyword">this</span>.exceptionHandlerMap.put(throwableParam, method); <span class="comment">//缓存 exception-method的 map</span></span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Found exception handler method on throws advice: "</span> + method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.exceptionHandlerMap.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"At least one handler method must be found in class ["</span> + throwsAdvice.getClass() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拦截链调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mi.proceed(); <span class="comment">//递归逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123; <span class="comment">//当递归返回,并捕获异常后处理</span></span><br><span class="line">Method handlerMethod = getExceptionHandler(ex); <span class="comment">//匹配对应异常的处理函数</span></span><br><span class="line"><span class="keyword">if</span> (handlerMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">invokeHandlerMethod(mi, ex, handlerMethod); <span class="comment">//调用用户实现的handlerMethod</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeHandlerMethod</span><span class="params">(MethodInvocation mi, Throwable ex, Method method)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object[] handlerArgs;</span><br><span class="line"><span class="keyword">if</span> (method.getParameterCount() == <span class="number">1</span>) &#123; <span class="comment">//处理handler会用到的参数</span></span><br><span class="line">handlerArgs = <span class="keyword">new</span> Object[] &#123;ex&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">handlerArgs = <span class="keyword">new</span> Object[] &#123;mi.getMethod(), mi.getArguments(), mi.getThis(), ex&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method.invoke(<span class="keyword">this</span>.throwsAdvice, handlerArgs); <span class="comment">//调用异常处理handler</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InvocationTargetException targetEx) &#123;</span><br><span class="line"><span class="keyword">throw</span> targetEx.getTargetException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引介拦截器</li></ul><figure class="highlight java"><figcaption><span>DelegatingIntroductionInterceptor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingIntroductionInterceptor</span> <span class="keyword">extends</span> <span class="title">IntroductionInfoSupport</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">IntroductionInterceptor</span> </span>&#123;</span><br><span class="line"><span class="comment">//链接链调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isMethodOnIntroducedInterface(mi)) &#123; <span class="comment">//判断此次method是不是增强的函数</span></span><br><span class="line">    <span class="comment">//如果是则调用反射,只是反射的instance是this,就能调用用户实现增强</span></span><br><span class="line">Object retVal = AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.delegate, mi.getMethod(), mi.getArguments());</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果返回的是this则中断递归逻辑</span></span><br><span class="line"><span class="keyword">if</span> (retVal == <span class="keyword">this</span>.delegate &amp;&amp; mi <span class="keyword">instanceof</span> ProxyMethodInvocation) &#123;</span><br><span class="line">Object proxy = ((ProxyMethodInvocation) mi).getProxy();</span><br><span class="line"><span class="keyword">if</span> (mi.getMethod().getReturnType().isInstance(proxy)) &#123;</span><br><span class="line">retVal = proxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//递归逻辑</span></span><br><span class="line"><span class="keyword">return</span> doProceed(mi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="切点"><a class="header-anchor" href="#切点">¶</a>切点</h6><p>切点可以分为 静态切点 | 动态切点 | 流程切点 | 以及默认的全匹配切点|复合切点|匹配name的切点<br>切点实际上就是实现了PointCut,MethodMathcher的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//methodMathcher</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodMatcher</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建拦截链时调用</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span></span>;</span><br><span class="line"><span class="comment">//该条件反应了该切点是不是动态的,动态切点会在每次函数调用再做一次匹配</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//动态匹配条件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object... args)</span></span>;</span><br><span class="line"><span class="comment">//默认的全匹配方法拦截器</span></span><br><span class="line">MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pointcut</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pointcut</span> </span>&#123;</span><br><span class="line"><span class="comment">//拦截链条件之一</span></span><br><span class="line"><span class="function">ClassFilter <span class="title">getClassFilter</span><span class="params">()</span></span>; <span class="comment">//存在默认的全Class匹配器</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">MethodMatcher <span class="title">getMethodMatcher</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//默认的全匹配切点</span></span><br><span class="line">Pointcut TRUE = TruePointcut.INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>spring提供了一个静态advisor,可以直接使用StaticMethodMatcherPointcutAdvisor,或者我们实现静态切点StaticMethodMatcherPointcut使用默认defaultAdvisor</li><li>动态则提供了一个切点</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicMethodMatcherPointcut</span> <span class="keyword">extends</span> <span class="title">DynamicMethodMatcher</span> <span class="keyword">implements</span> <span class="title">Pointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClassFilter <span class="title">getClassFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ClassFilter.TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> MethodMatcher <span class="title">getMethodMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实际上这是一个切点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.aop.MethodMatcher#matches(Method, Class, Object...)</span></span><br><span class="line"><span class="comment"> * 第三个参数表示当函数运行时判断形参,也就是说该切面判定在于运行期,而不是Context解析的过程中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicPointcut</span> <span class="keyword">extends</span> <span class="title">DynamicMethodMatcherPointcut</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        list = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassFilter <span class="title">getClassFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getClassFilter(); <span class="comment">// 默认匹配所有,这个测试中只有该切面只对应了一个target,所以我不写了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配函数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先因该判断类,省略</span></span><br><span class="line">        <span class="comment">//匹配函数,省略,因为只有一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.matches(method, targetClass);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该函数会在method调用的时候再做一次,形参args的匹配,也就是说每次函数调用传递的参数不同,也许就不满足条件,这就是动态匹配的意思</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//此刻就能对于函数进行动态匹配,也就是说在参数不同的情况下对于目标做出不同的处理,默认不进行处理</span></span><br><span class="line">        <span class="keyword">return</span> list.contains(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流程切点ControlFlowPointcut</li></ul><figure class="highlight java"><figcaption><span>流程切点</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匹配条件有 类 和 方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ControlFlowPointcut</span><span class="params">(Class&lt;?&gt; clazz, @Nullable String methodName)</span> </span>&#123;</span><br><span class="line">Assert.notNull(clazz, <span class="string">"Class must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.clazz = clazz;</span><br><span class="line"><span class="keyword">this</span>.methodName = methodName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态匹配条件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.evaluations++;</span><br><span class="line">        <span class="comment">//获取调用方法栈,当类和方法匹配时启动代理</span></span><br><span class="line"><span class="keyword">for</span> (StackTraceElement element : <span class="keyword">new</span> Throwable().getStackTrace()) &#123;</span><br><span class="line"><span class="keyword">if</span> (element.getClassName().equals(<span class="keyword">this</span>.clazz.getName()) &amp;&amp;</span><br><span class="line">(<span class="keyword">this</span>.methodName == <span class="keyword">null</span> || element.getMethodName().equals(<span class="keyword">this</span>.methodName))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复合切点</li></ul><figure class="highlight java"><figcaption><span>ComposablePointcut</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComposablePointcut</span> <span class="keyword">implements</span> <span class="title">Pointcut</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">//默认为全匹配</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComposablePointcut</span><span class="params">(MethodMatcher methodMatcher)</span> </span>&#123;</span><br><span class="line">Assert.notNull(methodMatcher, <span class="string">"MethodMatcher must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.classFilter = ClassFilter.TRUE;</span><br><span class="line"><span class="keyword">this</span>.methodMatcher = methodMatcher;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ComposablePointcut <span class="title">intersection</span><span class="params">(ClassFilter other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classFilter = ClassFilters.intersection(<span class="keyword">this</span>.classFilter, other);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ComposablePointcut <span class="title">intersection</span><span class="params">(MethodMatcher other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.methodMatcher = MethodMatchers.intersection(<span class="keyword">this</span>.methodMatcher, other);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> ComposablePointcut <span class="title">intersection</span><span class="params">(Pointcut other)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.classFilter = ClassFilters.intersection(<span class="keyword">this</span>.classFilter, other.getClassFilter());</span><br><span class="line"><span class="keyword">this</span>.methodMatcher = MethodMatchers.intersection(<span class="keyword">this</span>.methodMatcher, other.getMethodMatcher());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何实现 交逻辑 | 并逻辑类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntersectionMethodMatcher</span> <span class="keyword">implements</span> <span class="title">MethodMatcher</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> MethodMatcher mm1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> MethodMatcher mm2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IntersectionMethodMatcher</span><span class="params">(MethodMatcher mm1, MethodMatcher mm2)</span> </span>&#123;</span><br><span class="line">Assert.notNull(mm1, <span class="string">"First MethodMatcher must not be null"</span>);</span><br><span class="line">Assert.notNull(mm2, <span class="string">"Second MethodMatcher must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.mm1 = mm1;</span><br><span class="line"><span class="keyword">this</span>.mm2 = mm2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态方法匹配条件改为&amp;&amp;满足</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.mm1.matches(method, targetClass) &amp;&amp; <span class="keyword">this</span>.mm2.matches(method, targetClass));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//是否为动态则取决于存在就进行动态匹配</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span>.mm1.isRuntime() || <span class="keyword">this</span>.mm2.isRuntime());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//动态匹配条件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method, Class&lt;?&gt; targetClass, Object... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Because a dynamic intersection may be composed of a static and dynamic part,</span></span><br><span class="line"><span class="comment">// we must avoid calling the 3-arg matches method on a dynamic matcher, as</span></span><br><span class="line"><span class="comment">// it will probably be an unsupported operation.</span></span><br><span class="line"><span class="keyword">boolean</span> aMatches = (<span class="keyword">this</span>.mm1.isRuntime() ?</span><br><span class="line"><span class="keyword">this</span>.mm1.matches(method, targetClass, args) : <span class="keyword">this</span>.mm1.matches(method, targetClass));</span><br><span class="line"><span class="keyword">boolean</span> bMatches = (<span class="keyword">this</span>.mm2.isRuntime() ?</span><br><span class="line"><span class="keyword">this</span>.mm2.matches(method, targetClass, args) : <span class="keyword">this</span>.mm2.matches(method, targetClass));</span><br><span class="line"><span class="keyword">return</span> aMatches &amp;&amp; bMatches;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引介(引介不是匹配方法而是类),因此并不是实现PointCut,在第一部分有 advice-&gt;advisor的转换中就提到了引介切面DefaultIntroductionAdvisor<br>引介增强DelegatingIntroductionInterceptor,本身就属于一个拦截器,用户实现该接口,直接添加该advice,spring会自动创建DefaultIntroductionAdvisor<br>我们也可以手动创建</li></ul><img src="/2019/05/25/aop/DefaultIntroductionAdvisor.png" class=""><p>我们可以看见该切面并不是Pointcut也不是MethodMatcher</p><ul><li>A B类循环引用,最终问题情况</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关于早期引用代理问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"a"</span> <span class="attr">class</span>=<span class="string">"ioc.problem.A"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"b"</span> <span class="attr">class</span>=<span class="string">"ioc.problem.B"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"flowHelp"</span> <span class="attr">class</span>=<span class="string">"aop.jdkProxy.FlowHelp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInstance"</span> <span class="attr">class</span>=<span class="string">"aop.jdkProxy.MyProxyInstance"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"advice"</span> <span class="attr">class</span>=<span class="string">"aop.BeforeMethod"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myInstanceProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:proxyTargetClass</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:interceptorNames</span>=<span class="string">"advice"</span> <span class="attr">p:beanNames</span>=<span class="string">"a"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        xml.loadBeanDefinitions(<span class="string">"aop2.xml"</span>);</span><br><span class="line">        beanFactory.addBeanPostProcessor((BeanPostProcessor) beanFactory.getBean(<span class="string">"myInstanceProxy"</span>));</span><br><span class="line">        beanFactory.getBean(<span class="string">"myInstance"</span>,MyProxyInstance<span class="class">.<span class="keyword">class</span>).<span class="title">test</span>()</span>;</span><br><span class="line">        <span class="comment">//早期引用代理</span></span><br><span class="line">        A a= (A) beanFactory.getBean(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//结果并不是一个循环,而是(代理A)-&gt;null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//原因:</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"><span class="comment">//当早期对象循环结束回到当前bean时</span></span><br><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);  <span class="comment">//会从缓存最终获取早期bean</span></span><br><span class="line"><span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123; <span class="comment">//若早期bean和当前不同则会导致覆盖</span></span><br><span class="line"><span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line"><span class="comment">//不同的原因就在于smart接口创建了一个早期代理对象,反正最终结果很奇怪</span></span><br><span class="line">exposedObject = earlySingletonReference;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line"><span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line"><span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">actualDependentBeans.add(dependentBean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line"><span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line"><span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line"><span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line"><span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line"><span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="springAop技术总结"><a class="header-anchor" href="#springAop技术总结">¶</a>springAop技术总结</h4><h5 id="底层实现原理"><a class="header-anchor" href="#底层实现原理">¶</a>底层实现原理</h5><img src="/2019/05/25/aop/aop%E6%8A%80%E6%9C%AF.png" class=""><ul><li>字节码操作技术: ASM JDKPROXY JAVASIST</li><li>不使用<code>Instrumentation</code>的情况基本都是运行时织入<ul><li>运行织入技术如<code>cglib</code> ,'jdkProxy’都会生成目标类的子类代理对象,这是为了解决类加载器重复加载问题.</li></ul></li><li>关于上述几个框架,我暂时不做源码分析,使用参考<a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener">字节码增强技术探索</a></li><li>spring中无论使用jdk代理还是cglib实际上都是将advice-&gt;advisor,分别在InvocationHandler | cglib的MethodIntertor中实现拦截链</li></ul><h5 id="语法角度"><a class="header-anchor" href="#语法角度">¶</a>语法角度</h5><img src="/2019/05/25/aop/springAop%E8%AF%AD%E6%B3%95.png" class="" title="springAop语法"><ul><li>spring支持接口或类代理,分别使用了jdk和cglib实现</li><li>为了拓展语法,spring也支持了aspectJ语法,在不使用<code>LTW</code>技术的情况下,原理还是上述两种</li></ul><h5 id="cglib在spring中的源码"><a class="header-anchor" href="#cglib在spring中的源码">¶</a>cglib在spring中的源码</h5><img src="/2019/05/25/aop/ObjenesisCglibAopProxy.png" class=""><p>这个大体框架和JdkDynamicAopProxy是类似的</p><figure class="highlight java"><figcaption><span>CglibAopProxy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CglibAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">Assert.notNull(config, <span class="string">"AdvisedSupport must not be null"</span>);</span><br><span class="line"><span class="keyword">if</span> (config.getAdvisors().length == <span class="number">0</span> &amp;&amp; config.getTargetSource() == AdvisedSupport.EMPTY_TARGET_SOURCE) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"No advisors and no TargetSource specified"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.advised = config;</span><br><span class="line"><span class="keyword">this</span>.advisedDispatcher = <span class="keyword">new</span> AdvisedDispatcher(<span class="keyword">this</span>.advised);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实际创建代理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(@Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Creating CGLIB proxy: "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; rootClass = <span class="keyword">this</span>.advised.getTargetClass(); <span class="comment">//代理源对象</span></span><br><span class="line">Assert.state(rootClass != <span class="keyword">null</span>, <span class="string">"Target class must be available for creating a CGLIB proxy"</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isCglibProxyClass(rootClass)) &#123; <span class="comment">//处理接口</span></span><br><span class="line">proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; additionalInterface : additionalInterfaces) &#123;</span><br><span class="line"><span class="keyword">this</span>.advised.addInterface(additionalInterface);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Validate the class, writing log messages as necessary.</span></span><br><span class="line">validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure CGLIB Enhancer... cglib Enhancer设置</span></span><br><span class="line">Enhancer enhancer = createEnhancer();</span><br><span class="line"><span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">enhancer.setClassLoader(classLoader);</span><br><span class="line"><span class="keyword">if</span> (classLoader <span class="keyword">instanceof</span> SmartClassLoader &amp;&amp;</span><br><span class="line">((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised));</span><br><span class="line">enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line"></span><br><span class="line">Callback[] callbacks = getCallbacks(rootClass); <span class="comment">//创建Callbcak</span></span><br><span class="line">Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[callbacks.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; types.length; x++) &#123;</span><br><span class="line">types[x] = callbacks[x].getClass();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span><br><span class="line">enhancer.setCallbackFilter(<span class="keyword">new</span> ProxyCallbackFilter(</span><br><span class="line"><span class="keyword">this</span>.advised.getConfigurationOnlyCopy(), <span class="keyword">this</span>.fixedInterceptorMap, <span class="keyword">this</span>.fixedInterceptorOffset));</span><br><span class="line">enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate the proxy class and create a proxy instance.</span></span><br><span class="line"><span class="keyword">return</span> createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (CodeGenerationException | IllegalArgumentException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of "</span> + <span class="keyword">this</span>.advised.getTargetClass() +</span><br><span class="line"><span class="string">": Common causes of this problem include using a final class or a non-visible class"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// TargetSource.getTarget() failed</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Unexpected AOP exception"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------getCallbacks---------------------------------</span></span><br><span class="line"><span class="keyword">private</span> Callback[] getCallbacks(Class&lt;?&gt; rootClass) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// Parameters used for optimization choices...</span></span><br><span class="line"><span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</span><br><span class="line"><span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</span><br><span class="line"><span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Choose an "aop" interceptor (used for AOP calls).</span></span><br><span class="line">    <span class="comment">//DynamicAdvisedInterceptor 是cglib中的MethodInteceptor实现类比于jdkProxy的InvocationHandler</span></span><br><span class="line">Callback aopInterceptor = <span class="keyword">new</span> DynamicAdvisedInterceptor(<span class="keyword">this</span>.advised);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Choose a "straight to target" interceptor. (used for calls that are</span></span><br><span class="line"><span class="comment">// unadvised but can return this). May be required to expose the proxy.</span></span><br><span class="line">Callback targetInterceptor;</span><br><span class="line"><span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">targetInterceptor = (isStatic ?</span><br><span class="line"><span class="keyword">new</span> StaticUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line"><span class="keyword">new</span> DynamicUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">targetInterceptor = (isStatic ?</span><br><span class="line"><span class="keyword">new</span> StaticUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line"><span class="keyword">new</span> DynamicUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Choose a "direct to target" dispatcher (used for</span></span><br><span class="line"><span class="comment">// unadvised calls to static targets that cannot return this).</span></span><br><span class="line">Callback targetDispatcher = (isStatic ?</span><br><span class="line"><span class="keyword">new</span> StaticDispatcher(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) : <span class="keyword">new</span> SerializableNoOp());</span><br><span class="line"></span><br><span class="line">Callback[] mainCallbacks = <span class="keyword">new</span> Callback[] &#123;</span><br><span class="line">aopInterceptor,  <span class="comment">// for normal advice</span></span><br><span class="line">targetInterceptor,  <span class="comment">// invoke target without considering advice, if optimized</span></span><br><span class="line"><span class="keyword">new</span> SerializableNoOp(),  <span class="comment">// no override for methods mapped to this</span></span><br><span class="line">targetDispatcher, <span class="keyword">this</span>.advisedDispatcher,</span><br><span class="line"><span class="keyword">new</span> EqualsInterceptor(<span class="keyword">this</span>.advised),</span><br><span class="line"><span class="keyword">new</span> HashCodeInterceptor(<span class="keyword">this</span>.advised)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Callback[] callbacks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the target is a static one and the advice chain is frozen,</span></span><br><span class="line"><span class="comment">// then we can make some optimizations by sending the AOP calls</span></span><br><span class="line"><span class="comment">// direct to the target using the fixed chain for that method.</span></span><br><span class="line"><span class="keyword">if</span> (isStatic &amp;&amp; isFrozen) &#123;</span><br><span class="line">Method[] methods = rootClass.getMethods();</span><br><span class="line">Callback[] fixedCallbacks = <span class="keyword">new</span> Callback[methods.length];</span><br><span class="line"><span class="keyword">this</span>.fixedInterceptorMap = <span class="keyword">new</span> HashMap&lt;&gt;(methods.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> small memory optimization here (can skip creation for methods with no advice)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; methods.length; x++) &#123;</span><br><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);</span><br><span class="line">fixedCallbacks[x] = <span class="keyword">new</span> FixedChainStaticTargetInterceptor(</span><br><span class="line">chain, <span class="keyword">this</span>.advised.getTargetSource().getTarget(), <span class="keyword">this</span>.advised.getTargetClass());</span><br><span class="line"><span class="keyword">this</span>.fixedInterceptorMap.put(methods[x].toString(), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now copy both the callbacks from mainCallbacks</span></span><br><span class="line"><span class="comment">// and fixedCallbacks into the callbacks array.</span></span><br><span class="line">callbacks = <span class="keyword">new</span> Callback[mainCallbacks.length + fixedCallbacks.length];</span><br><span class="line">System.arraycopy(mainCallbacks, <span class="number">0</span>, callbacks, <span class="number">0</span>, mainCallbacks.length);</span><br><span class="line">System.arraycopy(fixedCallbacks, <span class="number">0</span>, callbacks, mainCallbacks.length, fixedCallbacks.length);</span><br><span class="line"><span class="keyword">this</span>.fixedInterceptorOffset = mainCallbacks.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">callbacks = mainCallbacks;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> callbacks;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------------DynamicAdvisedInterceptor----------------------------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicAdvisedInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicAdvisedInterceptor</span><span class="params">(AdvisedSupport advised)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.advised = advised;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line">Object target = <span class="keyword">null</span>;</span><br><span class="line">TargetSource targetSource = <span class="keyword">this</span>.advised.getTargetSource();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line"><span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get as late as possible to minimize the time we "own" the target, in case it comes from a pool...</span></span><br><span class="line">target = targetSource.getTarget();</span><br><span class="line">Class&lt;?&gt; targetClass = (target != <span class="keyword">null</span> ? target.getClass() : <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//注意这里 获取拦截链,这里的逻辑和jdk就是相同的了,后边没什么值得分析的了</span></span><br><span class="line">List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">Object retVal;</span><br><span class="line"><span class="comment">// Check whether we only have one InvokerInterceptor: that is,</span></span><br><span class="line"><span class="comment">// no real advice, but just reflective invocation of the target.</span></span><br><span class="line"><span class="keyword">if</span> (chain.isEmpty() &amp;&amp; Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line"><span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly.</span></span><br><span class="line"><span class="comment">// Note that the final invoker must be an InvokerInterceptor, so we know</span></span><br><span class="line"><span class="comment">// it does nothing but a reflective operation on the target, and no hot</span></span><br><span class="line"><span class="comment">// swapping or fancy proxying.</span></span><br><span class="line">Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">retVal = methodProxy.invoke(target, argsToUse);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// We need to create a method invocation...</span></span><br><span class="line">retVal = <span class="keyword">new</span> CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</span><br><span class="line">&#125;</span><br><span class="line">retVal = processReturnType(proxy, target, method, retVal);</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">targetSource.releaseTarget(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line"><span class="comment">// Restore old proxy.</span></span><br><span class="line">AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Aspectj使用"><a class="header-anchor" href="#Aspectj使用">¶</a>Aspectj使用</h5><ul><li>AspectJProxyFactory使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void test2()&#123;</span><br><span class="line">        AspectJProxyFactory aspectJProxyFactory &#x3D; new AspectJProxyFactory();</span><br><span class="line">        aspectJProxyFactory.setTarget(new AocTarget2());</span><br><span class="line">        aspectJProxyFactory.addAspect(AnnotationAspect.class);</span><br><span class="line">        AocTarget2 aocTarget2 &#x3D;  aspectJProxyFactory.getProxy();</span><br><span class="line">        aocTarget2.annotationAspectTest();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>原理</li></ul><figure class="highlight java"><figcaption><span>AspectJProxyFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建advisor的工厂</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AspectJAdvisorFactory aspectFactory = <span class="keyword">new</span> ReflectiveAspectJAdvisorFactory();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAspect</span><span class="params">(Class&lt;?&gt; aspectClass)</span> </span>&#123;</span><br><span class="line">String aspectName = aspectClass.getName();</span><br><span class="line">    <span class="comment">//关于Metadata是 ascpetTool中的概念</span></span><br><span class="line">AspectMetadata am = createAspectMetadata(aspectClass, aspectName);</span><br><span class="line">MetadataAwareAspectInstanceFactory instanceFactory = createAspectInstanceFactory(am, aspectClass, aspectName);</span><br><span class="line">    <span class="comment">//根据源信息创建advisor</span></span><br><span class="line">addAdvisorsFromAspectInstanceFactory(instanceFactory);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//-------------------addAdvisorsFromAspectInstanceFactory------------------------------</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAdvisorsFromAspectInstanceFactory</span><span class="params">(MetadataAwareAspectInstanceFactory instanceFactory)</span> </span>&#123;</span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">this</span>.aspectFactory.getAdvisors(instanceFactory);</span><br><span class="line">Class&lt;?&gt; targetClass = getTargetClass();</span><br><span class="line">Assert.state(targetClass != <span class="keyword">null</span>, <span class="string">"Unresolvable target class"</span>);</span><br><span class="line">advisors = AopUtils.findAdvisorsThatCanApply(advisors, targetClass);</span><br><span class="line">AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(advisors);</span><br><span class="line">AnnotationAwareOrderComparator.sort(advisors);</span><br><span class="line">addAdvisors(advisors);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------  ReflectiveAspectJAdvisorFactory-------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">getAdvisors</span><span class="params">(MetadataAwareAspectInstanceFactory aspectInstanceFactory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Aspect类信息</span></span><br><span class="line">Class&lt;?&gt; aspectClass = aspectInstanceFactory.getAspectMetadata().getAspectClass();</span><br><span class="line">String aspectName = aspectInstanceFactory.getAspectMetadata().getAspectName();</span><br><span class="line">validate(aspectClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We need to wrap the MetadataAwareAspectInstanceFactory with a decorator</span></span><br><span class="line"><span class="comment">// so that it will only instantiate once.</span></span><br><span class="line">MetadataAwareAspectInstanceFactory lazySingletonAspectInstanceFactory =</span><br><span class="line"><span class="keyword">new</span> LazySingletonAspectInstanceFactoryDecorator(aspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历Aspect类中函数,除了被标记为@PointCut注解的</span></span><br><span class="line"><span class="keyword">for</span> (Method method : getAdvisorMethods(aspectClass)) &#123;</span><br><span class="line">Advisor advisor = getAdvisor(method, lazySingletonAspectInstanceFactory, advisors.size(), aspectName);</span><br><span class="line"><span class="keyword">if</span> (advisor != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.add(advisor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If it's a per target aspect, emit the dummy instantiating aspect.</span></span><br><span class="line"><span class="keyword">if</span> (!advisors.isEmpty() &amp;&amp; lazySingletonAspectInstanceFactory.getAspectMetadata().isLazilyInstantiated()) &#123;</span><br><span class="line">Advisor instantiationAdvisor = <span class="keyword">new</span> SyntheticInstantiationAdvisor(lazySingletonAspectInstanceFactory);</span><br><span class="line">advisors.add(<span class="number">0</span>, instantiationAdvisor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find introduction fields.</span></span><br><span class="line">    <span class="comment">// 引介处理</span></span><br><span class="line"><span class="keyword">for</span> (Field field : aspectClass.getDeclaredFields()) &#123;</span><br><span class="line">Advisor advisor = getDeclareParentsAdvisor(field);</span><br><span class="line"><span class="keyword">if</span> (advisor != <span class="keyword">null</span>) &#123;</span><br><span class="line">advisors.add(advisor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------getAdvisorMethods---------------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Method&gt; <span class="title">getAdvisorMethods</span><span class="params">(Class&lt;?&gt; aspectClass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> List&lt;Method&gt; methods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">ReflectionUtils.doWithMethods(aspectClass, method -&gt; &#123;</span><br><span class="line"><span class="comment">// Exclude pointcuts</span></span><br><span class="line"><span class="keyword">if</span> (AnnotationUtils.getAnnotation(method, Pointcut<span class="class">.<span class="keyword">class</span>) </span>== <span class="keyword">null</span>) &#123;</span><br><span class="line">methods.add(method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">methods.sort(METHOD_COMPARATOR);</span><br><span class="line"><span class="keyword">return</span> methods;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------getAdvisor----------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Advisor <span class="title">getAdvisor</span><span class="params">(Method candidateAdviceMethod, MetadataAwareAspectInstanceFactory aspectInstanceFactory,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> declarationOrderInAspect, String aspectName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">validate(aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line">    <span class="comment">//根据符合条件的函数创建切点</span></span><br><span class="line">AspectJExpressionPointcut expressionPointcut = getPointcut(</span><br><span class="line">candidateAdviceMethod, aspectInstanceFactory.getAspectMetadata().getAspectClass());</span><br><span class="line"><span class="keyword">if</span> (expressionPointcut == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//创建advisor,这标准的PointcutAdvisor</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> InstantiationModelAwarePointcutAdvisorImpl(expressionPointcut, candidateAdviceMethod,</span><br><span class="line"><span class="keyword">this</span>, aspectInstanceFactory, declarationOrderInAspect, aspectName);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//--------------------getDeclareParentsAdvisor------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Advisor <span class="title">getDeclareParentsAdvisor</span><span class="params">(Field introductionField)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//根据aspect中的属性,创建引介advisor</span></span><br><span class="line">DeclareParents declareParents = introductionField.getAnnotation(DeclareParents<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (declareParents == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Not an introduction field</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (DeclareParents<span class="class">.<span class="keyword">class</span> </span>== declareParents.defaultImpl()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"'defaultImpl' attribute must be set on DeclareParents"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DeclareParentsAdvisor(</span><br><span class="line">introductionField.getType(), declareParents.value(), declareParents.defaultImpl());</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> springAop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="/2019/05/22/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2019/05/22/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="关于jdk提供动态代理"><a class="header-anchor" href="#关于jdk提供动态代理">¶</a>关于jdk提供动态代理</h3><h4 id="例子"><a class="header-anchor" href="#例子">¶</a>例子</h4><figure class="highlight java"><figcaption><span>例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodClass</span> <span class="keyword">implements</span> <span class="title">MethodInterface</span>,<span class="title">MethodInterface2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"原本的函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"原本的函数2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取代理类</span></span><br><span class="line"><span class="comment">//这里的代码我是为了测试代理对象实现多个接口才这么写的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(MethodClass methodClass)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(MethodClass<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">MethodClass</span>.<span class="title">class</span>.<span class="title">getInterfaces</span>(), (<span class="title">proxy</span>, <span class="title">method</span>, <span class="title">args</span>) -&gt; </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"代理前"</span>);</span><br><span class="line"><span class="comment">//这里有个问题就是这个method可以匹配proxy和target</span></span><br><span class="line">            <span class="keyword">var</span> ob= method.invoke(methodClass,args);</span><br><span class="line">            System.out.println(<span class="string">"代理后"</span>);</span><br><span class="line">            <span class="keyword">return</span> ob;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="猜测"><a class="header-anchor" href="#猜测">¶</a>猜测</h4><p>我认为proxy代理返回的结构如下</p><img src="/2019/05/22/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/proxy.png" class=""><p>并且代理对象的接口函数逻辑都是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">([args])</span></span>&#123;</span><br><span class="line"><span class="comment">//这里这个method是代理对象Class中声明的,并且该method可以匹配proxy和target对象</span></span><br><span class="line">  h.invoke(<span class="keyword">this</span>,method,args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我认为proxy的结构也许是实现了接口,而是继承了代理类,也就是下图</li></ul><img src="/2019/05/22/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/proxy2.png" class=""><h4 id="源码"><a class="header-anchor" href="#源码">¶</a>源码</h4><p>首先我看的源码是jdk11,和9之前版本不同,引入了模块概念,忽略不计</p><figure class="highlight java"><figcaption><span>Proxy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          InvocationHandler h)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt; caller = System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">                                    ? <span class="keyword">null</span></span><br><span class="line">                                    : Reflection.getCallerClass();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里获取代理类构造器</span></span><br><span class="line">        Constructor&lt;?&gt; cons = getProxyConstructor(caller, loader, interfaces);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newProxyInstance(caller, cons, h);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;?&gt; getProxyConstructor(Class&lt;?&gt; caller,</span><br><span class="line">                                                      ClassLoader loader,</span><br><span class="line">                                                      Class&lt;?&gt;... interfaces)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// optimization for single interface</span></span><br><span class="line">        <span class="keyword">if</span> (interfaces.length == <span class="number">1</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; intf = interfaces[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkProxyAccess(caller, loader, intf);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> proxyCache.sub(intf).computeIfAbsent(<span class="comment">//缓存容器</span></span><br><span class="line">                loader,</span><br><span class="line">                (ld, clv) -&gt; <span class="keyword">new</span> ProxyBuilder(ld, clv.key()).build() <span class="comment">//仅仅注意这个lambda就行</span></span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// interfaces cloned</span></span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt;[] intfsArray = interfaces.clone();</span><br><span class="line">            <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkProxyAccess(caller, loader, intfsArray);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; intfs = Arrays.asList(intfsArray);</span><br><span class="line">            <span class="keyword">return</span> proxyCache.sub(intfs).computeIfAbsent(</span><br><span class="line">                loader,</span><br><span class="line">                (ld, clv) -&gt; <span class="keyword">new</span> ProxyBuilder(ld, clv.key()).build()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">   Constructor&lt;?&gt; build() &#123;</span><br><span class="line">            Class&lt;?&gt; proxyClass = defineProxyClass(<span class="keyword">module</span>, interfaces); <span class="comment">//构建代理类的Class对象</span></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cons = proxyClass.getConstructor(constructorParams);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> cons;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; defineProxyClass(Module m, List&lt;Class&lt;?&gt;&gt; interfaces) &#123;</span><br><span class="line">          <span class="comment">//省略大量判断,如方法私有等标志</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">                    proxyName, interfaces.toArray(EMPTY_CLASS_ARRAY), accessFlags); <span class="comment">//生成字节码</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; pc = JLA.defineClass(loader, proxyName, proxyClassFile,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="string">"__dynamic_proxy__"</span>);<span class="comment">//真正定义Class的方式</span></span><br><span class="line">                reverseProxyCache.sub(pc).putIfAbsent(loader, Boolean.TRUE);</span><br><span class="line">                <span class="keyword">return</span> pc;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * A ClassFormatError here means that (barring bugs in the</span></span><br><span class="line"><span class="comment">                 * proxy class generation code) there was some other</span></span><br><span class="line"><span class="comment">                 * invalid aspect of the arguments supplied to the proxy</span></span><br><span class="line"><span class="comment">                 * class creation (such as virtual machine limitations</span></span><br><span class="line"><span class="comment">                 * exceeded).</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>构造代理类字节码的类</p><figure class="highlight java"><figcaption><span>ProxyGenerator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在11版本中,该类位于Reflect包中,我们无法调用,因此无法查看生成的字节码</span></span><br><span class="line"><span class="comment">//但是通过源码我们可以查看生产的代理类情况</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyGenerator</span> </span>&#123;</span><br><span class="line"><span class="comment">//该变量决定jdk是否会对代理类生成文件</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> saveGeneratedFiles =</span><br><span class="line">        java.security.AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> GetBooleanAction(</span><br><span class="line">                <span class="string">"jdk.proxy.ProxyGenerator.saveGeneratedFiles"</span>)).booleanValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String name,</span><br><span class="line">                                     Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                     <span class="keyword">int</span> accessFlags)</span><br><span class="line">    &#123;</span><br><span class="line">        ProxyGenerator gen = <span class="keyword">new</span> ProxyGenerator(name, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classFile = gen.generateClassFile(); <span class="comment">//该函数生成了代理类文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (saveGeneratedFiles) &#123; <span class="comment">//当开启后就会在项目下生成 com/sun/proxy/代理类.class文件</span></span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> java.security.PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = name.lastIndexOf(<span class="string">'.'</span>);</span><br><span class="line">                        Path path;</span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            Path dir = Path.of(name.substring(<span class="number">0</span>, i).replace(<span class="string">'.'</span>, File.separatorChar));</span><br><span class="line">                            Files.createDirectories(dir);</span><br><span class="line">                            path = dir.resolve(name.substring(i+<span class="number">1</span>, name.length()) + <span class="string">".class"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            path = Path.of(name + <span class="string">".class"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        Files.write(path, classFile);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(</span><br><span class="line">                            <span class="string">"I/O exception saving generated file: "</span> + e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classFile;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//真正生成字节码的函数</span></span><br><span class="line"><span class="comment">//想要分析这个函数还要了解class文件结构,我基本记不清楚了</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">byte</span>[] generateClassFile() &#123;</span><br><span class="line">  <span class="comment">/* ============================================================</span></span><br><span class="line"><span class="comment">         * Step 1: Assemble ProxyMethod objects for all methods to</span></span><br><span class="line"><span class="comment">         * generate proxy dispatching code for.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Record that proxy methods are needed for the hashCode, equals,</span></span><br><span class="line"><span class="comment">         * and toString methods of java.lang.Object.  This is done before</span></span><br><span class="line"><span class="comment">         * the methods from the proxy interfaces so that the methods from</span></span><br><span class="line"><span class="comment">         * java.lang.Object take precedence over duplicate methods in the</span></span><br><span class="line"><span class="comment">         * proxy interfaces.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        addProxyMethod(hashCodeMethod, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        addProxyMethod(equalsMethod, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        addProxyMethod(toStringMethod, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Now record all of the methods from the proxy interfaces, giving</span></span><br><span class="line"><span class="comment">         * earlier interfaces precedence over later ones with duplicate</span></span><br><span class="line"><span class="comment">         * methods.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Method m : intf.getMethods()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!Modifier.isStatic(m.getModifiers())) &#123;</span><br><span class="line">                    addProxyMethod(m, intf);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * For each set of proxy methods with the same signature,</span></span><br><span class="line"><span class="comment">         * verify that the methods' return types are compatible.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;ProxyMethod&gt; sigmethods : proxyMethods.values()) &#123;</span><br><span class="line">            checkReturnTypes(sigmethods);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============================================================</span></span><br><span class="line"><span class="comment">         * Step 2: Assemble FieldInfo and MethodInfo structs for all of</span></span><br><span class="line"><span class="comment">         * fields and methods in the class we are generating.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methods.add(generateConstructor());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (List&lt;ProxyMethod&gt; sigmethods : proxyMethods.values()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ProxyMethod pm : sigmethods) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// add static field for method's Method object</span></span><br><span class="line">                    fields.add(<span class="keyword">new</span> FieldInfo(pm.methodFieldName,</span><br><span class="line">                        <span class="string">"Ljava/lang/reflect/Method;"</span>,</span><br><span class="line">                         ACC_PRIVATE | ACC_STATIC));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// generate code for proxy method and add it</span></span><br><span class="line">                    methods.add(pm.generateMethod());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            methods.add(generateStaticInitializer());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"unexpected I/O Exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (methods.size() &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"method limit exceeded"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fields.size() &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"field limit exceeded"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* ============================================================</span></span><br><span class="line"><span class="comment">         * Step 3: Write the final class file.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Make sure that constant pool indexes are reserved for the</span></span><br><span class="line"><span class="comment">         * following items before starting to write the final class file.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cp.getClass(dotToSlash(className));</span><br><span class="line">        cp.getClass(superclassName);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf: interfaces) &#123;</span><br><span class="line">            cp.getClass(dotToSlash(intf.getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Disallow new constant pool additions beyond this point, since</span></span><br><span class="line"><span class="comment">         * we are about to write the final constant pool table.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cp.setReadOnly();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dout = <span class="keyword">new</span> DataOutputStream(bout);</span><br><span class="line">        <span class="comment">//此处就是写的过程,总之还是很有意思的</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Write all the items of the "ClassFile" structure.</span></span><br><span class="line"><span class="comment">             * See JVMS section 4.1.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">                                        <span class="comment">// u4 magic; 魔数</span></span><br><span class="line">            dout.writeInt(<span class="number">0xCAFEBABE</span>);</span><br><span class="line">                                        <span class="comment">// u2 minor_version;  主版本</span></span><br><span class="line">            dout.writeShort(CLASSFILE_MINOR_VERSION);</span><br><span class="line">                                        <span class="comment">// u2 major_version;   此版本</span></span><br><span class="line">            dout.writeShort(CLASSFILE_MAJOR_VERSION);</span><br><span class="line"></span><br><span class="line">            cp.write(dout);             <span class="comment">// (write constant pool) 常量池</span></span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// u2 access_flags;  访问标志</span></span><br><span class="line">            dout.writeShort(accessFlags);</span><br><span class="line">                                        <span class="comment">// u2 this_class;  类对象</span></span><br><span class="line">            dout.writeShort(cp.getClass(dotToSlash(className)));</span><br><span class="line">                                        <span class="comment">// u2 super_class;</span></span><br><span class="line">            dout.writeShort(cp.getClass(superclassName));</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// u2 interfaces_count;</span></span><br><span class="line">            dout.writeShort(interfaces.length);</span><br><span class="line">                                        <span class="comment">// u2 interfaces[interfaces_count];</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">                dout.writeShort(cp.getClass(</span><br><span class="line">                    dotToSlash(intf.getName())));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// u2 fields_count;</span></span><br><span class="line">            dout.writeShort(fields.size());</span><br><span class="line">                                        <span class="comment">// field_info fields[fields_count];</span></span><br><span class="line">            <span class="keyword">for</span> (FieldInfo f : fields) &#123;</span><br><span class="line">                f.write(dout);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="comment">// u2 methods_count;</span></span><br><span class="line">            dout.writeShort(methods.size());</span><br><span class="line">                                        <span class="comment">// method_info methods[methods_count];</span></span><br><span class="line">            <span class="keyword">for</span> (MethodInfo m : methods) &#123;</span><br><span class="line">                m.write(dout);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">                                         <span class="comment">// u2 attributes_count;</span></span><br><span class="line">            dout.writeShort(<span class="number">0</span>); <span class="comment">// (no ClassFile attributes for proxy classes)</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"unexpected I/O Exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bout.toByteArray();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不能使用junit测试,因为该框架是通过proxy启动的,它会导致我们设置的property无效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//启用代理类文件</span></span><br><span class="line">            System.getProperties().setProperty(<span class="string">"jdk.proxy.ProxyGenerator.saveGeneratedFiles"</span>,<span class="string">"true"</span>);</span><br><span class="line">            <span class="keyword">var</span> inter= MyProxy.&lt;MethodInterface&gt;getProxy(<span class="keyword">new</span> MethodClass());</span><br><span class="line"><span class="comment">//        var method= inter.getClass().getDeclaredMethods();</span></span><br><span class="line">            inter.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理类文件"><a class="header-anchor" href="#代理类文件">¶</a>代理类文件</h4><figure class="highlight java"><figcaption><span>代理类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代理类并没有继承目标对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">MethodInterface</span>, <span class="title">MethodInterface2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//获取代理method类对象</span></span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line"><span class="comment">//注意method获取的是接口类中的Method对象,因此proxy可以通过invoke调用</span></span><br><span class="line">            m4 = Class.forName(<span class="string">"proxy.MethodInterface2"</span>).getMethod(<span class="string">"doSomething2"</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">"proxy.MethodInterface"</span>).getMethod(<span class="string">"doSomething"</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSomething2</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h4><ul><li>研究这个玩意可以更加深刻的意识到从java的角度来看这本语言,就是一个动态性语言,一切的动态性来源于类的加载方式,<br>在程序运行期间,可以很大程度上修改class</li><li>依然不能完全想清楚的还是动态加载时如何确定符号地址,引申的问题还是C的动态链接相关问题</li><li>Proxy.newProxyInstance(类加载器,接口,hander),实际上从生成的Class文件和这个传递参数来看jdk Proxy仅仅对于接口进行代理,<br>即生成实现了接口的临时类对象.</li><li>生成的Class结构符合我第一个猜想,跟传递的类无关</li><li>jdk的proxy生成的代理类为何不直接继承代理类?这样不就可以对代理类函数进行增强</li><li>实际jdk代理产生的匿名类结构是第一种<a href="#%E7%8C%9C%E6%B5%8B">参想</a>,若hander不持有代理对象,那么新产生的代理对象其实没有多大作用,这里思考<br>可以和spring中的<code>JdkDynamicAopProxy</code>对比看看</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ioc</title>
      <link href="/2019/05/21/ioc/"/>
      <url>/2019/05/21/ioc/</url>
      
        <content type="html"><![CDATA[<h3 id="ioc源码分析"><a class="header-anchor" href="#ioc源码分析">¶</a>ioc源码分析</h3><h4 id="BeanFactory体系"><a class="header-anchor" href="#BeanFactory体系">¶</a>BeanFactory体系</h4><img src="/2019/05/21/ioc/BeanFactory.png" class="" title="DefaultListableBeanFactory"><p>该类采用实现众多接口,每个接口功能分离,非常容易理解</p><figure class="highlight java"><figcaption><span>BeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BeanFactory是一个典型的工厂,通过名字返回对象,通过java反射和配置文件减少了代码耦合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span></span>&#123;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ListableBeanFactory该接口标示的工厂拥有获取大量bean的能力,如某类型及其子类,获取工厂中持有的bean数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListableBeanFactory</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getBeanDefinitionCount</span><span class="params">()</span></span>;</span><br><span class="line">String[] getBeanDefinitionNames();</span><br><span class="line">String[] getBeanNamesForType(<span class="meta">@Nullable</span> Class&lt;?&gt; type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//HierarchicalBeanFactory 该类型的工厂可以作为继承链使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HierarchicalBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"><span class="function">BeanFactory <span class="title">getParentBeanFactory</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsLocalBean</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SingletonBeanRegistry 表示bean单例注册和获取</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line"><span class="function">Object <span class="title">getSingleton</span><span class="params">(String beanName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ConfigurableBeanFactory 表示可以对工厂以及本身做出一些改变,如设置工厂的类加载器,设置工厂的父工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableBeanFactory</span> <span class="keyword">extends</span> <span class="title">HierarchicalBeanFactory</span>, <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setParentBeanFactory</span><span class="params">(BeanFactory parentBeanFactory)</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(@Nullable ClassLoader beanClassLoader)</span></span>;<span class="comment">//默认为当前线程加载器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addBeanPostProcessor</span><span class="params">(BeanPostProcessor beanPostProcessor)</span></span>;<span class="comment">//添加bean处理器</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AutowireCapableBeanFactory 完成自动装配的接口,以及创建bean的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurableListableBeanFactory</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">ListableBeanFactory</span>, <span class="title">AutowireCapableBeanFactory</span>, <span class="title">ConfigurableBeanFactory</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//定义别名的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AliasRegistry</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerAlias</span><span class="params">(String name, String alias)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注册BeanDfinition的接口,继承别名接口是为了具有给beanName其别名的能力</span></span><br><span class="line"><span class="comment">//BeanDfinition是来描述bean的类,解析xml的定义后生成的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title">AliasRegistry</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getBean"><a class="header-anchor" href="#getBean">¶</a>getBean</h4><h5 id="流程"><a class="header-anchor" href="#流程">¶</a>流程</h5><img src="/2019/05/21/ioc/getBean%E6%B5%81%E7%A8%8B.png" class="" title="流程图"><figure class="highlight java"><figcaption><span>AbstractBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring中以do开头的函数是真正实现的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> doGetBean(name, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">doGetBean</span><span class="params">(<span class="keyword">final</span> String name, @Nullable <span class="keyword">final</span> Class&lt;T&gt; requiredType,</span></span></span><br><span class="line"><span class="function"><span class="params">@Nullable <span class="keyword">final</span> Object[] args, <span class="keyword">boolean</span> typeCheckOnly)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[1]别名和&amp;处理</span></span><br><span class="line"><span class="comment">//去除&amp;前缀 ;将可能是别名的,转换为beanName</span></span><br><span class="line"><span class="keyword">final</span> String beanName = transformedBeanName(name);</span><br><span class="line">Object bean;</span><br><span class="line">        <span class="comment">//[1]</span></span><br><span class="line"><span class="comment">//[2]获取单例缓存,此处同时处理关于单例循环依赖的问题</span></span><br><span class="line">Object sharedInstance = getSingleton(beanName);</span><br><span class="line"><span class="comment">//[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//[3]存在单例缓存</span></span><br><span class="line"><span class="keyword">if</span> (sharedInstance != <span class="keyword">null</span> &amp;&amp; args == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123; <span class="comment">//说明单例循环</span></span><br><span class="line">logger.trace(<span class="string">"Returning eagerly cached instance of singleton bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' that is not fully initialized yet - a consequence of a circular reference"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.trace(<span class="string">"Returning cached instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数判断sharedInstance是否为FactoryBean,若不是直接返回;若是,则判断返回内部bean还是工厂本身</span></span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3]</span></span><br><span class="line"><span class="comment">//不存在缓存: 1.存在于父容器中 2.未创建 3.不是单例</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//判断可能为非单例情况,是否存在循环依赖,spring不支持非单例的循环依赖</span></span><br><span class="line"><span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123; <span class="comment">//若该bean在创建中,则说明此时处于循环中,则</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[4]从父容器中获取</span></span><br><span class="line">BeanFactory parentBeanFactory = getParentBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (parentBeanFactory != <span class="keyword">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line"><span class="comment">// Not found -&gt; check parent.</span></span><br><span class="line">String nameToLookup = originalBeanName(name);</span><br><span class="line"><span class="keyword">if</span> (parentBeanFactory <span class="keyword">instanceof</span> AbstractBeanFactory) &#123;</span><br><span class="line"><span class="keyword">return</span> ((AbstractBeanFactory) parentBeanFactory).doGetBean(</span><br><span class="line">nameToLookup, requiredType, args, typeCheckOnly);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Delegation to parent with explicit args.</span></span><br><span class="line"><span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (requiredType != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line"><span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">           <span class="comment">//[4]</span></span><br><span class="line"><span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">markBeanAsCreated(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//[5] 合并merge</span></span><br><span class="line"><span class="keyword">final</span> RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line">checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line">            <span class="comment">//[5]  </span></span><br><span class="line"><span class="comment">//[6] 创建depend-on依赖的bean</span></span><br><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line"><span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Circular depends-on relationship between '"</span> + beanName + <span class="string">"' and '"</span> + dep + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">registerDependentBean(dep, beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">getBean(dep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"'"</span> + beanName + <span class="string">"' depends on missing bean '"</span> + dep + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//[6]</span></span><br><span class="line"><span class="comment">//[7]创建实例</span></span><br><span class="line"><span class="comment">//单例情况</span></span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line"><span class="comment">//createBean函数是该接口的子类AbstractAutowireCapableBeanFactory实现</span></span><br><span class="line">sharedInstance = getSingleton(beanName, () -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line"><span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line"><span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">destroySingleton(beanName);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//再次处理FactoryBean情况</span></span><br><span class="line">bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//非单例情况,这段代码和getSingleton同等级,prototype类型不需要缓存,因此spring没有为该类型写一个类</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line"><span class="comment">// It's a prototype -&gt; create a new instance.</span></span><br><span class="line">Object prototypeInstance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line">prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//web环境下</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">String scopeName = mbd.getScope();</span><br><span class="line"><span class="keyword">final</span> Scope scope = <span class="keyword">this</span>.scopes.get(scopeName);</span><br><span class="line"><span class="keyword">if</span> (scope == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No Scope registered for scope name '"</span> + scopeName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//将部分逻辑交给了scope实现类处理,如sessionScope</span></span><br><span class="line">Object scopedInstance = scope.get(beanName, () -&gt; &#123;</span><br><span class="line">beforePrototypeCreation(beanName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">afterPrototypeCreation(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName,</span><br><span class="line"><span class="string">"Scope '"</span> + scopeName + <span class="string">"' is not active for the current thread; consider "</span> +</span><br><span class="line"><span class="string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span>,</span><br><span class="line">ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//[7]</span></span><br><span class="line"> <span class="comment">//[8]处理类型转换</span></span><br><span class="line"><span class="keyword">if</span> (requiredType != <span class="keyword">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line"><span class="keyword">if</span> (convertedBean == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> convertedBean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Failed to convert bean '"</span> + name + <span class="string">"' to required type '"</span> +</span><br><span class="line">ClassUtils.getQualifiedName(requiredType) + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T) bean;</span><br><span class="line"><span class="comment">//[8]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ioc通过几个缓存map解决了单例情况下的循环依赖</li><li>对于FactoryBean的处理</li><li>spring对于bean的创建的时期通过map来说明,如创建中,创建结束</li></ul><h4 id="创建一个新的单例"><a class="header-anchor" href="#创建一个新的单例">¶</a>创建一个新的单例</h4><h5 id="getSingleton"><a class="header-anchor" href="#getSingleton">¶</a>getSingleton</h5><p>spring的接口非常清晰,对于处理单例,以及缓存单例的函数都在该类中实现</p><figure class="highlight java"><figcaption><span>DefaultSingletonBeanRegistry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该map存放着最终的单例,FactoryBean类型也在其中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ObjectFactory的最终实现是是包含了当前BeanFactory的lambda表达式,这个map是为了解决依赖循环</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//该map存在着未实例化完成的bean,解决单例依赖循环的核心</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当bean创建完成会存放在该map中,保留了bean创建的顺序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示正在创建的单例,当调用getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory) 时会管理bean的创建周期</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation =</span><br><span class="line">Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Names of beans currently excluded from in creation checks. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; inCreationCheckExclusions =</span><br><span class="line">Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of suppressed Exceptions, available for associating related causes. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Exception&gt; suppressedExceptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正在销毁的单例</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> singletonsCurrentlyInDestruction = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Disposable bean instances: bean name to disposable instance. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; disposableBeans = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map between containing bean names: bean name to Set of bean names that the bean contains. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; containedBeanMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map between dependent bean names: bean name to Set of dependent bean names. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependentBeanMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Map between depending bean names: bean name to Set of bean names for the bean's dependencies. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependenciesForBeanMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//该接口就是由AbstractBeanFactory#doGetBean()调用的,用来创建新的单例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">Assert.notNull(beanName, <span class="string">"Bean name must not be null"</span>);</span><br><span class="line">[<span class="number">1</span>]变量锁,这个锁说明spring对于获取单例的锁必须等一个单例流程结束后才会释放</span><br><span class="line"><span class="comment">//一个单例创建往往伴随着其引用的bean的创建</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">    <span class="comment">//存在这句代码的原因在于,进行获取缓存单例的条件是 if (sharedInstance != null &amp;&amp; args == null) ,也就是说进入创建语句也有可能是调用者使用了</span></span><br><span class="line"><span class="comment">//getBean(String name, Object... args),并且给args赋值了,args参数只有创建实例的时候才能使用,也就是说每次非单例调用getBean和单例第一次创建时有用</span></span><br><span class="line"><span class="comment">//为了防止在单例bean又创建一次,因此又做了一次检查</span></span><br><span class="line"><span class="comment">//具体arg如何使用要参看createBean代码</span></span><br><span class="line">Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationNotAllowedException(beanName,</span><br><span class="line"><span class="string">"Singleton bean creation not allowed while singletons of this factory are in destruction "</span> +</span><br><span class="line"><span class="string">"(Do not request a bean from a BeanFactory in a destroy method implementation!)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Creating shared instance of singleton bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[2] 设置该bean为创建中状态</span></span><br><span class="line">beforeSingletonCreation(beanName);</span><br><span class="line"><span class="comment">//[2]</span></span><br><span class="line"><span class="keyword">boolean</span> newSingleton = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> recordSuppressedExceptions = (<span class="keyword">this</span>.suppressedExceptions == <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line"><span class="keyword">this</span>.suppressedExceptions = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//[3]创建bean,当前逻辑中调用的是AbstractCapableBeanFactory#createBean()</span></span><br><span class="line"><span class="comment">// 该函数具体创建了当前bean,并进行赋值等复杂操作,同时对于其引用bean也进行之前的流程</span></span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line">newSingleton = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">//[3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line"><span class="comment">// Has the singleton object implicitly appeared in the meantime -&gt;</span></span><br><span class="line"><span class="comment">// if yes, proceed with it since the exception indicates that state.</span></span><br><span class="line">singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line"><span class="keyword">for</span> (Exception suppressedException : <span class="keyword">this</span>.suppressedExceptions) &#123;</span><br><span class="line">ex.addRelatedCause(suppressedException);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line"><span class="keyword">this</span>.suppressedExceptions = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[4] 设置bean为创建结束状态</span></span><br><span class="line">afterSingletonCreation(beanName);</span><br><span class="line"><span class="comment">//[4]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">    <span class="comment">//[5] 将新创建的bean放到缓存中</span></span><br><span class="line">addSingleton(beanName, singletonObject);</span><br><span class="line"><span class="comment">//[5]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//短路逻辑,未放置忽略检查的队列中,若未成功添加到创建队列则抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeSingletonCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class="keyword">this</span>.singletonsCurrentlyInCreation.add(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback after singleton creation.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The default implementation marks the singleton as not in creation anymore.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the singleton that has been created</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isSingletonCurrentlyInCreation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterSingletonCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class="keyword">this</span>.singletonsCurrentlyInCreation.remove(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Singleton '"</span> + beanName + <span class="string">"' isn't currently in creation"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createBean"><a class="header-anchor" href="#createBean">¶</a>createBean</h4><p>实例化-&gt;装配</p><figure class="highlight java"><figcaption><span>AbstractAutoWireCapableBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外壳createBean</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">RootBeanDefinition mbdToUse = mbd;</span><br><span class="line"></span><br><span class="line"><span class="comment">//[1]解析class对象,确保正确的RootBeanDefinition</span></span><br><span class="line">Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"><span class="keyword">if</span> (resolvedClass != <span class="keyword">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">mbdToUse = <span class="keyword">new</span> RootBeanDefinition(mbd);</span><br><span class="line">mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[1]</span></span><br><span class="line"><span class="comment">//[2] 此处给look-up 和 repalce-method 做标记</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mbdToUse.prepareMethodOverrides();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(mbdToUse.getResourceDescription(),</span><br><span class="line">beanName, <span class="string">"Validation of method overrides failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//[3] 调用用户注册的InstantiationAwareBeanPostProcessor接口,而不是BeanPostProcess接口</span></span><br><span class="line">Object bean = resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123; <span class="comment">//若用户实现的before函数创建了bean则直接返回</span></span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"BeanPostProcessor before instantiation of bean failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//[4] 真正的createBean函数</span></span><br><span class="line">Object beanInstance = doCreateBean(beanName, mbdToUse, args);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Finished creating instance of bean '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> beanInstance;</span><br><span class="line"><span class="comment">//[4]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanCreationException | ImplicitlyAppearedSingletonException ex) &#123;</span><br><span class="line"><span class="comment">// A previously detected exception with proper bean creation context already,</span></span><br><span class="line"><span class="comment">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbdToUse.getResourceDescription(), beanName, <span class="string">"Unexpected exception during bean creation"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真正的createBean</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> @Nullable Object[] args)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1]构造一个实例,并且由BeanWrapper包裹,此时的实例仅仅通过构造器进行了创建</span></span><br><span class="line">BeanWrapper instanceWrapper = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">instanceWrapper = <span class="keyword">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (instanceWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//此处逻辑复杂,完成autowire 构造器初始化| 默认构造 |</span></span><br><span class="line"><span class="comment">//此处也完成了对于init-method以及look-up的代理对象创造,如此早期引用也是代理对象,这也是ioc没有把这两种情况放到后处理器中处理的原因</span></span><br><span class="line">instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Object bean = instanceWrapper.getWrappedInstance();</span><br><span class="line">Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line"><span class="keyword">if</span> (beanType != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">mbd.resolvedTargetType = beanType;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[1]</span></span><br><span class="line"><span class="comment">//[2] 调用注册的MergedBeanDefinitionPostProcessor接口来改变bean definition</span></span><br><span class="line"><span class="comment">//典型 的 AutowiredAnnotationBeanPostProcessor,用来处理autowire原信息</span></span><br><span class="line"><span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line"><span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Post-processing of merged bean definition failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">mbd.postProcessed = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line">    <span class="comment">//[3] 此部分就是为了解决单例循环依赖的核心</span></span><br><span class="line"><span class="keyword">boolean</span> earlySingletonExposure = (mbd.isSingleton() &amp;&amp; <span class="keyword">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">isSingletonCurrentlyInCreation(beanName));</span><br><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Eagerly caching bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' to allow for resolving potential circular references"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当单例进入创建逻辑,并处于创建中时,到了此处就将放置到\</span></span><br><span class="line"><span class="comment">//此处还涉及到早期引用,调用自动代理创建代理对象的情况</span></span><br><span class="line">addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[3]</span></span><br><span class="line"><span class="comment">//[4] 属性注入</span></span><br><span class="line">Object exposedObject = bean;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">populateBean(beanName, mbd, instanceWrapper); <span class="comment">//属性注入核心</span></span><br><span class="line">exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line"><span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbd.getResourceDescription(), beanName, <span class="string">"Initialization of bean failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[4]</span></span><br><span class="line"><span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">Object earlySingletonReference = getSingleton(beanName, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (earlySingletonReference != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">exposedObject = earlySingletonReference;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(dependentBeans.length);</span><br><span class="line"><span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line"><span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">actualDependentBeans.add(dependentBean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName,</span><br><span class="line"><span class="string">"Bean with name '"</span> + beanName + <span class="string">"' has been injected into other beans ["</span> +</span><br><span class="line">StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line"><span class="string">"] in its raw version as part of a circular reference, but has eventually been "</span> +</span><br><span class="line"><span class="string">"wrapped. This means that said other beans do not use the final version of the "</span> +</span><br><span class="line"><span class="string">"bean. This is often the result of over-eager type matching - consider using "</span> +</span><br><span class="line"><span class="string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register bean as disposable.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbd.getResourceDescription(), beanName, <span class="string">"Invalid destruction signature"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="装配bean和属性注入"><a class="header-anchor" href="#装配bean和属性注入">¶</a>装配bean和属性注入</h5><figure class="highlight java"><figcaption><span>AbstractAutoWireCapableBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装配函数</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bw == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbd.getResourceDescription(), beanName, <span class="string">"Cannot apply property values to null instance"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> continueWithPropertyPopulation = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//[1]若包含InstantiationAwareBeanPostProcessor 则执行after逻辑</span></span><br><span class="line"><span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line"><span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123; <span class="comment">//若返回为false则表示bean填充完毕</span></span><br><span class="line">continueWithPropertyPopulation = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[1]</span></span><br><span class="line">PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//[2]检查是否需要使用自动装填,自动装填并不是真正的将属性注入bean,而是创建关于属性的pvs,这是为了下边可能的处理器调用</span></span><br><span class="line"><span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">MutablePropertyValues newPvs = <span class="keyword">new</span> MutablePropertyValues(pvs);</span><br><span class="line"><span class="comment">// Add property values based on autowire by name if applicable.</span></span><br><span class="line"><span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add property values based on autowire by type if applicable.</span></span><br><span class="line"><span class="keyword">if</span> (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">&#125;</span><br><span class="line">pvs = newPvs;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[2]</span></span><br><span class="line"><span class="keyword">boolean</span> hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span><br><span class="line"><span class="keyword">boolean</span> needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">PropertyDescriptor[] filteredPds = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//[3]若存在InstantiationAwareBeanPostProcessors,则调用其postProcessProperties来在真正填入属性之前对pvs可以做一次改变</span></span><br><span class="line"><span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line"><span class="keyword">if</span> (pvs == <span class="keyword">null</span>) &#123;</span><br><span class="line">pvs = mbd.getPropertyValues();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line"><span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">InstantiationAwareBeanPostProcessor ibp = (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">PropertyValues pvsToUse = ibp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line"><span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">&#125;</span><br><span class="line">pvsToUse = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line"><span class="keyword">if</span> (pvsToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pvs = pvsToUse;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3]</span></span><br><span class="line"><span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line"><span class="keyword">if</span> (filteredPds == <span class="keyword">null</span>) &#123;</span><br><span class="line">filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">&#125;</span><br><span class="line">checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//[4] 开始填充</span></span><br><span class="line"><span class="keyword">if</span> (pvs != <span class="keyword">null</span>) &#123;</span><br><span class="line">applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[4]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动装填</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">autowireByName</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">String beanName, AbstractBeanDefinition mbd, BeanWrapper bw, MutablePropertyValues pvs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String[] propertyNames = unsatisfiedNonSimpleProperties(mbd, bw);<span class="comment">//属性名</span></span><br><span class="line"><span class="keyword">for</span> (String propertyName : propertyNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (containsBean(propertyName)) &#123;</span><br><span class="line">Object bean = getBean(propertyName); <span class="comment">//根据属性名获取bean</span></span><br><span class="line">pvs.add(propertyName, bean);<span class="comment">//加入到pvs</span></span><br><span class="line">registerDependentBean(propertyName, beanName); <span class="comment">//注册依赖</span></span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Added autowiring by name from bean name '"</span> + beanName +</span><br><span class="line"><span class="string">"' via property '"</span> + propertyName + <span class="string">"' to bean named '"</span> + propertyName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Not autowiring property '"</span> + propertyName + <span class="string">"' of bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' by name: no matching bean found"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="pvs处理"><a class="header-anchor" href="#pvs处理">¶</a>pvs处理</h5><p>pvs处理,此处涉及到类型转换,参考<a href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/#beanwrapper">BeanWrapper</a></p><ul><li>valueResolver.resolveValueIfNecessary  将bd#pvs转换成较标准类型</li></ul><figure class="highlight java"><figcaption><span>AbstractAutoWireCapableBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一般来说,当前bean是xml定义的,也就是说有&lt;property&gt;,在bd创建过程中才会拥有pvs</span></span><br><span class="line"><span class="comment">//@Component, @Bean 扫描创建的bean,不会经过该函数,类型转换发生在 如autowire..post过程.</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyPropertyValues</span><span class="params">(String beanName, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pvs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; bw <span class="keyword">instanceof</span> BeanWrapperImpl) &#123;</span><br><span class="line">((BeanWrapperImpl) bw).setSecurityContext(getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MutablePropertyValues mpvs = <span class="keyword">null</span>;</span><br><span class="line">List&lt;PropertyValue&gt; original;</span><br><span class="line"><span class="comment">//[1] 获取pvs,若已经Converted则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (pvs <span class="keyword">instanceof</span> MutablePropertyValues) &#123;</span><br><span class="line">mpvs = (MutablePropertyValues) pvs;</span><br><span class="line"><span class="keyword">if</span> (mpvs.isConverted()) &#123;</span><br><span class="line"><span class="comment">// Shortcut: use the pre-converted values as-is.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw.setPropertyValues(mpvs);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">original = mpvs.getPropertyValueList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">original = Arrays.asList(pvs.getPropertyValues());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1!]</span></span><br><span class="line"><span class="comment">//[2] 获取自定义类型转化器,创建Resolver</span></span><br><span class="line">TypeConverter converter = getCustomTypeConverter();</span><br><span class="line"><span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">converter = bw;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托</span></span><br><span class="line">BeanDefinitionValueResolver valueResolver = <span class="keyword">new</span> BeanDefinitionValueResolver(<span class="keyword">this</span>, beanName, mbd, converter);</span><br><span class="line"><span class="comment">//[2!]</span></span><br><span class="line"><span class="comment">// Create a deep copy, resolving any references for values.</span></span><br><span class="line"><span class="comment">//[3] 遍历处理每个pv</span></span><br><span class="line">List&lt;PropertyValue&gt; deepCopy = <span class="keyword">new</span> ArrayList&lt;&gt;(original.size());</span><br><span class="line"><span class="keyword">boolean</span> resolveNecessary = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (PropertyValue pv : original) &#123;</span><br><span class="line"><span class="keyword">if</span> (pv.isConverted()) &#123;</span><br><span class="line">deepCopy.add(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">String propertyName = pv.getName();</span><br><span class="line">Object originalValue = pv.getValue();</span><br><span class="line"><span class="comment">//初步类型转换,实际上很多类型经过此步处理已经可以了,convertForProperty只是一个过场</span></span><br><span class="line">Object resolvedValue = valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class="line">Object convertedValue = resolvedValue;</span><br><span class="line"><span class="keyword">boolean</span> convertible = bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class="line">!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class="line"><span class="comment">//类型转换器转换类型</span></span><br><span class="line"><span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">convertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Possibly store converted value in merged bean definition,</span></span><br><span class="line"><span class="comment">// in order to avoid re-conversion for every created bean instance.</span></span><br><span class="line"><span class="keyword">if</span> (resolvedValue == originalValue) &#123;</span><br><span class="line"><span class="keyword">if</span> (convertible) &#123;</span><br><span class="line">pv.setConvertedValue(convertedValue);</span><br><span class="line">&#125;</span><br><span class="line">deepCopy.add(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (convertible &amp;&amp; originalValue <span class="keyword">instanceof</span> TypedStringValue &amp;&amp;</span><br><span class="line">!((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class="line">!(convertedValue <span class="keyword">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class="line">pv.setConvertedValue(convertedValue);</span><br><span class="line">deepCopy.add(pv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">resolveNecessary = <span class="keyword">true</span>;</span><br><span class="line">deepCopy.add(<span class="keyword">new</span> PropertyValue(pv, convertedValue));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mpvs != <span class="keyword">null</span> &amp;&amp; !resolveNecessary) &#123;</span><br><span class="line">mpvs.setConverted();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3!]</span></span><br><span class="line"><span class="comment">// Set our (possibly massaged) deep copy.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw.setPropertyValues(<span class="keyword">new</span> MutablePropertyValues(deepCopy));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">mbd.getResourceDescription(), beanName, <span class="string">"Error setting property values"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------- valueResolver.resolveValueIfNecessar---------------------------------</span></span><br><span class="line"><span class="comment">//该函数将bd#pvs经过初步转换</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveValueIfNecessary</span><span class="params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line"><span class="comment">// to another bean to be resolved.</span></span><br><span class="line"><span class="comment">//[1] 典型的&lt;ref&gt; xml处理时的pv#value类型</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line"><span class="keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1!]</span></span><br><span class="line"><span class="comment">//[2] &lt;idRef&gt; 处理</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line"><span class="comment">//如不存在该id,直接抛出异常</span></span><br><span class="line">refName = String.valueOf(doEvaluate(refName));</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Invalid bean name '"</span> + refName + <span class="string">"' in bean reference for "</span> + argName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> refName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[2!]</span></span><br><span class="line"><span class="comment">//[3]</span></span><br><span class="line"><span class="comment">//&lt;bean&gt;&lt;property&gt;&lt;bean/&gt;&lt;property&gt;&lt;/bean&gt; 这种情况,即匿名bean</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line"><span class="comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line"><span class="comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">String innerBeanName = <span class="string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">ObjectUtils.getIdentityHexString(bd);</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3!]</span></span><br><span class="line"><span class="comment">//[4] 遇到集合类型,若xml中有的如&lt;list&gt;等元素,bd会创建对应的ManageXX,在这里会转换为</span></span><br><span class="line"><span class="comment">//对应的Collection&lt;String&gt; 类型,或者Map&lt;String,String&gt;类型,而将此处的各种字面值转换</span></span><br><span class="line"><span class="comment">//为对应的bean中定义的集合&lt;T&gt;类型,并没有发生在该函数</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">ManagedArray array = (ManagedArray) value;</span><br><span class="line">Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line"><span class="keyword">if</span> (elementType == <span class="keyword">null</span>) &#123;</span><br><span class="line">String elementTypeName = array.getElementTypeName();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">elementType = ClassUtils.forName(elementTypeName, <span class="keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">array.resolvedElementType = elementType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">elementType = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">Properties original = (Properties) value;</span><br><span class="line">Properties copy = <span class="keyword">new</span> Properties();</span><br><span class="line">original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (propKey <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propKey == <span class="keyword">null</span> || propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting Properties key/value pair for "</span> + argName + <span class="string">": resolved to null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">copy.put(propKey, propValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[4]</span></span><br><span class="line"><span class="comment">//[5] 标准的字面类型,即 value="xx"</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line"><span class="comment">// Convert value to target type here.</span></span><br><span class="line">TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">Object valueObject = evaluate(typedStringValue);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//进行类型转换,一般的typeString都是null类型,此处一般也不会做类型转换</span></span><br><span class="line">Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line"><span class="keyword">if</span> (resolvedTargetType != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> valueObject;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[5!]</span></span><br><span class="line"><span class="comment">//[6] null值</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> evaluate(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[6!]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------匿名类处理</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">resolveInnerBean</span><span class="params">(Object argName, String innerBeanName, BeanDefinition innerBd)</span> </span>&#123;</span><br><span class="line">RootBeanDefinition mbd = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//[1] 处理merge情况</span></span><br><span class="line">mbd = <span class="keyword">this</span>.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, <span class="keyword">this</span>.beanDefinition);</span><br><span class="line"><span class="comment">// Check given bean name whether it is unique. If not already unique,</span></span><br><span class="line"><span class="comment">// add counter - increasing the counter until the name is unique.</span></span><br><span class="line">String actualInnerBeanName = innerBeanName;</span><br><span class="line"><span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">actualInnerBeanName = adaptInnerBeanName(innerBeanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[1!]</span></span><br><span class="line"><span class="comment">//[2] 注册并处理以来</span></span><br><span class="line"><span class="keyword">this</span>.beanFactory.registerContainedBean(actualInnerBeanName, <span class="keyword">this</span>.beanName);</span><br><span class="line"><span class="comment">// Guarantee initialization of beans that the inner bean depends on.</span></span><br><span class="line">String[] dependsOn = mbd.getDependsOn();</span><br><span class="line"><span class="keyword">if</span> (dependsOn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String dependsOnBean : dependsOn) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName);</span><br><span class="line"><span class="keyword">this</span>.beanFactory.getBean(dependsOnBean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[2!]</span></span><br><span class="line"><span class="comment">// Actually create the inner bean instance now...</span></span><br><span class="line"><span class="comment">//[3]实际创建</span></span><br><span class="line">Object innerBean = <span class="keyword">this</span>.beanFactory.createBean(actualInnerBeanName, mbd, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">if</span> (innerBean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line"><span class="keyword">boolean</span> synthetic = mbd.isSynthetic();</span><br><span class="line">innerBean = <span class="keyword">this</span>.beanFactory.getObjectFromFactoryBean(</span><br><span class="line">(FactoryBean&lt;?&gt;) innerBean, actualInnerBeanName, !synthetic);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (innerBean <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">innerBean = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> innerBean;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Cannot create inner bean '"</span> + innerBeanName + <span class="string">"' "</span> +</span><br><span class="line">(mbd != <span class="keyword">null</span> &amp;&amp; mbd.getBeanClassName() != <span class="keyword">null</span> ? <span class="string">"of type ["</span> + mbd.getBeanClassName() + <span class="string">"] "</span> : <span class="string">""</span>) +</span><br><span class="line"><span class="string">"while setting "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//[3!]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>总结:<ul><li>xml中<value>类型对应bd#TypeString,&lt;property name=“xx”,value=“xx”&gt;,若该类型没有转换器,则直接异常</li><li>xml中集合类型对应bd#managerXX,若内部泛型不存在转换器,则异常</li><li><ref>对应RuntimeBeanReference,若beanFactory中不存在该bean,则异常</li><li><idRef> 对应RuntimeBeanNameReference,实际类型为String,若beanFactory不存在该bean,则异常</li><li>匿名bean对应BeanHold,实际每一个正常<bean>也是如此创建,关于xml解析参考<a href="http://localhost:4000/2020/02/11/spring%E5%B8%B8%E8%A7%81/#xml%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">xml解析</a></li></ul></li></ul><h5 id="开始初始化"><a class="header-anchor" href="#开始初始化">¶</a>开始初始化</h5><figure class="highlight java"><figcaption><span>AbstractAutoWireCapableBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化bean 完成 aware 接口调用   before init after调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">invokeAwareMethods(beanName, bean);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">invokeAwareMethods(beanName, bean);<span class="comment">//调用bean实现的aware接口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object wrappedBean = bean;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName); <span class="comment">//调用BeanPostProcess.before函数,对bean做进行处理,spring的aop就是这么整合进ioc的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">invokeInitMethods(beanName, wrappedBean, mbd); <span class="comment">//调用实现了InitializingBean接口函数,然后再调用bean定义的init-method</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); <span class="comment">//调用after</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wrappedBean; <span class="comment">//返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//aware接口有三种 name classLoader  beanFactory</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareMethods</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">((BeanNameAware) bean).setBeanName(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">ClassLoader bcl = getBeanClassLoader();</span><br><span class="line"><span class="keyword">if</span> (bcl != <span class="keyword">null</span>) &#123;</span><br><span class="line">((BeanClassLoaderAware) bean).setBeanClassLoader(bcl);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">((BeanFactoryAware) bean).setBeanFactory(AbstractAutowireCapableBeanFactory.<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//init的调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeInitMethods</span><span class="params">(String beanName, <span class="keyword">final</span> Object bean, @Nullable RootBeanDefinition mbd)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isInitializingBean = (bean <span class="keyword">instanceof</span> InitializingBean);</span><br><span class="line"><span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="keyword">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">"afterPropertiesSet"</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Invoking afterPropertiesSet() on bean with name '"</span> + beanName + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedExceptionAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">((InitializingBean) bean).afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line"><span class="keyword">throw</span> pae.getException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">((InitializingBean) bean).afterPropertiesSet(); <span class="comment">//接口在前</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; bean.getClass() != NullBean<span class="class">.<span class="keyword">class</span>) </span>&#123; <span class="comment">//init-method在后</span></span><br><span class="line">String initMethodName = mbd.getInitMethodName();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">!(isInitializingBean &amp;&amp; <span class="string">"afterPropertiesSet"</span>.equals(initMethodName)) &amp;&amp;</span><br><span class="line">!mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/05/21/ioc/bean%E5%91%A8%E6%9C%9F.png" class=""><ul><li>注意InstantiationAwareBeanPostProcessor 和des…processer的特殊性</li><li>aop的织入就是spring实现了一个BeanPostProcesser实现的</li></ul><h4 id="关于单例bean的生命周期和循环依赖问题"><a class="header-anchor" href="#关于单例bean的生命周期和循环依赖问题">¶</a>关于单例bean的生命周期和循环依赖问题</h4><ul><li>spring通过使singletonsCurrentlyInCreation来表示正在创建中的单例,正在创建中说明该bean至少没有完成所有属性的注入,<br>简单来说就是singletonObject = singletonFactory.getObject();该函数没有返回</li><li>spring通过一个earlySingletonObjects来存放一个通过反射创建,但是但是没有完成赋值的单例,当进行该单例的属性注入时,也许会遇到循环依赖的情况,此时该map就起了作用</li><li>spring 通过</li></ul><figure class="highlight java"><figcaption><span>DefaultSingletonBeanRegistry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行单例创建时,当该bean无异常,则将该bean放置到map中</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeSingletonCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class="keyword">this</span>.singletonsCurrentlyInCreation.add(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCurrentlyInCreationException(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当单例创建完毕,remove map</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterSingletonCreation</span><span class="params">(String beanName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.inCreationCheckExclusions.contains(beanName) &amp;&amp; !<span class="keyword">this</span>.singletonsCurrentlyInCreation.remove(beanName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Singleton '"</span> + beanName + <span class="string">"' isn't currently in creation"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//首次创建单例时,在属性注入前,保存该单例工厂</span></span><br><span class="line"><span class="comment">//这个函数被单例创建完成前调用,和下边的函数相互其作用</span></span><br><span class="line"><span class="comment">//我认为下函数中this.earlySingletonObjects.remove(beanName)不应该存在的理由</span></span><br><span class="line"><span class="comment">//1.创建一个新的单例,并缓存单例工厂 2.存在循环依赖去尝试获取早期单例 3.通过单例工厂获取单例后,存入earlySingletonObjects缓存,供应更深的循环调用</span></span><br><span class="line"><span class="comment">//那么当嵌套的引用创建结束并返回时,总会返回到早期单例中,并结束改单例,根本没有机会再执行addSingletonFactory函数,那么这个remove的意义何在</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingletonFactory</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">Assert.notNull(singletonFactory, <span class="string">"Singleton factory must not be null"</span>);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line"><span class="keyword">this</span>.singletonFactories.put(beanName, singletonFactory); <span class="comment">//存储单例创建工厂,实际就是返回一个早期引用</span></span><br><span class="line"><span class="comment">//我目前认为该语句不应该存在,原因是如果要进行remove就应该先进行put,而put逻辑在下文中,put的前提是singletonFactory!=null</span></span><br><span class="line"><span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尝试命中缓存单例</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">singletonObject = singletonFactory.getObject();</span><br><span class="line"><span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line"><span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singletonObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当一个单例完成后执行</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line"><span class="keyword">this</span>.singletonObjects.put(beanName, singletonObject);</span><br><span class="line"><span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Context的逻辑"><a class="header-anchor" href="#Context的逻辑">¶</a>Context的逻辑</h4><h5 id="体系概述"><a class="header-anchor" href="#体系概述">¶</a>体系概述</h5><ul><li>公共的抽象层AbstractApplicationContext</li></ul><img src="/2019/05/21/ioc/AbstractApplicationContext.png" class="" title="AbstractApplicationContext"><p>由该抽象层实现了公共逻辑,特别是refresh函数的基本逻辑,由该接口分化了两种<code>AbstractRefreshableApplicationContext</code>以及<code>GenericApplicationContext</code>,<br>从实现功能上来说,spring特别实现了<code>WebApplicationContext</code>用以表示web应用的Context接口</p><ul><li>AbstractRefreshableApplicationContext</li></ul><img src="/2019/05/21/ioc/AbstractRefreshableApplicationContext.png" class="" title="AbstractRefreshableApplicationContext"><p>典型的实现为<code>ClassPathXmlApplicationContext</code></p><ul><li>GenericApplicationContext</li></ul><img src="/2019/05/21/ioc/GenericApplictionContext.png" class="" title="GenericApplictionContext"><p>典型的如springBoot中的<code>AnnotationConfigServletWebApplicationContext</code></p><ul><li>WebApplicationContext</li></ul><img src="/2019/05/21/ioc/WebApplicationContext.png" class="" title="WebApplicationContext"><p><code>WebApplicationContext</code>和上述两种类型并非是对立面,可以任意组合,功能性接口,表示该context是作为web应用使用.</p><ul><li>ARC和GC的区别<ul><li>前者支持多次调用<code>refresh</code>函数重新创建内部beanFactory,后者不会重新销毁内部bf,详情参考<code>AC#refreshBeanFactory</code>函数</li><li>后者实现了<code>BeanDefinitionRegistry</code>接口,因此可以使用多种BeanDefinitionReader加载,源码注释由一段代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GenericApplicationContext ctx = <span class="keyword">new</span> GenericApplicationContext();</span><br><span class="line"> XmlBeanDefinitionReader xmlReader = <span class="keyword">new</span> XmlBeanDefinitionReader(ctx);</span><br><span class="line"> xmlReader.loadBeanDefinitions(<span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>));</span><br><span class="line"> PropertiesBeanDefinitionReader propReader = <span class="keyword">new</span> PropertiesBeanDefinitionReader(ctx);</span><br><span class="line"> propReader.loadBeanDefinitions(<span class="keyword">new</span> ClassPathResource(<span class="string">"otherBeans.properties"</span>));</span><br><span class="line"> ctx.refresh();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="共同逻辑"><a class="header-anchor" href="#共同逻辑">¶</a>共同逻辑</h5><img src="/2019/05/21/ioc/Context%E9%80%BB%E8%BE%91.png" class="" title="抽象Context逻辑"><ul><li>AbstractApplicationContext#refresh概要</li></ul><figure class="highlight java"><figcaption><span>AbstractApplicationContext</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------构造器-------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建资源解析器</span></span><br><span class="line"> <span class="keyword">this</span>.resourcePatternResolver = getResourcePatternResolver();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractApplicationContext</span><span class="params">(@Nullable ApplicationContext parent)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>();</span><br><span class="line"> setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------------------ApplicationContext的核心逻辑--------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"><span class="comment">//设置一些标志和启动数据</span></span><br><span class="line">prepareRefresh();</span><br><span class="line"><span class="comment">//两者情况:</span></span><br><span class="line"><span class="comment">//对于AbstractRefreshableApplicationContext子类,此步骤中完成了xml--&gt;beanDefinition的解析</span></span><br><span class="line"><span class="comment">//对于GenericApplicationContext,仅仅是设置一个factoryId</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">//向beanFactory添加了一些bean</span></span><br><span class="line">prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//有些功能是通过,spring的逻辑是在此处提供了一个方法可以对配置好的factory做出一些修改</span></span><br><span class="line">postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动BeanFactoryPostProcessors</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册beanFactory中的BeanPostProcessors,这是为了提前将注册好的BeanProcess初始化,为了之后用户bean的处理做准备</span></span><br><span class="line"><span class="comment">//比如说注解ioc注入就是通过AutowiredAnnotationBeanPostProcessor完成的</span></span><br><span class="line"><span class="comment">//自动代理是通过AbstractAdvisorAutoProxyCreator的子类完成的</span></span><br><span class="line">registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化消息源,消息源即国际化处理</span></span><br><span class="line">initMessageSource();</span><br><span class="line"> <span class="comment">// 初始化事件广播器,较为好理解的东西</span></span><br><span class="line">initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize other special beans in specific context subclasses.</span></span><br><span class="line"><span class="comment">// 由子类context来实现一部分独有的逻辑,如boot中servlet会创建服务器</span></span><br><span class="line">onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for listener beans and register them.</span></span><br><span class="line">registerListeners();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有非lazy的bean,context提前getBean,而不是想beanFactory那样</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Last step: publish corresponding event.</span></span><br><span class="line">finishRefresh();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line"><span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">destroyBeans();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset 'active' flag.</span></span><br><span class="line">cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate exception to caller.</span></span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// Reset common introspection caches in Spring's core, since we</span></span><br><span class="line"><span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">resetCommonCaches();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepareRefresh:设置标记,处理env</li></ul><figure class="highlight java"><figcaption><span>AbstractBeanFactory#prepareRefresh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------设置标志,将env放置到内部属性中-------------------------</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// Switch to active.</span></span><br><span class="line"> <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line"> <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</span><br><span class="line"> <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line"> <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line"> logger.trace(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> logger.debug(<span class="string">"Refreshing "</span> + getDisplayName());</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//一般来说是webAC通过env设置ServletContext的值,env的创建者就是Context的创建者,如SpringApplication</span></span><br><span class="line"> initPropertySources();</span><br><span class="line"> <span class="comment">//初始化早期事件监听器和早期事件,这两个属性和下文中提及的事件有关</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line"> <span class="keyword">this</span>.earlyApplicationListeners = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.applicationListeners);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="comment">// Reset local application listeners to pre-refresh state.</span></span><br><span class="line"> <span class="keyword">this</span>.applicationListeners.clear();</span><br><span class="line"> <span class="keyword">this</span>.applicationListeners.addAll(<span class="keyword">this</span>.earlyApplicationListeners);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Allow for the collection of early ApplicationEvents,</span></span><br><span class="line"> <span class="comment">// to be published once the multicaster is available...</span></span><br><span class="line"> <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>obtainFreshBeanFactory:获取BF,子类出现分歧<br>这里的实现就明确说明的上文提及的两种实现的区别</li></ul><figure class="highlight java"><figcaption><span>obtainFreshBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------AbstractApplicationContext---------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">refreshBeanFactory();</span><br><span class="line"><span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------GenericApplictionContext-----------------------</span></span><br><span class="line"><span class="comment">//不做任何操作,仅仅标记id</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshed.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"GenericApplicationContext does not support multiple refresh attempts: just call 'refresh' once"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.beanFactory.setSerializationId(getId());</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//返回 内部一直保持的BF</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------AbstractRefreshableApplicationContext-------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">destroyBeans();</span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">DefaultListableBeanFactory beanFactory = createBeanFactory();</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line"><span class="comment">//设置覆盖以及是否允许早期引用</span></span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line"><span class="comment">//由子类实现,典型的xml..Reader / Groovy /Annotation</span></span><br><span class="line">loadBeanDefinitions(beanFactory);</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"I/O error parsing bean definition source for "</span> + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ConfigurableListableBeanFactory <span class="title">getBeanFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"BeanFactory not initialized or already closed - "</span> +</span><br><span class="line"><span class="string">"call 'refresh' before accessing beans via the ApplicationContext"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.beanFactory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>prepareBeanFactory:配置bF</li></ul><figure class="highlight java"><figcaption><span>prepareBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Tell the internal bean factory to use the context's class loader etc.</span></span><br><span class="line">beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line">beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</span><br><span class="line">beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个ApplicationContextAwareProcessor,用来处理Bf处理的三种aware之外的aware接口</span></span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</span><br><span class="line"><span class="comment">// autowire忽略的接口</span></span><br><span class="line">beanFactory.ignoreDependencyInterface(EnvironmentAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">beanFactory.ignoreDependencyInterface(ResourceLoaderAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">beanFactory.ignoreDependencyInterface(MessageSourceAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">beanFactory.ignoreDependencyInterface(ApplicationContextAware<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span><br><span class="line"><span class="comment">// MessageSource registered (and found for autowiring) as a bean.</span></span><br><span class="line">beanFactory.registerResolvableDependency(BeanFactory<span class="class">.<span class="keyword">class</span>, <span class="title">beanFactory</span>)</span>;</span><br><span class="line">beanFactory.registerResolvableDependency(ResourceLoader<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">beanFactory.registerResolvableDependency(ApplicationEventPublisher<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line">beanFactory.registerResolvableDependency(ApplicationContext<span class="class">.<span class="keyword">class</span>, <span class="title">this</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该post将属于ApplicationListen的bean添加到当前Context中</span></span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在LTW(载入时织入),该post用来将LoadTimeWeaverAware类型的bean设置LOAD_TIME_WEAVER_BEAN_NAME</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line"><span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册环境相关bean</span></span><br><span class="line"><span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于LTW原理参考<a href="/2020/02/11/spring%E5%B8%B8%E8%A7%81/#LTW">LTW原理</a></p><ul><li>postProcessBeanFactory:上文完成标准Context初始化, 通过 子类实现,用来 载入bD,如利用内部的reader 或者添加独有的处理器</li></ul><figure class="highlight java"><figcaption><span>postProcessBeanFactory</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Modify the application context's internal bean factory after its standard</span></span><br><span class="line"><span class="comment">* initialization. All bean definitions will have been loaded, but no beans</span></span><br><span class="line"><span class="comment">* will have been instantiated yet. This allows for registering special</span></span><br><span class="line"><span class="comment">* BeanPostProcessors etc in certain ApplicationContext implementations.</span></span><br><span class="line"><span class="comment">* @param beanFactory the bean factory used by the application context</span></span><br><span class="line"><span class="comment">* 用来修改beanFacotry,一般由子类实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--------------------AnnotationConfigServletWebServerApplicationContext----------------------</span></span><br><span class="line"><span class="comment">//springBoot web项目启动的context此处的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.postProcessBeanFactory(beanFactory); <span class="comment">//ServletWebServerApplicationContext 添加了一个处理,注册了scope</span></span><br><span class="line"><span class="comment">//注册用户的bean,此处逻辑不要和ConfigClassProcess做的混淆,后者是用来处理bf#map中的@Configuration</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.basePackages != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.basePackages.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.scanner.scan(<span class="keyword">this</span>.basePackages);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.annotatedClasses.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.reader.register(ClassUtils.toClassArray(<span class="keyword">this</span>.annotatedClasses));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>invokeBeanFactoryPostProcessors:启动BeanFactoryPost</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设beanPost又添加了LTW,此时再把LTW处理器加入,原因是要尽量早的将LTW完善,至少要在用户bean创建之前</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PostProcessorRegistrationDelegate逻辑</li></ul><img src="/2019/05/21/ioc/BFP.png" class="" title="BeanFactpryProcess调用"><p>bf=BeanFactory<br>BFP=BeanFactoryPostProcessor<br>BDRP=BeanDefinitionRegistryPostProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line"><span class="comment">// [1] 若存在BeanDefinitionRegistryPostProcessor类型处理器,则首先执行该类型,</span></span><br><span class="line"><span class="comment">// 该set表示Factory中BeanDefinitionRegistryPostProcessor的bean,以及执行post后新增的</span></span><br><span class="line">Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;<span class="comment">//当该beanFactory为可注册的类型时,进行beanDef相关处理</span></span><br><span class="line"><span class="comment">//否则仅仅遍历调用factoryPost处理器</span></span><br><span class="line">BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line"><span class="comment">//factory中一般post处理器</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//registry处理器</span></span><br><span class="line">List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line"><span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">BeanDefinitionRegistryPostProcessor registryProcessor =</span><br><span class="line">(BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">registryProcessors.add(registryProcessor);<span class="comment">//registry列表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">regularPostProcessors.add(postProcessor);<span class="comment">//一般处理器列表</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line"><span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line"><span class="comment">// Separate between BeanDefinitionRegistryPostProcessors that implement</span></span><br><span class="line"><span class="comment">// PriorityOrdered, Ordered, and the rest.</span></span><br><span class="line"><span class="comment">// 将factory中的实现了BeanDefinitionRegistryPostProcessors的bean按照PriorityOrdered,</span></span><br><span class="line"><span class="comment">// Ordered顺序进行调用BeanDefinitionRegistryPostProcessors#postProcessBeanDefinitionRegistry</span></span><br><span class="line"><span class="comment">// 逻辑</span></span><br><span class="line">List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line"><span class="comment">// 执行优先post</span></span><br><span class="line">String[] postProcessorNames =</span><br><span class="line">beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span><br><span class="line"><span class="comment">// 执行顺序post</span></span><br><span class="line">postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span><br><span class="line"><span class="comment">// 执行非顺序接口post</span></span><br><span class="line"><span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">reiterate = <span class="keyword">false</span>;</span><br><span class="line">postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">processedBeans.add(ppName);</span><br><span class="line">reiterate = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">currentRegistryProcessors.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span><br><span class="line"><span class="comment">// 执行FactoryPost逻辑</span></span><br><span class="line">invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Invoke factory processors registered with the context instance.</span></span><br><span class="line">invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line"><span class="comment">// uninitialized to let the bean factory post-processors apply to them!</span></span><br><span class="line">String[] postProcessorNames =</span><br><span class="line">beanFactory.getBeanNamesForType(BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span><br><span class="line"><span class="comment">// Ordered, and the rest.</span></span><br><span class="line"><span class="comment">//找出不是BeanDefinitionRegistryPostProcessor的子类,即到此逻辑还没有执行过FactoryPost的bean的分类并执行post</span></span><br><span class="line"><span class="comment">//一下逻辑多次获取names和添加set的原因在于执行定义的bean post时可能会创建新的bean def到beanFactory中</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line"><span class="comment">// skip - already processed in first phase above</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">orderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, invoke all other BeanFactoryPostProcessors.</span></span><br><span class="line">List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line">invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Clear cached merged bean definitions since the post-processors might have</span></span><br><span class="line"><span class="comment">// modified the original metadata, e.g. replacing placeholders in values...</span></span><br><span class="line">beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//补充</span></span><br><span class="line"><span class="comment">//BeanDefinitionRegistryPostProcessor中定义</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Modify the application context's internal bean definition registry after its</span></span><br><span class="line"><span class="comment"> * standard initialization. All regular bean definitions will have been loaded,</span></span><br><span class="line"><span class="comment"> * but no beans will have been instantiated yet. This allows for adding further</span></span><br><span class="line"><span class="comment"> * bean definitions before the next post-processing phase kicks in.</span></span><br><span class="line"><span class="comment"> * 当registry完成标准初始化后内容;所有的定义仅仅载入,没有被实例化;在下一次post-process</span></span><br><span class="line"><span class="comment"> * 前添加更多的bean def</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registry the bean definition registry used by the application context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line"><span class="comment">//以springBoot中AnnotationConfigServletWebServerApplicationContext来说,</span></span><br><span class="line"><span class="comment">//它内部有一个SharedMetadataReaderFactoryContextInitializer#CachingMetadataReaderFactoryPostProcessor</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">register(registry);</span><br><span class="line">configureConfigurationClassPostProcessor(registry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加SharedMetadataReaderFactoryBean</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">BeanDefinition definition = BeanDefinitionBuilder</span><br><span class="line">.genericBeanDefinition(SharedMetadataReaderFactoryBean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line">SharedMetadataReaderFactoryBean::new)</span><br><span class="line">.getBeanDefinition();</span><br><span class="line">registry.registerBeanDefinition(BEAN_NAME, definition);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从registry获取CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME,并设置了该bean的metadataReaderFactory值</span></span><br><span class="line"><span class="comment">//该bean实际上是处理注解的处理器,由AnnotationConfigServletWebServerApplicationContext构造函数放置到</span></span><br><span class="line"><span class="comment">//beanDefMap中</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureConfigurationClassPostProcessor</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanDefinition definition = registry.getBeanDefinition(</span><br><span class="line">AnnotationConfigUtils.CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME);</span><br><span class="line">definition.getPropertyValues().add(<span class="string">"metadataReaderFactory"</span>,</span><br><span class="line"><span class="keyword">new</span> RuntimeBeanReference(BEAN_NAME));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>registerBeanPostProcessors: 提前将bd中属于bpp的创建出来,加入到bf#beanPostProcessors中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Instantiate and invoke all registered BeanPostProcessor beans,</span></span><br><span class="line"><span class="comment"> * respecting explicit order if given.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Must be called before any instantiation of application beans.</span></span><br><span class="line"><span class="comment"> * 实例化beanFactory#def中属于beanPost的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PostProcessorRegistrationDelegate中</span></span><br><span class="line"><span class="comment">//整体逻辑和上边invokefactoryPost类似</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableListableBeanFactory beanFactory, AbstractApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">//获取bean中属于post类型</span></span><br><span class="line">String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register BeanPostProcessorChecker that logs an info message when</span></span><br><span class="line"><span class="comment">// a bean is created during BeanPostProcessor instantiation, i.e. when</span></span><br><span class="line"><span class="comment">// a bean is not eligible for getting processed by all BeanPostProcessors.</span></span><br><span class="line"><span class="comment">//这个数量= beanFactory内部已经存在的+bean中属于post的,以及该函数最后一行添加的post</span></span><br><span class="line"><span class="keyword">int</span> beanProcessorTargetCount = beanFactory.getBeanPostProcessorCount() + <span class="number">1</span> + postProcessorNames.length;</span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> BeanPostProcessorChecker(beanFactory, beanProcessorTargetCount));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Separate between BeanPostProcessors that implement PriorityOrdered,</span></span><br><span class="line"><span class="comment">// Ordered, and the rest.</span></span><br><span class="line"><span class="comment">//排序执行addPost操作</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;BeanPostProcessor&gt; internalPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line"><span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">priorityOrderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">orderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">orderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">nonOrderedPostProcessors.add(pp);</span><br><span class="line"><span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">internalPostProcessors.add(pp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Re-register post-processor for detecting inner beans as ApplicationListeners,</span></span><br><span class="line"><span class="comment">// moving it to the end of the processor chain (for picking up proxies etc).</span></span><br><span class="line">beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(applicationContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initMessageSource:设置内部MessageSource,提供国际化能力<br>观察一下ApplicationContext是MessageSource的子类,典型的包装类<br><a href="http://localhost:4000/2020/02/11/spring%E5%B8%B8%E8%A7%81/#messagesource" target="_blank" rel="noopener">MessageSource</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initMessageSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123; <span class="comment">//设置内部真实的MessageSource</span></span><br><span class="line"><span class="keyword">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// Make MessageSource aware of parent MessageSource.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.messageSource <span class="keyword">instanceof</span> HierarchicalMessageSource) &#123;</span><br><span class="line">HierarchicalMessageSource hms = (HierarchicalMessageSource) <span class="keyword">this</span>.messageSource;</span><br><span class="line"><span class="keyword">if</span> (hms.getParentMessageSource() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Only set parent context as parent MessageSource if no parent MessageSource</span></span><br><span class="line"><span class="comment">// registered already.</span></span><br><span class="line">hms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Using MessageSource ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//这个dms实际 调用的父类的messageSource</span></span><br><span class="line">DelegatingMessageSource dms = <span class="keyword">new</span> DelegatingMessageSource();</span><br><span class="line">dms.setParentMessageSource(getInternalParentMessageSource());</span><br><span class="line"><span class="keyword">this</span>.messageSource = dms;</span><br><span class="line">beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="keyword">this</span>.messageSource);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No '"</span> + MESSAGE_SOURCE_BEAN_NAME + <span class="string">"' bean, using ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>initApplicationEventMulticaster:注册事件传播<br>spring事件是常见的监听器模式,参考<a href="http://localhost:4000/2019/09/05/springBoot%E5%AD%A6%E4%B9%A0%E4%B8%80/#spring%E4%B8%AD%E4%BA%8B%E4%BB%B6%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener">事件机制</a><br>在抽象类中并没有添加监听器,典型的如SpringApplication构造时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//获取spring.factories中的ApplicationListener,并添加到SpringApplication中</span></span><br><span class="line">setListeners((Collection) getSpringFactoriesInstances(ApplicationListener<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//随后在prepareContext函数中将监听器加入到了Context中</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</span><br><span class="line"><span class="keyword">this</span>.applicationEventMulticaster =</span><br><span class="line">beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Using ApplicationEventMulticaster ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</span><br><span class="line">beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No '"</span> + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + <span class="string">"' bean, using "</span> +</span><br><span class="line"><span class="string">"["</span> + <span class="keyword">this</span>.applicationEventMulticaster.getClass().getSimpleName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onRefresh:在实例化前,给Context完成自己独特的工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Template method which can be overridden to add context-specific refresh work.</span></span><br><span class="line"><span class="comment"> * Called on initialization of special beans, before instantiation of singletons.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> BeansException in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #refresh()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="comment">// For subclasses: do nothing by default.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------AbstractRefreshableWebApplicationContext-----------------------</span></span><br><span class="line"><span class="comment">//-----------------------GenericWebApplicationContext-----------------------</span></span><br><span class="line"><span class="comment">//----------------------StaticWebApplicationContext------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化ThemeSource</span></span><br><span class="line"><span class="keyword">this</span>.themeSource = UiApplicationContextUtils.initThemeSource(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//springBoot中启动了服务器</span></span><br><span class="line"><span class="comment">//---------------------ServletWebServerApplicationContext------------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onRefresh();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">createWebServer(); <span class="comment">//参考springBoot</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start web server"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>registerListeners: 处理监听器</li></ul><figure class="highlight java"><figcaption><span>AbstractApplicationContext</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Register statically specified listeners first.</span></span><br><span class="line"><span class="comment">//将context中的监听器添加到播放器中</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line"><span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line"><span class="comment">// 仅仅添加beanName,并没有实例化当前的监听器</span></span><br><span class="line">String[] listenerBeanNames = getBeanNamesForType(ApplicationListener<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</span><br><span class="line">getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Publish early application events now that we finally have a multicaster...</span></span><br><span class="line"><span class="comment">//获取早期 事件</span></span><br><span class="line">Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="keyword">this</span>.earlyApplicationEvents;</span><br><span class="line"><span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (earlyEventsToProcess != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</span><br><span class="line">getApplicationEventMulticaster().multicastEvent(earlyEvent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//-------------------------早期事件------------------------</span></span><br><span class="line"> 首先早期事件相关属性初始化在prepareRefresh,及refresh的第一步</span><br><span class="line"></span><br><span class="line"> <span class="comment">//发布事件</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(Object event, @Nullable ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">Assert.notNull(event, <span class="string">"Event must not be null"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decorate event as an ApplicationEvent if necessary</span></span><br><span class="line">ApplicationEvent applicationEvent;</span><br><span class="line"><span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEvent) &#123;</span><br><span class="line">applicationEvent = (ApplicationEvent) event;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">applicationEvent = <span class="keyword">new</span> PayloadApplicationEvent&lt;&gt;(<span class="keyword">this</span>, event);</span><br><span class="line"><span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">eventType = ((PayloadApplicationEvent&lt;?&gt;) applicationEvent).getResolvableType();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Multicast right now if possible - or lazily once the multicaster is initialized</span></span><br><span class="line"><span class="comment">//如果调用publishEvent的时候早期事件队列已经初始化,则此时不进行事件的传递,一直等到registerListeners的调用</span></span><br><span class="line"><span class="comment">//即等到context初始化了multicaster</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.earlyApplicationEvents != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.earlyApplicationEvents.add(applicationEvent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">getApplicationEventMulticaster().multicastEvent(applicationEvent, eventType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Publish event via parent context as well...</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.parent <span class="keyword">instanceof</span> AbstractApplicationContext) &#123;</span><br><span class="line">((AbstractApplicationContext) <span class="keyword">this</span>.parent).publishEvent(event, eventType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>finishBeanFactoryInitialization 完成未实例化的bean</li></ul><figure class="highlight java"><figcaption><span>AbstractApplicationContext</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finish the initialization of this context's bean factory,</span></span><br><span class="line"><span class="comment"> * initializing all remaining singleton beans.</span></span><br><span class="line"><span class="comment"> * 实例bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line"><span class="comment">// 设置一个类型转化器</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">beanFactory.setConversionService(</span><br><span class="line">beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line"><span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line"><span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line"><span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware<span class="class">.<span class="keyword">class</span>, <span class="title">false</span>, <span class="title">false</span>)</span>;</span><br><span class="line"><span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">getBean(weaverAwareName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">beanFactory.setTempClassLoader(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line"><span class="comment">// 实例化bean</span></span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//DefaultListableBeanFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Pre-instantiating singletons in "</span> + <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line"><span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line"><span class="comment">// 获取所有的bean定义名</span></span><br><span class="line">List&lt;String&gt; beanNames = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line"><span class="comment">//开始处理</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);</span><br><span class="line"><span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line"><span class="comment">//初始化FactoryBean类型</span></span><br><span class="line"><span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line"><span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line"><span class="keyword">boolean</span> isEagerInit;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">isEagerInit = AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)</span><br><span class="line">((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//一般类型</span></span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line"><span class="comment">//若bean是SmartInitializingSingleton类型则调用</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">Object singletonInstance = getSingleton(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line"><span class="keyword">final</span> SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>finishRefresh:处理LifecycleProcessor,并且发布ContextRefreshedEvent事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Clear context-level resource caches (such as ASM metadata from scanning).</span></span><br><span class="line">clearResourceCaches();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize lifecycle processor for this context.</span></span><br><span class="line">initLifecycleProcessor();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Propagate refresh to lifecycle processor first.</span></span><br><span class="line">getLifecycleProcessor().onRefresh();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Publish the final event.</span></span><br><span class="line"><span class="comment">//发布事件</span></span><br><span class="line">publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Participate in LiveBeansView MBean, if active.</span></span><br><span class="line"><span class="comment">//这实际上是一个jmx</span></span><br><span class="line">LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------initLifecycleProcessor---------------</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initLifecycleProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsLocalBean(LIFECYCLE_PROCESSOR_BEAN_NAME)) &#123;</span><br><span class="line"><span class="keyword">this</span>.lifecycleProcessor =</span><br><span class="line">beanFactory.getBean(LIFECYCLE_PROCESSOR_BEAN_NAME, LifecycleProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Using LifecycleProcessor ["</span> + <span class="keyword">this</span>.lifecycleProcessor + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">DefaultLifecycleProcessor defaultProcessor = <span class="keyword">new</span> DefaultLifecycleProcessor(); <span class="comment">//默认的lifecycleProcessor</span></span><br><span class="line">defaultProcessor.setBeanFactory(beanFactory); <span class="comment">//持有bf</span></span><br><span class="line"><span class="keyword">this</span>.lifecycleProcessor = defaultProcessor;</span><br><span class="line">beanFactory.registerSingleton(LIFECYCLE_PROCESSOR_BEAN_NAME, <span class="keyword">this</span>.lifecycleProcessor);</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"No '"</span> + LIFECYCLE_PROCESSOR_BEAN_NAME + <span class="string">"' bean, using "</span> +</span><br><span class="line"><span class="string">"["</span> + <span class="keyword">this</span>.lifecycleProcessor.getClass().getSimpleName() + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------DefaultLifecycleProcessor#onRefresh----------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">startBeans(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">this</span>.running = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总而言之就是启动lifeCycle bean的start()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startBeans</span><span class="params">(<span class="keyword">boolean</span> autoStartupOnly)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Lifecycle&gt; lifecycleBeans = getLifecycleBeans(); <span class="comment">//获取bf中LifeCycle的bean</span></span><br><span class="line">Map&lt;Integer, LifecycleGroup&gt; phases = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">lifecycleBeans.forEach((beanName, bean) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (!autoStartupOnly || (bean <span class="keyword">instanceof</span> SmartLifecycle &amp;&amp; ((SmartLifecycle) bean).isAutoStartup())) &#123;</span><br><span class="line"><span class="keyword">int</span> phase = getPhase(bean);</span><br><span class="line">LifecycleGroup group = phases.get(phase);</span><br><span class="line"><span class="keyword">if</span> (group == <span class="keyword">null</span>) &#123;</span><br><span class="line">group = <span class="keyword">new</span> LifecycleGroup(phase, <span class="keyword">this</span>.timeoutPerShutdownPhase, lifecycleBeans, autoStartupOnly);</span><br><span class="line">phases.put(phase, group);</span><br><span class="line">&#125;</span><br><span class="line">group.add(beanName, bean);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (!phases.isEmpty()) &#123;</span><br><span class="line">List&lt;Integer&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;(phases.keySet());</span><br><span class="line">Collections.sort(keys);</span><br><span class="line"><span class="keyword">for</span> (Integer key : keys) &#123;</span><br><span class="line">phases.get(key).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解的ioc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ioc.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Component#value() 表示bean名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Scope#value() 表示单例|非单例..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Scope#proxyMode()  表示该bean的代理模式  可以代理  jdk代理 cglib代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"car1"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCar</span> </span>&#123;</span><br><span class="line">    MyCar2 myCar2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Autowired#required() 表示是否一定要注入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Qualifier#value() 表示注入bean的名称</span></span><br><span class="line"><span class="comment">     * 关于注值的过程是实例化后,注入pvs之前由</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AutowiredAnnotationBeanPostProcessor#postProcessProperties(PropertyValues, Object, String) 调用过程,改变了pvs</span></span><br><span class="line"><span class="comment">     * 然后注入的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"car2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMyCar2</span><span class="params">(MyCar2 myCar2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myCar2 = myCar2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyCar2 <span class="title">getMyCar2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> myCar2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首先这两个注解是javax.annotation提供的jdk11中并没有</span></span><br><span class="line"><span class="comment">     * beanFactory调用这两个函数是在装配bean结束后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> InitDestroyAnnotationBeanPostProcessor#postProcessBeforeInitialization(Object, String)</span></span><br><span class="line"><span class="comment">     * 这种bean的init逻辑就没有用,被上边的这个处理器完成了</span></span><br><span class="line"><span class="comment">     * 以及beanFactory销毁bean时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> InitDestroyAnnotationBeanPostProcessor#postProcessBeforeDestruction(Object, String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">des</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"des"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="补充点"><a class="header-anchor" href="#补充点">¶</a>补充点</h5><ul><li>完成loadBeanDefition的都是context内部的reader,在reader的创建过程会产生特异点<ul><li>AnnotationConfigApplicationContext</li></ul>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">this</span>.scanner = <span class="keyword">new</span> ClassPathBeanDefinitionScanner(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------AnnotatedBeanDefinitionReader创建----------------</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(registry, getOrCreateEnvironment(registry));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotatedBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry, Environment environment)</span> </span>&#123;</span><br><span class="line">Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">Assert.notNull(environment, <span class="string">"Environment must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.registry = registry;</span><br><span class="line"><span class="keyword">this</span>.conditionEvaluator = <span class="keyword">new</span> ConditionEvaluator(registry, environment, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//注意此处这个工具类主动提供了一些beanFactory处理器</span></span><br><span class="line">AnnotationConfigUtils.registerAnnotationConfigProcessors(<span class="keyword">this</span>.registry);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> spirngIoc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2019/05/14/spring/"/>
      <url>/2019/05/14/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="spring"><a class="header-anchor" href="#spring">¶</a>spring</h3><h4 id="resource资源接口"><a class="header-anchor" href="#resource资源接口">¶</a>resource资源接口</h4><figure class="highlight java"><figcaption><span>测试</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只用管三个实现 ClassPathResource FileSystemResource ServletContextResource</span></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(path, (ClassLoader) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileSystemResource</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">Assert.notNull(path, <span class="string">"Path must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.path = StringUtils.cleanPath(path);</span><br><span class="line"><span class="keyword">this</span>.file = <span class="keyword">new</span> File(path);</span><br><span class="line"><span class="keyword">this</span>.filePath = <span class="keyword">this</span>.file.toPath();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServletContextResource</span><span class="params">(ServletContext servletContext, String path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// check ServletContext</span></span><br><span class="line">Assert.notNull(servletContext, <span class="string">"Cannot resolve ServletContextResource without ServletContext"</span>);</span><br><span class="line"><span class="keyword">this</span>.servletContext = servletContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// check path</span></span><br><span class="line">Assert.notNull(path, <span class="string">"Path is required"</span>);</span><br><span class="line">String pathToUse = StringUtils.cleanPath(path);</span><br><span class="line"><span class="keyword">if</span> (!pathToUse.startsWith(<span class="string">"/"</span>)) &#123;</span><br><span class="line">pathToUse = <span class="string">"/"</span> + pathToUse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.path = pathToUse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分别从classpath  系统文件  web路径获取数据</span></span><br></pre></td></tr></table></figure><ul><li>ant风格,使用ResourceLoader子类才使用的<ul><li>*匹配任意字符</li><li>**匹配多个路径</li><li>?匹配一个字符</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * classpath**表示匹配所有的类路径,类路径可以通过idea启动项目时查看-classpath</span></span><br><span class="line"><span class="comment">   *对于maven项目可以知道,父-子项目的关系,仅仅是子项目会包含父项目的dependence,如果要包含父项目要主动dependence</span></span><br><span class="line"><span class="comment">* 该函数的启动命令为</span></span><br><span class="line"><span class="comment">* "C:\Program Files\Java\jdk-12\bin\java.exe" 省略一部分 -classpath</span></span><br><span class="line"><span class="comment">* F:\code\javaProject\app\springTest\target\test-classes;F:\code\javaProject\app\springTest\target\classes;F:\code\javaProject\app\jcf\target\classes;</span></span><br><span class="line"><span class="comment">* 上边就包含了本项目和依赖的同级子项目</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">antResource</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          Resource resources[]= <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(<span class="string">"classpath*:test.xml"</span>);</span><br><span class="line">          <span class="keyword">for</span> (Resource resource:resources)</span><br><span class="line">              System.out.println(resource.exists());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>前缀</th><th>实例</th><th>对应资源</th></tr></thead><tbody><tr><td>classpath:</td><td>classpath:test.xml</td><td>classpath路径</td></tr><tr><td>file:</td><td>file:d:/1.txt</td><td>系统文件,可以使用相对路径</td></tr><tr><td>http://</td><td><a href="http://localhost:8080/test.xml" target="_blank" rel="noopener">http://localhost:8080/test.xml</a></td><td>url</td></tr><tr><td>ftp://</td><td>…</td><td>ftp服务器</td></tr><tr><td>无前缀</td><td>com/smart/xx.xml</td><td></td></tr></tbody></table><h4 id="IOC"><a class="header-anchor" href="#IOC">¶</a>IOC</h4><h5 id="BeanFactory体系"><a class="header-anchor" href="#BeanFactory体系">¶</a>BeanFactory体系</h5><h6 id="工厂模式"><a class="header-anchor" href="#工厂模式">¶</a>工厂模式</h6><p>简单来说工厂模式就是通过特定的工厂类来创建对象,bean工厂可以理解为对所有bean进行创建的类,工厂模式可见设计模式部分.</p><figure class="highlight java"><figcaption><span>使用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beanFactoryTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span>  resource= <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResource(<span class="string">"classpath:spTest.xml"</span>);</span><br><span class="line">      Assert.notNull(resource,<span class="string">"未找到"</span>);</span><br><span class="line">      <span class="keyword">var</span> factory=<span class="keyword">new</span> DefaultListableBeanFactory();</span><br><span class="line">      <span class="keyword">var</span> xmlReader=<span class="keyword">new</span> XmlBeanDefinitionReader(factory);</span><br><span class="line">      xmlReader.loadBeanDefinitions(resource);</span><br><span class="line">      System.out.println(factory.getBean(<span class="string">"car"</span>,Car<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">      System.out.println(factory.getBean(<span class="string">"car"</span>,Car<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">      System.out.println(factory.getBean(<span class="string">"car"</span>,Car<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h6 id="BeanFactory和Context的关联"><a class="header-anchor" href="#BeanFactory和Context的关联">¶</a>BeanFactory和Context的关联</h6><ul><li>从关系上看是包含关系</li></ul><h6 id="IOC中各种处理器"><a class="header-anchor" href="#IOC中各种处理器">¶</a>IOC中各种处理器</h6><ul><li>aware接口 | BeanPostProcessor 接口 | init |des</li><li>InstantiationAwareBeanPostProcessor 该接口实际是BeanPostProcessor的子类<br>BeanFactory会在添加BeanPost的时候对InstantiationAwareBeanPostProcessor和DestructionAwareBeanPostProcessor做一个标记,供创建bean的时候使用<br>之所以其这个名字,是因为该处理器会在bean构造前后调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在bean实例化之前调用,若该函数返回非null,则表示该bean实例化结束,不进行后续处理</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若postProcessBeforeInstantiation返回了非null,则立即调用</span></span><br><span class="line"><span class="comment">//若before没有创建bean,则该函数会在bean构造之后调用,返回值true表示该bean没有创建完毕</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">postProcessAfterInstantiation</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数会在构造,自动包装之后调用,pvs表示bean的属性,通过改变该值,可以来替换注入的值</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> PropertyValues <span class="title">postProcessProperties</span><span class="params">(PropertyValues pvs, Object bean, String beanName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>DestructionAwareBeanPostProcessor</li></ul><h5 id="IOC特性"><a class="header-anchor" href="#IOC特性">¶</a>IOC特性</h5><h6 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h6><ul><li>标签:bean:name:和id的区别是前者可以随意命名,后者要遵循规范  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"./12car"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span></span></span><br><span class="line"><span class="tag">/&gt;</span> //定义一个bean</span><br></pre></td></tr></table></figure></li></ul><h6 id="属性"><a class="header-anchor" href="#属性">¶</a>属性</h6><ul><li><p>标签: P 或者property</p></li><li><p>通过set方法注入,value表示属性名,value表示直接值,ref表示引用其他bean</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--set赋值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ref"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">"22"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ref"</span> <span class="attr">ref</span>=<span class="string">"ref"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过构造器,构造器分别可以通过参数名,参数位置,参数类型进行设值并构造对象</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"ioc.xml.Ref"</span> <span class="attr">ref</span>=<span class="string">"ref"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="工厂对象"><a class="header-anchor" href="#工厂对象">¶</a>工厂对象</h6><ul><li>标签: factory-method |factory-bean | FactoryBean接口  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--工厂构建--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--非静态工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.CarFactory"</span> <span class="attr">p:name</span>=<span class="string">"car3"</span> <span class="attr">p:count</span>=<span class="string">"12"</span> <span class="attr">p:ref-ref</span>=<span class="string">"ref"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car3"</span> <span class="attr">factory-bean</span>=<span class="string">"factory"</span> <span class="attr">factory-method</span>=<span class="string">"factoryCar"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--静态工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car4"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.CarFactory"</span> <span class="attr">factory-method</span>=<span class="string">"staticFactoryCar"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--实现BeanFactory的泛型工厂--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car5"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.MyBeanFactory"</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>关于工厂模式,我们可以在要通过spring某些本身就是工厂模式的类的情况下使用</li><li>FactoryBean接口是spring提供的接口,实现该接口的类用于创建bean,通过带有&amp;前缀获取bean可以获取到该实例本身</li></ul><h6 id="注值protype使用"><a class="header-anchor" href="#注值protype使用">¶</a>注值protype使用</h6><ul><li><p>字面量:即prototype中使用value,当出现特殊需要转义的字符如<code>&lt;</code>使用<code>&amp;lt</code>,或者使用<code>&lt;![CDATA[数据]]&gt;</code>来填写</p></li><li><p>引用:通过ref来引用其他bean,如果使用p标签则无法指定parent,用来引用父Context中的bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//pSpring.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//xmlSpring.xml</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car6"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ref"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ref</span> <span class="attr">parent</span>=<span class="string">"p"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//可以引用父Context中的bean</span><br></pre></td></tr></table></figure></li><li><p>内部bean:类似于匿名bean,这种bean不能被别人引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内部bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car7"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">p:name</span>=<span class="string">"car7"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ref"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>null值,通过<null/>标签</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--null值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car8"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">p:name</span>=<span class="string">"car8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ref"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span>&gt;</span><span class="tag">&lt;/<span class="name">null</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>级联:即可以对bean内部某个域的属性进行赋值,前提是该域被创建,可以多级级联</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!--级联--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car9"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">p:name</span>=<span class="string">"car9"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cascade.a"</span> <span class="attr">value</span>=<span class="string">"12"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//car</span><br><span class="line">private Cascade cascade=new Cascade();</span><br></pre></td></tr></table></figure></li><li><p>集合类属性</p><ul><li>List和set:list属性的值可以为匿名bean,引用bean,或者字面量,Set类型类似</li><li>Map和properties,稍微注意一下语法就好了</li><li>集合支持通过merger属性和指定了parent的bean进行属性合并<ul><li>value-type,可以指定当前集合类型,实际不指定也没有问题,仅仅区别在于spring源码类型转换过程</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ref"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"col"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.CollectionIoc"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--list--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value-ref</span>=<span class="string">"ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>ceshi<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>集合bean<br>通过util标签可以配置集合类型的bean<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"setBean"</span> <span class="attr">set-class</span>=<span class="string">"java.util.HashSet"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"ref"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></span><br></pre></td></tr></table></figure></p><img src="/2019/05/14/spring/bean%E5%AF%B9%E8%B1%A1.png" class=""></li></ul><p>这个图中说明的是作为属性的标签,在能够填入属性的位置就这些,再加上entery,配合spring语法很好理解</p><h6 id="自动装配"><a class="header-anchor" href="#自动装配">¶</a>自动装配</h6><p>autowire=  byName byType constructor autodetect,这是xml配置的属性和注解配置是两个方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动装配--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car10"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span>  <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h6 id="方法注入"><a class="header-anchor" href="#方法注入">¶</a>方法注入</h6><p>通过CGlib进行方法增强来完成注入</p><ul><li>lookup:用来解决单例中每次调用获取新的域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;ref2&quot; class&#x3D;&quot;ioc.xml.Ref&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;car11&quot; class&#x3D;&quot;ioc.xml.Car&quot;&gt;</span><br><span class="line">        &lt;lookup-method name&#x3D;&quot;getRef&quot; bean&#x3D;&quot;ref2&quot;&gt;&lt;&#x2F;lookup-method&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">- replaceed-method,实现spring提供的MethodReplacer接口</span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">  &lt;!--方法替换--&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;repalce&quot; class&#x3D;&quot;ioc.xml.MyReplace&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;car12&quot; class&#x3D;&quot;ioc.xml.Car&quot;&gt;</span><br><span class="line">&lt;replaced-method name&#x3D;&quot;getRef&quot; replacer&#x3D;&quot;repalce&quot;&gt;&lt;&#x2F;replaced-method&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><h6 id="bean之间的关系"><a class="header-anchor" href="#bean之间的关系">¶</a>bean之间的关系</h6><ul><li>父子继承|依赖|引用  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean关系--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--继承--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carP"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">abstract</span>=<span class="string">"true"</span> <span class="attr">p:count</span>=<span class="string">"10"</span> <span class="attr">p:ref-ref</span>=<span class="string">"ref"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car13"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">parent</span>=<span class="string">"carP"</span> <span class="attr">p:name</span>=<span class="string">"car13"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car14"</span> <span class="attr">class</span>=<span class="string">"ioc.xml.Car"</span> <span class="attr">depends-on</span>=<span class="string">"car13"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="补充"><a class="header-anchor" href="#补充">¶</a>补充</h6><ul><li>idref:充当bean的String属性,表示其他bean的id,如果不存在该id,则getBean过程抛出异常  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"test.teacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"test.teacher"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--teacherId属性为String类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacherId"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">idRef</span> <span class="attr">bean</span>=<span class="string">"tacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> 使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论六</title>
      <link href="/2019/05/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%85%AD/"/>
      <url>/2019/05/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="MYSQL相关"><a class="header-anchor" href="#MYSQL相关">¶</a>MYSQL相关</h3><h4 id="储存过程和函数"><a class="header-anchor" href="#储存过程和函数">¶</a>储存过程和函数</h4><h5 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#储存过程</span></span><br><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">    [DEFINER = &#123; <span class="keyword">user</span> | <span class="keyword">CURRENT_USER</span> &#125;]</span><br><span class="line">    <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])</span><br><span class="line">    [characteristic ...] routine_body</span><br><span class="line"><span class="comment">#函数</span></span><br><span class="line"><span class="keyword">CREATE</span> </span><br><span class="line">    [DEFINER= &#123;<span class="keyword">user</span>|<span class="keyword">CURRENT_USER</span>&#125;]</span><br><span class="line">    <span class="keyword">FUNCTION</span> fun_name ([func_parameter:[,...]])</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">type</span></span><br><span class="line">[characteristic...] routine_body</span><br><span class="line"></span><br><span class="line"><span class="comment">#proc_parameter:</span></span><br><span class="line">    [ <span class="keyword">IN</span> | <span class="keyword">OUT</span> | INOUT ] param_name <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#func_parameter:</span></span><br><span class="line">    param_name <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#type:</span></span><br><span class="line">    <span class="keyword">Any</span> valid MySQL <span class="keyword">data</span> <span class="keyword">type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#characteristic:</span></span><br><span class="line">    <span class="keyword">COMMENT</span> <span class="string">'string'</span></span><br><span class="line">  | <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span></span><br><span class="line">  | [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span></span><br><span class="line">  | &#123; CONTAINS <span class="keyword">SQL</span> | <span class="keyword">NO</span> <span class="keyword">SQL</span> | <span class="keyword">READS</span> <span class="keyword">SQL</span> <span class="keyword">DATA</span> | MODIFIES <span class="keyword">SQL</span> <span class="keyword">DATA</span> &#125;</span><br><span class="line">  | <span class="keyword">SQL</span> <span class="keyword">SECURITY</span> &#123; DEFINER | INVOKER &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#routine_body:</span></span><br><span class="line">    Valid <span class="keyword">SQL</span> routine <span class="keyword">statement</span>  </span><br></pre></td></tr></table></figure> <ul><li>DEFINER 表示创建的用户,默认当前用户</li><li>IN OUT INOUT 表示储存过程参数作为输入或输出</li></ul><figure class="highlight sql"><figcaption><span>简单的储存过程</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">test</span> (<span class="keyword">IN</span> arg1 <span class="built_in">int</span>,<span class="keyword">OUT</span> arg2 <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> arg2 <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=arg1;</span><br><span class="line"><span class="keyword">end</span>;$$</span><br><span class="line">delimiter ;</span><br><span class="line"><span class="keyword">call</span> <span class="keyword">test</span>(<span class="number">1</span>,@a);</span><br></pre></td></tr></table></figure><p>注意在end这种流程控制语句表示结束时要有;在储存过程和函数中;不代表结束,因此要使用delimiter替换结束 符号</p><figure class="highlight sql"><figcaption><span>函数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#简单函数</span></span><br><span class="line"><span class="keyword">create</span> funciotn hello (s <span class="built_in">char</span>(<span class="number">20</span>)) <span class="keyword">returns</span> <span class="built_in">char</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">concat</span>(<span class="string">'hello'</span> ,s,<span class="string">'!'</span>)</span><br><span class="line"><span class="comment">#复杂函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> <span class="keyword">test</span>(param <span class="built_in">int</span>) <span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> sex=<span class="string">'女'</span> <span class="keyword">where</span> <span class="keyword">id</span>=param;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> @a <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>&gt;param;</span><br><span class="line">return @a;</span><br><span class="line"><span class="keyword">end</span>;$$</span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">test</span>(<span class="number">1</span>)$$</span><br></pre></td></tr></table></figure><h4 id="流程控制语句"><a class="header-anchor" href="#流程控制语句">¶</a>流程控制语句</h4><h5 id="Declear-语句"><a class="header-anchor" href="#Declear-语句">¶</a>Declear 语句</h5><ul><li>定义<ul><li>声明本地变量,游标,条件或handler</li><li>只允许出现在begin…end语句中而且必须出现在第一行</li><li>Declare的顺序也有要求，通常是先声明本地变量，再是游标(CURSOR)，然后是条件和HANDLER</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> <span class="keyword">test</span>(<span class="keyword">IN</span> arg1 <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> xname <span class="built_in">varchar</span>(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">declare</span> xsex <span class="built_in">char</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">name</span>,sex <span class="keyword">into</span> xname,xsex <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=arg1;</span><br><span class="line"><span class="keyword">select</span> xname,xsex;</span><br><span class="line"><span class="keyword">end</span>;$$ </span><br></pre></td></tr></table></figure>   <h5 id="流程控制"><a class="header-anchor" href="#流程控制">¶</a>流程控制</h5><h6 id="case语句"><a class="header-anchor" href="#case语句">¶</a>case语句</h6><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CASE case_value</span><br><span class="line">    WHEN when_value THEN statement_list</span><br><span class="line">    [WHEN when_value THEN statement_list] ...</span><br><span class="line">    [ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者:</span></span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line">    <span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list</span><br><span class="line">    [<span class="keyword">WHEN</span> search_condition <span class="keyword">THEN</span> statement_list] ...</span><br><span class="line">    [<span class="keyword">ELSE</span> statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">CASE</span></span><br></pre></td></tr></table></figure><ul><li>case_value与when_value依次做相等对比，如果相等则执行对应的后面的SQL语句，否则接着对比；</li><li>当search_condition满足true/1的结果时，则执行对应的SQL语句，否则执行else对应的SQL语句；</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">#之前的教师的例子</span></span><br><span class="line"><span class="keyword">select</span> 教师号,<span class="keyword">sum</span>(星期一),... <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> <span class="string">'教师号'</span>,<span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">day</span>=<span class="number">1</span> <span class="keyword">and</span> up <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">as</span> <span class="string">'星期一'</span>,..from teacher) A <span class="keyword">group</span> <span class="keyword">by</span> 教师号;</span><br><span class="line"><span class="comment">#例子</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> test2(<span class="keyword">sid</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> v <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> gender <span class="keyword">into</span> v <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=<span class="keyword">sid</span>;</span><br><span class="line">case v </span><br><span class="line">when v=1 then <span class="keyword">update</span> student <span class="keyword">set</span> sex=<span class="string">'女'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="keyword">sid</span>;</span><br><span class="line">when v&gt;0 then update student set sex='男' where id&gt;sid;</span><br><span class="line">else </span><br><span class="line"><span class="keyword">update</span> students <span class="keyword">set</span> sex=<span class="string">'男'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="keyword">sid</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>;</span><br><span class="line"><span class="keyword">end</span>;$$</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论五</title>
      <link href="/2019/05/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%94/"/>
      <url>/2019/05/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<h3 id="其他概念"><a class="header-anchor" href="#其他概念">¶</a>其他概念</h3><h4 id="视图"><a class="header-anchor" href="#视图">¶</a>视图</h4><h5 id="视图的特点"><a class="header-anchor" href="#视图的特点">¶</a>视图的特点</h5><ul><li>虚表,从基本表或视图导出的表</li><li>视图是定义,不存放数据</li><li>当基本表数据改变时,从视图查询的数据也会改变</li></ul><h5 id="定义视图"><a class="header-anchor" href="#定义视图">¶</a>定义视图</h5><p><code>CREATE VIEW &lt;视图名&gt; [(&lt;列名&gt;[,&lt;列名&gt;...])] AS 子查询 [WITH CHECK OPTION]</code></p><ul><li>WITH CHECK OPTION<br>对视图进行操作时,要确保满足定义时的条件(即子查询中的条件表达式)</li><li>视图中的列<ul><li>省略时则由子查询字段构成<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建信息系学生的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> cs_student <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> dept=<span class="string">'is'</span>;</span><br><span class="line"><span class="comment">#带上with check option</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> cs_student <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> dept=<span class="string">'is'</span> <span class="keyword">with</span> <span class="keyword">check</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure> </li></ul></li><li>with check option:<ul><li>insert 操作时,若添加了with check option 插入数据不满足创建view时条件则拒绝插入(MYSQL)<br><code>insert into x_student (name, age, sex, dept, entrance) values ('刘五狗',23,'男','is','2015-09-01');</code><br>只有当dept为’is’才能插入</li><li>update操作时,不能改变视图条件</li></ul></li><li>基于多个表的视图</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立信息系选修了1号课程的学生的视图（包括 学号、姓名、成绩）。 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_S1 <span class="keyword">AS</span> <span class="keyword">select</span> student.id,<span class="keyword">name</span>,grade <span class="keyword">from</span> student,sc <span class="keyword">where</span> dept=<span class="string">'is'</span> <span class="keyword">and</span> student.id=<span class="keyword">sid</span> <span class="keyword">and</span> cid=<span class="number">1</span>;</span><br></pre></td></tr></table></figure> <ul><li>基于视图的视图</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#建立信息系选修了1号课程且成绩在90分以上的 学生的视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> is_s2 <span class="keyword">as</span> <span class="keyword">select</span> * <span class="keyword">from</span> is_s1 <span class="keyword">where</span> grade&gt;<span class="number">90</span>;</span><br></pre></td></tr></table></figure> <ul><li>带有表达式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个反映学生出生年份的视图</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> bt_s <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">name</span>,<span class="number">2019</span>-age <span class="keyword">as</span> birthday <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure> <ul><li>带有分组</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将学生的学号及平均成绩定义为一个视图 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> s_g <span class="keyword">as</span> <span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">avg</span>(grade) <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>;</span><br></pre></td></tr></table></figure> <h5 id="删除视图"><a class="header-anchor" href="#删除视图">¶</a>删除视图</h5><p><code>drop view 视图名 [cascade]</code></p><h5 id="查询视图"><a class="header-anchor" href="#查询视图">¶</a>查询视图</h5><p>用户角度来看和操作表相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在信息系学生的视图中找出年龄小于20岁的学生</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> is_student <span class="keyword">where</span> age &lt;<span class="number">20</span>;</span><br><span class="line"><span class="comment">#查询选修了一号课程的信息系学生</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> is_student,sc <span class="keyword">where</span> is_student.id=sc.sid <span class="keyword">and</span> <span class="keyword">where</span> cid=<span class="number">1</span>;</span><br></pre></td></tr></table></figure> <h5 id="视图更新"><a class="header-anchor" href="#视图更新">¶</a>视图更新</h5><ul><li>有些视图无法更新<ul><li>若视图是由两个以上基本表导出的，则此视图不允许更新,即连接表无法更新</li><li>若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT 和UPDATE操作，但允许执行DELETE操作。</li><li>若视图列来自聚集函数则无法更新,如上面例子的S_G 平均成绩表,就无法更新平均成绩</li><li>若视图定义中含有GROUP BY子句，则此视图不允许更新。</li><li>若视图定义中含有DISTINCT短语，则此视图不允许更新</li><li>若视图定义中有嵌套查询，并且内层查询的FROM子句中涉及的表也是 导出该视图的基本表，则此视图不允许更新。</li></ul></li></ul><h5 id="视图的作用"><a class="header-anchor" href="#视图的作用">¶</a>视图的作用</h5><ul><li>视图能够简化用户的操作:当视图中数据不是直接来自基本表时，定义视图能够简化用户的操作<ul><li>基于多张表连接形成的视图</li><li>基于复杂嵌套查询的视图</li><li>含导出属性的视图</li></ul></li><li>视图使用户能以多种角度看待同一数据</li><li>视图对重构数据库提供了一定程度的逻辑独立性</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例：学生关系Student(Sno,Sname,Ssex,Sage,Sdept)</span><br><span class="line">“垂直”地分成两个基本表：</span><br><span class="line">SX(Sno,Sname,Sage)</span><br><span class="line">SY(Sno,Ssex,Sdept)</span><br><span class="line">通过建立一个视图Student： </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>  Student(Sno,Sname,Ssex,Sage,Sdept) <span class="keyword">AS</span>  <span class="keyword">SELECT</span>  SX.Sno,SX.Sname,SY.Ssex,SX.Sage,SY.Sdept <span class="keyword">FROM</span>  SX,SY <span class="keyword">WHERE</span>  SX.Sno=SY.Sno; </span><br><span class="line">使用户的外模式保持不变，用户的应用程序通过视图仍然能够 查找数据</span><br></pre></td></tr></table></figure> <ul><li>视图能够对机密数据提供安全保护<ul><li>对不同用户定义不同视图，使每个用户只能看到他有权看 到的数据</li></ul></li><li>适当的利用视图可以更清晰的表达查询</li></ul><h4 id="完整性约束"><a class="header-anchor" href="#完整性约束">¶</a>完整性约束</h4><ul><li>定义机制</li><li>检查机制</li><li>违约处理</li></ul><h5 id="实体完整性"><a class="header-anchor" href="#实体完整性">¶</a>实体完整性</h5><ul><li>实体完整性定义<br>由primary key定义,作用于单列|多列(表级)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列级主码</span></span><br><span class="line">在列级定义主码</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">( Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"> Sname  <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> Ssex  <span class="built_in">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sag <span class="built_in">SMALLINT</span>,</span><br><span class="line"> Sdept  <span class="built_in">CHAR</span>(<span class="number">20</span>)); </span><br><span class="line"><span class="comment">#表级主码</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student</span><br><span class="line">( Sno <span class="built_in">CHAR</span>(<span class="number">9</span>) ,</span><br><span class="line"> Sname  <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"> Ssex  <span class="built_in">CHAR</span>(<span class="number">2</span>),</span><br><span class="line"> Sag <span class="built_in">SMALLINT</span>,</span><br><span class="line"> Sdept  <span class="built_in">CHAR</span>(<span class="number">20</span>)</span><br><span class="line"> PRIMARY <span class="keyword">KEY</span> (Sno)</span><br><span class="line">); </span><br></pre></td></tr></table></figure> <ul><li>违约处理<ul><li>检查主码是否唯一,若不唯一则拒绝</li><li>检查是否为null,是null则拒绝</li></ul></li><li>数据库一般会主动创建索引,避免全表查询主码</li></ul><h5 id="参照完整性"><a class="header-anchor" href="#参照完整性">¶</a>参照完整性</h5><ul><li>定义<ul><li>定义了参照的情况,只能选择空值,或者被参照列的值</li><li>在CREATE  TABLE中用FOREIGN KEY短语定义哪些 列为外码</li><li>用REFERENCES短语指明这些外码参照哪些表的主码</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列级外键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">dept <span class="built_in">int</span> <span class="keyword">foreign</span> <span class="keyword">key</span> referneces dept(<span class="keyword">id</span>));</span><br><span class="line"><span class="comment">#表级外键</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span>,auto_increment,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">dept <span class="built_in">int</span>, </span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> referneces dept(<span class="keyword">id</span>));</span><br></pre></td></tr></table></figure> <ul><li>检查机制<ul><li>当参照组中添加元组</li><li>修改参照列中的元组或修改被参照表中的参照列</li><li>删除</li></ul></li></ul><img src="/2019/05/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%94/%E5%8F%82%E7%85%A7%E8%BF%9D%E7%BA%A6.png" class=""> <ul><li>违约处理<ul><li>拒绝（NO ACTION）执行,不允许该操作执行。该策略一般设置为默认策略</li><li>级联（CASCADE）操作,当删除或修改被参照表（Student）的一个元组造成了与参照 表（SC）的不一致，则删除或修改参照表中的所有造成不一 致的元组</li><li>设置为空值（SET-NULL）,当删除或修改被参照表的一个元组时造成了不一致，则将参照 表中的所有造成不一致的元组的对应属性设置为空值。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">#设置参照完整性违约处理</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC (</span><br><span class="line">sno <span class="built_in">char</span>(<span class="number">9</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">cno <span class="built_in">char</span>(<span class="number">9</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">grade <span class="built_in">smallint</span>,</span><br><span class="line">primary <span class="keyword">key</span> (sno,cno),</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (sno) <span class="keyword">references</span> student(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span>,</span><br><span class="line"><span class="keyword">foreign</span> <span class="keyword">key</span> (cno) <span class="keyword">references</span> course(<span class="keyword">id</span>) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">no</span> <span class="keyword">action</span>,onupdate <span class="keyword">cascade</span>);</span><br></pre></td></tr></table></figure>    <h5 id="用户定义完整性"><a class="header-anchor" href="#用户定义完整性">¶</a>用户定义完整性</h5><ul><li>定义<ul><li>列值非空not null</li><li>列值唯一unique</li><li>检查是否满足条件check</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">#检查单列满足条件</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">sname vchar(<span class="number">20</span>)</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">2</span>) <span class="keyword">check</span> (sex <span class="keyword">in</span> (<span class="string">'男'</span>,<span class="string">'女'</span>),</span><br><span class="line"><span class="keyword">CHECK</span> (Ssex=<span class="string">'女'</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'Ms.%'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>  <p>mysql似乎不能使用check约束,上例子中可以通过定义数据类型为enum(‘男’,‘女’),当取值为一个范围时只能通过触发器</p><ul><li>检查机制<br>当插入和更新时检查,若不满足则拒绝操作</li></ul><img src="/2019/05/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%94/%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F.png" class=""><h4 id="断言"><a class="header-anchor" href="#断言">¶</a>断言</h4><p>MYSQL不支持check和断言</p><h5 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h5><p><code>CREATE ASSERTION&lt;断言名&gt;&lt;CHECK 子句&gt;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">#限制数据库课程最多60人选修</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ASSERTION</span> asse_sc_db_num <span class="keyword">CHECK</span> (<span class="number">60</span>&gt;= selelct <span class="keyword">count</span>(*) <span class="keyword">from</span> course,sc <span class="keyword">where</span> sc.cid=course.id <span class="keyword">and</span> course.name=<span class="string">'数据库'</span>);</span><br><span class="line"><span class="comment">#限制每一门课程最多60名学生选修</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ASSERTION</span> ASSE_SC_CNUM1   <span class="keyword">CHECK</span>(<span class="number">60</span> &gt;= <span class="keyword">ALL</span> (<span class="keyword">SELECT</span> <span class="keyword">count</span>(*) <span class="keyword">FROM</span>  SC <span class="keyword">GROUP</span> <span class="keyword">by</span> cno) );</span><br></pre></td></tr></table></figure>  ]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论四</title>
      <link href="/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/"/>
      <url>/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<h4 id="SQL操纵"><a class="header-anchor" href="#SQL操纵">¶</a>SQL操纵</h4><h5 id="单表查询"><a class="header-anchor" href="#单表查询">¶</a>单表查询</h5><ul><li>数据查询语句关键词</li></ul><img src="/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/%E6%93%8D%E4%BD%9C%E5%8A%A8%E8%AF%8D.png" class=""><p><code>SELECT [ALL|DISTINCT] &lt;目标列表达式&gt;[,&lt;目标列表达式&gt;] … FROM &lt;表名或视图名&gt;[,&lt;表名或视图名&gt; ]…|(SELECT 语句) [AS]&lt;别名&gt; [ WHERE &lt;条件表达式&gt; ] [ GROUP BY &lt;列名1&gt; [ HAVING &lt;条件表达式&gt; ] ] [ ORDER BY &lt;列名2&gt; [ ASC|DESC ] ];</code><br>Select 语句可以对列进行计算、使用聚合函数</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算学生出生年份</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="number">2019</span>-age <span class="keyword">as</span> birthday  <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure>   <p>Where可以用在连接条件,不能使用聚合函数<br>Group By 用于最终表<br>Having 用于分组筛选,并且可以使用聚合函数<br>order dy 用户最终排序，可以使用聚合函数</p><ul><li>常见的查询条件</li></ul><img src="/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6.png" class=""><p>Like | NOT Like  使用%表示多个字符，——表示单个字符</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#匹配姓 '刘'</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  student <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span>  <span class="string">'刘%'</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure> <p>IN | NOT IN</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#表示 计算机系 数学系 信息系</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> dept <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'is'</span>,<span class="string">'ma'</span>,<span class="string">'cs'</span>);</span><br><span class="line">  </span><br></pre></td></tr></table></figure> <p>IS NULL |IS NOT NULL  作为条件是不能 使用=，update语句set x=null</p><ul><li>order by子句：该子句使用一条查询的最后，可按照多列排序</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询学生，结果由系号升序，同一系按年龄降序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> dept ,age <span class="keyword">desc</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure> <pre><code>- 聚合函数,聚合函数不能使用在where条件中</code></pre><img src="/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0.png" class=""><pre><code>- group by</code></pre><p>如未分组，则聚合函数作用于整个结果<br>如分组，聚合函数则作用于每个分组<br>按照单列或者多列，值相同的分为一组<br>分组函数默认返回给查询的是分组中的第一个元组，分组多和聚合函数连用</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询选课数大于1的学生</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">#使用条件子查询实现，注意&lt;后一定要加括号</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span>  <span class="number">1</span>&lt; (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> sc <span class="keyword">where</span> sc.sid=student.id);</span><br><span class="line"><span class="comment">#查询平均分大于90学生的学号和平均成绩</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">avg</span>(grade) <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">avg</span>(grade)&gt;<span class="number">90</span>;</span><br><span class="line"><span class="comment">#如果在where中使用聚合函数则是错误的</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">avg</span>(grade) <span class="keyword">from</span> sc <span class="keyword">where</span> <span class="keyword">avg</span>(grade&gt;<span class="number">90</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure> <h5 id="连接查询"><a class="header-anchor" href="#连接查询">¶</a>连接查询</h5><p><code>SELECT 列名 FROM 表名1,表名2.... WHERE 连接条件 AND 选择条件</code></p><ul><li>连接的原理: 1.使用嵌套循环  2.排序归并 3.索引连接</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选修2号课程,且成绩在90分以上的所有学生 学号和姓名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,<span class="keyword">id</span> <span class="keyword">from</span> student,sc <span class="keyword">where</span> student.id=sc.sid <span class="keyword">and</span> cid=<span class="number">2</span> <span class="keyword">and</span> grade &gt;<span class="number">90</span>;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>自连接:使用于无限分级,该例子中的先修课</li></ul> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看每一门课程的先修课</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc c ,sc p <span class="keyword">where</span> c.pid=p.id;</span><br><span class="line"><span class="comment">#查看每一门课的后选课</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc sc1 p,sc2 c <span class="keyword">where</span> p.id=s.pid;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>外连接<br>LEFT JOIN … on| RIGHT JOIN …ON</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看学生选课 (外连接)</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span>  sc <span class="keyword">ON</span> student.id=sc.sid; </span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>多表连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询每个学生学号,姓名,课程号,和成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> student.id,<span class="keyword">name</span>,course.id,grade <span class="keyword">FROM</span> student,sc,course <span class="keyword">WHERE</span> student.id=sc.sid <span class="keyword">AND</span> sc.cid=course.id;</span><br><span class="line"><span class="comment">#不使用自然连接</span></span><br><span class="line"><span class="keyword">SELECT</span> student.id,<span class="keyword">name</span>,course.id,grade <span class="keyword">FROM</span> student <span class="keyword">left</span> <span class="keyword">join</span> sc <span class="keyword">on</span> student.id=sc.sid <span class="keyword">left</span> <span class="keyword">join</span> course <span class="keyword">on</span> course.id=sc.cid;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>不明确使用连接语句并且不写出连接谓语的情况,连接结果就是n<em>m</em>j…数量个元组结果,连接谓语就是从这个结果集中进行筛选</p><h5 id="子查询"><a class="header-anchor" href="#子查询">¶</a>子查询</h5><p>子查询分为相关子查询和不相关子查询</p><img src="/2019/05/11/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E5%9B%9B/%E7%9B%B8%E5%85%B3%E5%AD%90%E6%9F%A5%E8%AF%A2.png" class=""><ul><li>带有in的子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询于'刘晨'一个系的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> dept <span class="keyword">IN</span> (<span class="keyword">SELECT</span> dept <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">name</span> =<span class="string">'刘晨'</span>);</span><br><span class="line"><span class="comment">#通过自连接完成</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student s1,student s2 <span class="keyword">WHERE</span> s1.name=<span class="string">'刘晨'</span> <span class="keyword">AND</span> s1.dept=s2.dept;</span><br><span class="line"><span class="comment">#查询选修了'信息系统'的学生学号和姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> student.id,student.name <span class="keyword">FROM</span> student  <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">sid</span> <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> sc.cid=(<span class="keyword">SELECT</span> course.id <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> course.name=<span class="string">'信息系统'</span>));</span><br><span class="line"><span class="comment">#通过连接完成</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student,sc,course <span class="keyword">WHERE</span> student.id=sc.sid <span class="keyword">AND</span> sc.cid=course.id <span class="keyword">AND</span> course.name =<span class="string">'信息系统'</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li>带有比较运算的子查询(&gt;,&lt;,-,&gt;=,&lt;=.!=,&lt;&gt;)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出每个学生超过他学修课平均成绩的课程</span></span><br><span class="line"><span class="keyword">SELECT</span> cid <span class="keyword">FROM</span> sc sc1 <span class="keyword">WHERE</span> sc1.grade &gt;(<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(grade) <span class="keyword">FROM</span> sc sc2 <span class="keyword">WHERE</span>  sc2.cid=sc1.id);</span><br></pre></td></tr></table></figure><ul><li>带有ANY,SOME,ALL的查询</li></ul><table><thead><tr><th>-</th><th>ANY</th><th>SOME</th><th>ALL</th></tr></thead><tbody><tr><td><code>&gt;</code> <code>&gt;=</code></td><td>最小值</td><td>最小值</td><td>最大值</td></tr><tr><td><code>&lt;</code> <code>&lt;=</code></td><td>最大值</td><td>最大值</td><td>最小值</td></tr><tr><td><code>=</code></td><td>任意值</td><td>任意值</td><td>-</td></tr><tr><td><code>&lt;&gt;</code> <code>!=</code></td><td>-</td><td>-</td><td>任意值</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询非计算机科学系中比计算机科学系任意一个 学生年龄小的学生姓名和年龄 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age &lt;<span class="keyword">ANY</span>(<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> dept=<span class="string">'cs'</span>);</span><br><span class="line"><span class="comment">#使用聚合函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,age <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> &lt; (<span class="keyword">SELECT</span> <span class="keyword">max</span>(age) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> dept =<span class="string">'cs'</span>);</span><br></pre></td></tr></table></figure><ul><li>带有EXIST的子查询<ul><li>带有exists的谓语仅仅产生ture|false</li><li>由EXISTS引起的子查询一般SELECT 使用*,因为列名一般无意义</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询选修了1号课程的学生姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> <span class="keyword">sid</span>=student.id <span class="keyword">AND</span> cid=<span class="number">1</span>);</span><br><span class="line"><span class="comment">#使用连接</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student,sc <span class="keyword">WHERE</span> student.id=sc.sid <span class="keyword">AND</span> cid=<span class="number">1</span>;</span><br><span class="line"><span class="comment">#查询选修了所有课程的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> course <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FORM</span> sc <span class="keyword">WHERE</span> student.id=sc.sid <span class="keyword">AND</span> sc.cid=courese.id));</span><br><span class="line"><span class="comment">#查看选择了A和B课程的学生</span></span><br><span class="line"> <span class="keyword">select</span> student.name,cid <span class="keyword">from</span> sc sc1,student <span class="keyword">where</span> student.id=sc1.sid <span class="keyword">and</span>  <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> sc sc2 <span class="keyword">where</span> sc1.sid=sc2.sid <span class="keyword">and</span> sc2.cid=<span class="number">1</span>) <span class="keyword">and</span> <span class="keyword">exists</span> (<span class="keyword">select</span> * <span class="keyword">from</span> sc sc3 <span class="keyword">where</span> sc3.sid=sc1.sid <span class="keyword">and</span>  sc3.cid=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#查询列可以创建临时表</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc a,(<span class="keyword">select</span> * <span class="keyword">from</span> sc  <span class="keyword">where</span> cid=<span class="number">1</span>)b,(<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">where</span> cid=<span class="number">2</span>)c <span class="keyword">where</span> a.sid=b.sid <span class="keyword">and</span> b.sid=c.sid;</span><br></pre></td></tr></table></figure><h5 id="数据更新"><a class="header-anchor" href="#数据更新">¶</a>数据更新</h5><ul><li>插入数据<br>插入元组或通过子查询插入<br><code>INSERT  INTO &lt;表名&gt; [(&lt;属性列1&gt;[,&lt;属性列2 &gt;…)]  VALUES (&lt;常量1&gt; [,&lt;常量2&gt;]… ); </code></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建系-平均年龄表并插入数据</span></span><br><span class="line">creaete dept_age (dept int unique,age smallint)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept_age (<span class="keyword">select</span> dept,<span class="keyword">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> dept <span class="keyword">having</span> dept <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>修改数据<br><code>   UPDATE  &lt;表名&gt;     SET  &lt;列名&gt;=&lt;表达式&gt;[,&lt;列名&gt;=&lt;表达式&gt;]…     [WHERE &lt;条件&gt;];</code></li><li>删除数据<br><code>DELETE  FROM     &lt;表名&gt;        [WHERE &lt;条件&gt;];</code></li><li>NULL处理<br>NOT NULL限制的列不能取空值<br>UNIQUE属性不能取空值<br>主码不能取空<br>空值和其他值算术运算为NULL<br>空值和其他值逻辑运算为UNKNOWN</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库题</title>
      <link href="/2019/05/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A2%98/"/>
      <url>/2019/05/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库题目"><a class="header-anchor" href="#数据库题目">¶</a>数据库题目</h3><h4 id="sql语句"><a class="header-anchor" href="#sql语句">¶</a>sql语句</h4><p>教师号　　星期号　是否有课<br>　1　　　　2　　　有<br>　1　　　　3　　　有<br>　2　　　　1　　　有<br>　3　　　　2　　　有<br>　1　　　　2　　　有<br>通过一条语句转换为<br>教师号　星期一　星期二　星期三<br>　1　　　　　　　2　　　1　<br>　2　　　1　　　<br>　3　　　　　　　1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 教师号,sum(星期一)as 星期一,sum(星期二) as 星期二,sum(星期三)as 星期三 from (select id as &quot;教师号&quot;,case when day&#x3D;1 and up&#x3D;1 then 1 else 0 end as 星期一,</span><br><span class="line">        case when day&#x3D;2 and up&#x3D;1 then 1 else 0 end as 星期二,</span><br><span class="line">        case when day&#x3D;3 and up&#x3D;1 then 1 else 0 end as 星期三</span><br><span class="line"> from teacher)A group by 教师号;</span><br></pre></td></tr></table></figure><p><code>要使用流程控制语句</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论三</title>
      <link href="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/"/>
      <url>/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL"><a class="header-anchor" href="#SQL">¶</a>SQL</h3><h4 id="SQL概述"><a class="header-anchor" href="#SQL概述">¶</a>SQL概述</h4><h5 id="特点"><a class="header-anchor" href="#特点">¶</a>特点</h5><ol><li>语言统一</li></ol><ul><li>将数据定义语言DDL,数据操纵语言DML,数据控制语言DCL于一体</li><li>可以独立完成数据库生命周期的全部活动</li></ul><ol start="2"><li>高度非过程化</li></ol><ul><li>和非关系模型不同,无需了解数据存储过程</li></ul><ol start="3"><li>面向集合的操作方式</li><li>同一语法采用多种使用方式</li><li>语法简介</li></ol><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/sql%E5%8A%A8%E8%AF%8D.png" class=""><h5 id="其他"><a class="header-anchor" href="#其他">¶</a>其他</h5><ol><li>三级模式结构</li></ol><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/SQL%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F.png" class=""> <ol start="2"><li>基本表</li></ol><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/SQL%E5%9F%BA%E6%9C%AC%E8%A1%A8.png" class=""> <ol start="3"><li>存储文件<br>可以理解为内模式中具体数据库实现时的真正数据存储</li><li>视图</li></ol><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E8%A7%86%E5%9B%BE.png" class=""> <h4 id="数据定义"><a class="header-anchor" href="#数据定义">¶</a>数据定义</h4><h5 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h5><h6 id="SQL对象"><a class="header-anchor" href="#SQL对象">¶</a>SQL对象</h6><p>模式定义 表定义 视图定义 索引定义</p><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E5%8F%A5.png" class=""><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1%E8%A7%A3%E9%87%8A.png" class=""><p>举个mysql的例子来说,数据库表示mysql本身,mysql的模式SCHEMA等价于database</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE XX;</span><br><span class="line">CREATE SCHEMA XX; </span><br><span class="line">#这两个行为时等价的</span><br></pre></td></tr></table></figure><p>SCHEMA就是表的集合</p><h6 id="数据字典"><a class="header-anchor" href="#数据字典">¶</a>数据字典</h6><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E6%95%B0%E6%8D%AE%E5%AD%97%E5%85%B8.png" class=""><h6 id="定义"><a class="header-anchor" href="#定义">¶</a>定义</h6><ol><li>模式</li></ol><ul><li>定义</li></ul><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E6%A8%A1%E5%BC%8F%E5%AE%9A%E4%B9%89.png" class=""><p><code>CREATE SCHEMA &lt;模式名&gt; AUTHORIZATION &lt;用户名&gt;[&lt;表定义 子句&gt;|&lt;视图定义子句&gt;|&lt;授权定义子句&gt;]</code></p><ul><li>删除<br><code>DROP SCHEMA &lt;模式名&gt; &lt;CASCADE|RESTRICT</code><ul><li>CASCADE级联:直接删除模式中数据对象</li><li>RESTRICT限制:当模式中存在数据对象(表,视图等)拒绝删除<br>这两个操作中,MYSQL只能使用部分功能</li></ul></li></ul><ol start="2"><li>表</li></ol><ul><li>定义<br><code>CREATE TABLE &lt;表名&gt; (&lt;列名&gt; &lt;数据类型&gt; [&lt;列级完整性约束&gt;],...[&lt;表级完整性约束&gt;])</code><ul><li>&lt;列级完整性约束&gt;仅仅涉及到单一列</li><li>&lt;表级完整性约束&gt;涉及到多个属性列</li></ul></li><li>例子<ul><li><p>建立“学生”表Student。学号是主码，姓名取值唯一。<br><code>CREATE TABLE Student (id INT PRIMARY KEY,name VARCHAR(20) UNIQUE,sex CHAR(20),age TINYINT,dept VARCHAR(20));</code></p></li><li><p>建立课程表<br><code>CREATE TABLE Course(id INT PRIMARY KEY ,name VARCHAR(20) UNIQUE ,pId INT, credit SMALLINT ,FOREIGN KEY (pId) REFERENCES Course(id));</code></p></li><li><p>建立选课表<br><code>CREATE TABLE SC (sId INT,cId INT, grade SMALLINT, PRIMARY KEY(sId,cId),FOREIGN KEY (cId) REFERENCES Student(id),FOREIGN KEY (cId) references Coures(id));</code></p></li></ul></li><li>数据类型<br><a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">MYSQL参考</a></li><li>修改表<br><code>ALTER TABLE &lt;表名&gt; [ADD[COLUMN] &lt;新列名&gt; &lt;数据类型&gt; [ 完整性约束 ] ] [ADD &lt;表级完整性约束&gt;] [DROP [ COLUMN ] &lt;列名&gt; [CASCADE| RESTRICT] ] [DROP CONSTRAINT&lt;完整性约束名&gt;[ RESTRICT | CASCADE ] ] [ALTER COLUMN &lt;列名&gt;&lt;数据类型&gt; ] ;</code></li></ul><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E4%BF%AE%E6%94%B9%E8%A1%A8.png" class=""><p>MYSQL中使用<code>MODIFY COLUMN &lt;列名&gt;&lt;数据类型&gt; </code> 和<code>CHANGE COLUMN  &lt;列名&gt;&lt;数据类型&gt; </code> 来修改</p><ul><li>例子<ul><li><p>向Student添加&quot;入学时间&quot;<br><code>ALTER TABLE Student ADD COLUMN entrance DATE;</code></p></li><li><p>mysql中将年龄修改为INT类型<br><code>ALERT TABLE Student MODIFY COLUMN age INT;</code></p></li><li><p>mysql对于主键的添加 删除<br><code>ALTER TABLE 表名 ADD CONSTRAINT PRIMARY KEY(列名) </code><br><code>ALTER TABLE 表名 DROP PRIMARY KEY</code><br>若要删除的主键被作为外键引用,则不能删除 | 若主键存在auto_increment则要修改该列,覆盖掉该属性,然后才能删除主键</p></li><li><p>外键约束<br><code>ALERT TABLE 表名 ADD CONSTRAINT FOREIGN KEY (列名) REFERENCES 表名(列名)</code><br><code>ALERT TABLE 表名 DROP FOREIGN KEY 外键名</code><br>通过show create table 表名可以查看外键名</p></li><li><p>唯一约束<br><code>ALTER TABLE 表名 ADD CONSTRAINT UNIQUE KEY (列名)</code><br><code>ALTER TABLE 表名 DROP (KEY|INDEX) 唯一索引名</code><br>唯一约束在mysql中通过索引删除</p></li><li><p>默认<br><code>ALTER TABLE 表名 ALTER 列名 {SET DEFAULT 值|DROP DEFAULT}</code></p></li></ul></li></ul><ol start="3"><li>索引定义</li></ol><ul><li>创建和删除<br><code>CREATE [UNIQUE] [CLUSTER] INDEX &lt;索引名&gt;</code><br><code>ALTER TABLE 表名 DROP INDEX 索引名</code></li></ul><img src="/2019/05/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%B8%89/%E8%A1%A8%E7%BB%93%E6%9E%84.png" class=""><ul><li>coures表 name为unique key、自动创建了唯一索引,pid引用了id并且创建了一个非唯一索引</li><li>sc表中,我不明白为何没有创建sid的非唯一索引,总而言之mysql创建外键时会创建一个非唯一索引<br>此处总结一部分实践操作:</li><li>mysql会给主键|外键创建索引,通过show indexes可查看</li><li>主键为唯一索引,在数据查询|插入|修改时都会对B+进行一次查询,也就是说sql语句中使用索引当作条件效率会高</li><li>mysql会给外键创建一个非唯一索引,也就是说对于外键当查询条件效率也不会低</li><li>可以猜测的是当对外键进行操作时,会根据外键约束去查询引用的键,确定是否违反了引用完整性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论二</title>
      <link href="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/"/>
      <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="关系代数"><a class="header-anchor" href="#关系代数">¶</a>关系代数</h3><h4 id="概念"><a class="header-anchor" href="#概念">¶</a>概念</h4><ul><li>关系代数语言<br>通过代数表达式来表示<code>关系</code>达到查询要求,并且计算结果在<code>关系</code>中</li><li>关系演算语言<br>通过谓词来表达查询要求</li><li>SQL 是具有关系代数和关系演算双重特点的语言</li></ul><h4 id="关系代数-v2"><a class="header-anchor" href="#关系代数-v2">¶</a>关系代数</h4><ul><li>运算对象是关系</li><li>运算结果是关系</li><li>运算符有两类,集合运算和专门的关系运算符</li></ul><h5 id="符号和记号"><a class="header-anchor" href="#符号和记号">¶</a>符号和记号</h5> <img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6.png" class="">  <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script> <script type="text/x-mathjax-config">  MathJax.Hub.Config({    tex2jax: {      inlineMath: [ ['$','$'], ["\\(","\\)"] ],      processEscapes: true    }  });</script><ol><li>$ R $关系,$ t\in R $元组,$t[A_i]$分量<br>其中A表示属性列,t表示R中一个元组</li><li></li></ol> <img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E8%AE%B0%E5%8F%B72.png" class=""><p>将$ A $理解为属性列,$ A_i$ 表示指定的某一列,即特定的一个属性所有结果<br>3. $\widehat{t_rt_s}$ 即连接的意思<br>4. 象集 $ Z_x $</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E8%B1%A1%E9%9B%86.png" class=""><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E8%B1%A1%E9%9B%86%E4%B8%BE%E4%BE%8B.png" class=""><h5 id="运算符"><a class="header-anchor" href="#运算符">¶</a>运算符</h5><h6 id="集合运算符"><a class="header-anchor" href="#集合运算符">¶</a>集合运算符</h6><p>当R和S具有相同的目n,且属性取同一域</p><ol><li>并<br>$ R\cup S $,取属于R或属于S的元组</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E5%B9%B6%E9%9B%86%E4%B8%BE%E4%BE%8B.png" class=""><ol start="2"><li>差<br>$ R-S $,取属于R但不属于S的元组</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E5%B7%AE.png" class=""><ol start="3"><li>交<br>$R\cap S$,取属于R和S的元组</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E4%BA%A4.png" class=""><ol start="4"><li>笛卡儿积<br>$R X S$ 就是连接</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E7%AC%9B%E5%8D%A1%E5%84%BF%E7%A7%AF.png" class=""><h6 id="专门的关系运算符"><a class="header-anchor" href="#专门的关系运算符">¶</a>专门的关系运算符</h6><p>1.选择<br>$\sigma _F( R )=\langle t|t \in R \cap F(t)=‘真’ \rangle $<br>F:选择条件<br>实际就是一个选择条件,理解为where语句</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E9%80%89%E6%8B%A9.png" class=""><p>2.投影</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E6%8A%95%E5%BD%B1%E5%AE%9A%E4%B9%89.png" class=""><p>可以理解为Select语句中的属性</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E6%8A%95%E5%BD%B1%E4%B8%BE%E4%BE%8B.png" class=""><p>3.连接</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E8%BF%9E%E6%8E%A5.png" class=""><p>4.除运算</p><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E9%99%A4%E8%BF%90%E7%AE%97.png" class=""><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E9%99%A4%E8%BF%90%E7%AE%97%E4%B8%BE%E4%BE%8B.png" class=""><h4 id="练习"><a class="header-anchor" href="#练习">¶</a>练习</h4><h5 id="表"><a class="header-anchor" href="#表">¶</a>表</h5><ol><li>Student</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/Student.png" class=""><ol start="2"><li>Course</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/Course.png" class=""><ol start="3"><li>SC</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/SC.png" class=""><h5 id="题目"><a class="header-anchor" href="#题目">¶</a>题目</h5><ol><li>除法</li></ol><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E4%BE%8B1.png" class=""><img src="/2019/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA%E4%BA%8C/%E4%BE%8B1%E7%BB%AD.png" class="">]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC体系</title>
      <link href="/2019/02/19/SpringMVC%E6%BA%90%E7%A0%81/"/>
      <url>/2019/02/19/SpringMVC%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h5 id="Servlet部分概念复习"><a class="header-anchor" href="#Servlet部分概念复习">¶</a>Servlet部分概念复习</h5><ul><li>ServletConfig 对应一个servlet的init para</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ServletContext 则代表了这个web应用</li><li>include 和 include</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestDispatcher</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">include</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先这两个api的作用都是进行’转发’,前者的调用结果会导致,响应处理权限转交给调用的servlet;后者还是自己<br>如下例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">X</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//直接使用forward会导致后边的相应无效,因为被x2接管了</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/x2"</span>).forward(req, resp);</span><br><span class="line">        resp.getOutputStream().write(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="DispatcherServlet"><a class="header-anchor" href="#DispatcherServlet">¶</a>DispatcherServlet</h5><ul><li>继承图</li></ul><img src="/2019/02/19/SpringMVC%E6%BA%90%E7%A0%81/DispatcherSevlet.png" class=""><ul><li>概述: 简而言之,既然这是一个servlet,查看的源码的顺序就按照servlet的生命周期进行;这个类的构造器仅仅设置了一个bool,并没有进行大量的初始化.</li><li>一个简单的xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置spring ioc容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--springMVC--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ioc容器初始化是通过ContextLoaderListener</p><h6 id="传统xml情况ioc容器创建过程"><a class="header-anchor" href="#传统xml情况ioc容器创建过程">¶</a>传统xml情况ioc容器创建过程</h6><ul><li>ContextLoaderListener:Servlet监听器</li></ul><figure class="highlight java"><figcaption><span>ContextLoaderListener</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderListener</span> <span class="keyword">extends</span> <span class="title">ContextLoader</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">  initWebApplicationContext(event.getServletContext());</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//-------------------initWebApplicationContext--------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.context == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//创建context</span></span><br><span class="line"><span class="keyword">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//初始化context,如到contextConfigLocation目录下设置xml源</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) <span class="keyword">this</span>.context;</span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"><span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line"><span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line"><span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line"><span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">ApplicationContext parent = loadParentContext(servletContext);</span><br><span class="line">cwac.setParent(parent);</span><br><span class="line">&#125;</span><br><span class="line">configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//设置context到ServletContext中</span></span><br><span class="line">servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">this</span>.context);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//-------------------createWebApplicationContext-------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createWebApplicationContext</span><span class="params">(ServletContext sc)</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt; contextClass = determineContextClass(sc);</span><br><span class="line"><span class="keyword">if</span> (!ConfigurableWebApplicationContext<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">contextClass</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Custom context class ["</span> + contextClass.getName() +</span><br><span class="line">"] is not of type [" + ConfigurableWebApplicationContext.class.getName() + "]");</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//-------------------determineContextClass---------------------------</span></span><br><span class="line">  <span class="keyword">protected</span> Class&lt;?&gt; determineContextClass(ServletContext servletContext) &#123;</span><br><span class="line">    <span class="comment">//若用户没有指定则根据defaultStrategies配置的创建一个context</span></span><br><span class="line">    <span class="comment">//实际上在springFramework web模块定义了一个ContextLoader.properties</span></span><br><span class="line">    <span class="comment">//这里默认是XmlWebApplicationContext</span></span><br><span class="line">String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);</span><br><span class="line"><span class="keyword">if</span> (contextClassName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line"><span class="string">"Failed to load custom context class ["</span> + contextClassName + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">contextClassName = defaultStrategies.getProperty(WebApplicationContext<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ClassUtils.forName(contextClassName, ContextLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(</span><br><span class="line"><span class="string">"Failed to load default context class ["</span> + contextClassName + <span class="string">"]"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用WebApplicationInitializer体系"><a class="header-anchor" href="#使用WebApplicationInitializer体系">¶</a>使用WebApplicationInitializer体系</h6><ul><li>ServletContainerInitializer:Serlvet标准提供的让第三方框架用以加载的接口<ul><li>使用参考<a href="https://blog.csdn.net/wangyangzhizhou/article/details/52013779" target="_blank" rel="noopener">ServletContainerInitializer</a></li><li>原理ContextConfig:该类是tomcat是Context的配置监听器,由<a href="/2018/10/06/tomcat/#server.xml%E5%AF%B9%E4%BA%8Ejava%E4%BB%A3%E7%A0%81%E5%8A%A0%E8%BD%BD">Digester</a>加载<figure class="highlight java"><figcaption><span>ContextConfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//该函数会被监听触发是时调用,获取HandlesTypes注解的类</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processServletContainerInitializers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;ServletContainerInitializer&gt; detectedScis;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebappServiceLoader&lt;ServletContainerInitializer&gt; loader = <span class="keyword">new</span> WebappServiceLoader&lt;&gt;(context);</span><br><span class="line">        detectedScis = loader.load(ServletContainerInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(sm.getString(</span><br><span class="line">                <span class="string">"contextConfig.servletContainerInitializerFail"</span>,</span><br><span class="line">                context.getName()),</span><br><span class="line">            e);</span><br><span class="line">        ok = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ServletContainerInitializer sci : detectedScis) &#123;</span><br><span class="line">        initializerClassMap.put(sci, <span class="keyword">new</span> HashSet&lt;Class&lt;?&gt;&gt;());</span><br><span class="line"></span><br><span class="line">        HandlesTypes ht;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ht = sci.getClass().getAnnotation(HandlesTypes<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                log.info(sm.getString(<span class="string">"contextConfig.sci.debug"</span>,</span><br><span class="line">                        sci.getClass().getName()),</span><br><span class="line">                        e);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(sm.getString(<span class="string">"contextConfig.sci.info"</span>,</span><br><span class="line">                        sci.getClass().getName()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ht == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt;[] types = ht.value();</span><br><span class="line">        <span class="keyword">if</span> (types == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; type : types) &#123;</span><br><span class="line">            <span class="keyword">if</span> (type.isAnnotation()) &#123;</span><br><span class="line">                handlesTypesAnnotations = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handlesTypesNonAnnotations = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Set&lt;ServletContainerInitializer&gt; scis =</span><br><span class="line">                    typeInitializerMap.get(type);</span><br><span class="line">            <span class="keyword">if</span> (scis == <span class="keyword">null</span>) &#123;</span><br><span class="line">                scis = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                typeInitializerMap.put(type, scis);</span><br><span class="line">            &#125;</span><br><span class="line">            scis.add(sci);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul></li><li>SpringServletContainerInitializer:spring web实现的初始化框架接口</li></ul><figure class="highlight java"><figcaption><span>SpringServletContainerInitializer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(@Nullable Set&lt;Class&lt;?&gt;&gt; webAppInitializerClasses, ServletContext servletContext)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="comment">//调用WebApplicationInitializer接口    </span></span><br><span class="line">List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (webAppInitializerClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Class&lt;?&gt; waiClass : webAppInitializerClasses) &#123;</span><br><span class="line"><span class="comment">// Be defensive: Some servlet containers provide us with invalid classes,</span></span><br><span class="line"><span class="comment">// no matter what @HandlesTypes says...</span></span><br><span class="line"><span class="keyword">if</span> (!waiClass.isInterface() &amp;&amp; !Modifier.isAbstract(waiClass.getModifiers()) &amp;&amp;</span><br><span class="line">WebApplicationInitializer<span class="class">.<span class="keyword">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">waiClass</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">initializers.add((WebApplicationInitializer)</span><br><span class="line">ReflectionUtils.accessibleConstructor(waiClass).newInstance());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Failed to instantiate WebApplicationInitializer class"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (initializers.isEmpty()) &#123;</span><br><span class="line">servletContext.log(<span class="string">"No Spring WebApplicationInitializer types detected on classpath"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">servletContext.log(initializers.size() + <span class="string">" Spring WebApplicationInitializers detected on classpath"</span>);</span><br><span class="line">AnnotationAwareOrderComparator.sort(initializers);</span><br><span class="line"><span class="keyword">for</span> (WebApplicationInitializer initializer : initializers) &#123;</span><br><span class="line">initializer.onStartup(servletContext);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>   <ul><li>WebApplicationInitializer:spring提供的真正执行逻辑的初始化接口<ul><li>AbstractAnnotationConfigDispatcherServletInitializer:<figure class="highlight java"><figcaption><span>AbstractAnnotationConfigDispatcherServletInitializer</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//ioc context 配置类,被父类调用创建ioc容器</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getRootConfigClasses();</span><br><span class="line"> <span class="comment">//web context 配置类,父类调用创建mvc容器</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt;[] getServletConfigClasses();</span><br><span class="line"> <span class="comment">//DispatchServlet 根路径</span></span><br><span class="line"> <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ul></li><li>说明<ul><li>@EnableMVC和纯使用注解无关,这个实际上引入了一个@Import,网上傻逼还是多</li><li>使用@ComponentScan和@Configuration注解就够了,这俩个注解被ConfigrutaionPoss…处理,mvc中的Context都是Annotaion…Context默认带有这个处理器</li><li>RequestMapping处理@Controller的时候不会从ioc容器中遍历,因此对于mvc组件要放在mvc容器中</li></ul></li></ul><h6 id="初始化部分"><a class="header-anchor" href="#初始化部分">¶</a>初始化部分</h6><figure class="highlight java"><figcaption><span>初始化部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//HttpServletBean#int()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过propery来设置this的属性,将web.xml中的配置信息,如init-para注入</span></span><br><span class="line"><span class="comment">// 这几个类在ioc中是非常重要的</span></span><br><span class="line">PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</span><br><span class="line"><span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</span><br><span class="line">ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">bw.registerCustomEditor(Resource<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ResourceEditor</span>(<span class="title">resourceLoader</span>, <span class="title">getEnvironment</span>()))</span>;</span><br><span class="line">initBeanWrapper(bw);</span><br><span class="line">bw.setPropertyValues(pvs, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isErrorEnabled()) &#123;</span><br><span class="line">logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">initServletBean();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//FrameworkServlet#initServletBean()</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">getServletContext().log(<span class="string">"Initializing Spring "</span> + getClass().getSimpleName() + <span class="string">" '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Initializing Servlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line"><span class="comment">//这个函数是空的,用户可以自定义实现</span></span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...日志</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简而言之,寻找父类容器,即ioc注入容器|创建mvc容器,将前者作为parent</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">initWebApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext()); <span class="comment">//ioc容器</span></span><br><span class="line">WebApplicationContext wac = <span class="keyword">null</span>; <span class="comment">//mvc容器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.webApplicationContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">wac = <span class="keyword">this</span>.webApplicationContext;</span><br><span class="line"><span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac;</span><br><span class="line"><span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cwac.getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">cwac.setParent(rootContext);</span><br><span class="line">&#125;</span><br><span class="line">configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">wac = findWebApplicationContext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wac == <span class="keyword">null</span>) &#123;</span><br><span class="line">wac = createWebApplicationContext(rootContext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.refreshEventReceived) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">onRefresh(wac);<span class="comment">//一般情况不会调用这里</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.publishContext) &#123;</span><br><span class="line">String attrName = getServletContextAttributeName();</span><br><span class="line">getServletContext().setAttribute(attrName, wac);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wac; <span class="comment">//最终返回mvc容器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureAndRefreshWebApplicationContext</span><span class="params">(ConfigurableWebApplicationContext wac)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ObjectUtils.identityToString(wac).equals(wac.getId())) &#123;</span><br><span class="line"><span class="comment">// The application context id is still set to its original default value</span></span><br><span class="line"><span class="comment">// -&gt; assign a more useful id based on available information</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.contextId != <span class="keyword">null</span>) &#123;</span><br><span class="line">wac.setId(<span class="keyword">this</span>.contextId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Generate default id...</span></span><br><span class="line">wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX +</span><br><span class="line">ObjectUtils.getDisplayString(getServletContext().getContextPath()) + <span class="string">'/'</span> + getServletName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wac.setServletContext(getServletContext());</span><br><span class="line">wac.setServletConfig(getServletConfig());</span><br><span class="line">wac.setNamespace(getNamespace());</span><br><span class="line"><span class="comment">//注册监听器,调用点在 Context#Refrsh()中进行的,具体context refresh做了那些工作,参考spring ioc|aop部分</span></span><br><span class="line">wac.addApplicationListener(<span class="keyword">new</span> SourceFilteringListener(wac, <span class="keyword">new</span> ContextRefreshListener()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// The wac environment's #initPropertySources will be called in any case when the context</span></span><br><span class="line"><span class="comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span></span><br><span class="line"><span class="comment">// use in any post-processing or initialization that occurs below prior to #refresh</span></span><br><span class="line">ConfigurableEnvironment env = wac.getEnvironment();</span><br><span class="line"><span class="keyword">if</span> (env <span class="keyword">instanceof</span> ConfigurableWebEnvironment) &#123;</span><br><span class="line">((ConfigurableWebEnvironment) env).initPropertySources(getServletContext(), getServletConfig());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">postProcessWebApplicationContext(wac);</span><br><span class="line">applyInitializers(wac);</span><br><span class="line">wac.refresh();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化组件,此处被调用的原因是因为上边注册了一个事件监听器</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initStrategies(context);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体组件分析再看这部分代码</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//各组件的基本都是存在默认情况,若用户提供了则从容器中获取</span></span><br><span class="line">initMultipartResolver(context);  <span class="comment">//处理上传文件</span></span><br><span class="line">initLocaleResolver(context);     <span class="comment">//根据不同地区,相应不同视图</span></span><br><span class="line">initThemeResolver(context);      <span class="comment">//主题风格</span></span><br><span class="line">initHandlerMappings(context); <span class="comment">//</span></span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="service逻辑"><a class="header-anchor" href="#service逻辑">¶</a>service逻辑</h5><figure class="highlight java"><figcaption><span>DispatcherServlet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果请求时include请求,则保存一份源request的数据</span></span><br><span class="line">Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">attributesSnapshot = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line"><span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">String attrName = (String) attrNames.nextElement();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向当前请求添加一些必要的属性,如WebApplicationContext  localeResolver  themeResolver  getThemeSource</span></span><br><span class="line">request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">request.setAttribute(THEME_SOURCE_ATTRIBUTE,  ());</span><br><span class="line"><span class="comment">//此处用来处理重定向,通过该类来记录信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.flashMapManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line"><span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">&#125;</span><br><span class="line">request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//核心逻辑</span></span><br><span class="line">doDispatch(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line"><span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest processedRequest = request;</span><br><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//[1] 检查是否是Multipart</span></span><br><span class="line">processedRequest = checkMultipart(request);</span><br><span class="line">multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line"><span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">noHandlerFound(processedRequest, response);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line"><span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line"><span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">applyDefaultViewName(processedRequest, mv);</span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">dispatchException = ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line"><span class="comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class="line"><span class="comment">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class="line">dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler dispatch failed"</span>, err);</span><br><span class="line">&#125;</span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class="line"><span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line"><span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line"><span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line"><span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">cleanupMultipart(processedRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="组件说明"><a class="header-anchor" href="#组件说明">¶</a>组件说明</h5><h6 id="MultipartResolver"><a class="header-anchor" href="#MultipartResolver">¶</a>MultipartResolver</h6><ul><li>作用:用来处理上传文件的解析器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在doDispatch()中被调用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> HttpServletRequest <span class="title">checkMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.multipartResolver != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.multipartResolver.isMultipart(request)) &#123;</span><br><span class="line"><span class="keyword">if</span> (WebUtils.getNativeRequest(request, MultipartHttpServletRequest<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (request.getDispatcherType().equals(DispatcherType.REQUEST)) &#123;</span><br><span class="line">logger.trace(<span class="string">"Request already resolved to MultipartHttpServletRequest, e.g. by MultipartFilter"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hasMultipartException(request)) &#123;</span><br><span class="line">logger.debug(<span class="string">"Multipart resolution previously failed for current request - "</span> +</span><br><span class="line"><span class="string">"skipping re-resolution for undisturbed error rendering"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.multipartResolver.resolveMultipart(request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MultipartException ex) &#123;</span><br><span class="line"><span class="keyword">if</span> (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.debug(<span class="string">"Multipart resolution failed for error dispatch"</span>, ex);</span><br><span class="line"><span class="comment">// Keep processing error dispatch with regular request handle below</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If not returned before: return original request.</span></span><br><span class="line"><span class="keyword">return</span> request;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//MultipartResolver接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MultipartResolver</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断是否含有文件</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isMultipart</span><span class="params">(HttpServletRequest request)</span></span>;</span><br><span class="line"><span class="comment">//将servletRequest解析成MultipartHttpServletRequest()</span></span><br><span class="line"><span class="function">MultipartHttpServletRequest <span class="title">resolveMultipart</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> MultipartException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--设置一个文件解析器--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--配置文件上传--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 设定默认编码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 设定文件上传的最大值为5MB，5*1024*1024 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"5242880"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 上传文件的临时路径 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 延迟文件解析 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--html--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/fileUpload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/fileUpload"</span>, method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FileUpLoad</span><span class="params">(@RequestParam(value = <span class="string">"file"</span>, required = <span class="keyword">false</span>)</span> MultipartFile file, HttpServletRequest  request) </span>&#123;</span><br><span class="line">      System.out.println(file);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>说明<br>在post表单提交中enctype会成为context-type</li></ul><h6 id="HandlerMapping"><a class="header-anchor" href="#HandlerMapping">¶</a>HandlerMapping</h6><h6 id=""><a class="header-anchor" href="#">¶</a></h6><h5 id="一些使用方法"><a class="header-anchor" href="#一些使用方法">¶</a>一些使用方法</h5><ul><li>开启json处理:注意如果返回bean,要带上set|get函数</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jacksonVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jacksonVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jacksonVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--springMvc配置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="关于MVC配置"><a class="header-anchor" href="#关于MVC配置">¶</a>关于MVC配置</h6><ul><li>使用xml配置一个拦截器</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myHandlerInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.light.MyInterceptor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用注解@EnableWebMvc</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//jdk&gt;=1.8</span></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> MyMvcConfig implements WebMvcConfigurer&#123;</span><br><span class="line">   <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">     registry.addInterceptor(<span class="keyword">new</span> MyInterceptor());</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>DelegatingWebMvcConfiguration:真正实现了注解配置MVC的类</li></ul>   <figure class="highlight java"><figcaption><span>DelegatingWebMvcConfiguration</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//该类是一个bean</span></span><br><span class="line">   <span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> WebMvcConfigurerComposite configurers = <span class="keyword">new</span> WebMvcConfigurerComposite();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将用户的WebMvcConfigurer注入</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//--------------------WebMvcConfigurationSupport----------------------</span></span><br><span class="line">  <span class="comment">//这里就是对于RequestMappingHandlerMapping的创建和设计,此种的mapping最终会被FrameworkServlet获取到</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RequestMappingHandlerMapping <span class="title">requestMappingHandlerMapping</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@Qualifier(<span class="string">"mvcContentNegotiationManager"</span>)</span> ContentNegotiationManager contentNegotiationManager,</span></span><br><span class="line"><span class="function">@<span class="title">Qualifier</span><span class="params">(<span class="string">"mvcConversionService"</span>)</span> FormattingConversionService conversionService,</span></span><br><span class="line"><span class="function">@<span class="title">Qualifier</span><span class="params">(<span class="string">"mvcResourceUrlProvider"</span>)</span> ResourceUrlProvider resourceUrlProvider) </span>&#123;</span><br><span class="line"></span><br><span class="line">RequestMappingHandlerMapping mapping = createRequestMappingHandlerMapping();</span><br><span class="line">mapping.setOrder(<span class="number">0</span>);</span><br><span class="line">mapping.setInterceptors(getInterceptors(conversionService, resourceUrlProvider));</span><br><span class="line">mapping.setContentNegotiationManager(contentNegotiationManager);</span><br><span class="line">mapping.setCorsConfigurations(getCorsConfigurations());</span><br><span class="line"></span><br><span class="line">PathMatchConfigurer configurer = getPathMatchConfigurer();</span><br><span class="line"></span><br><span class="line">Boolean useSuffixPatternMatch = configurer.isUseSuffixPatternMatch();</span><br><span class="line"><span class="keyword">if</span> (useSuffixPatternMatch != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setUseSuffixPatternMatch(useSuffixPatternMatch);</span><br><span class="line">&#125;</span><br><span class="line">Boolean useRegisteredSuffixPatternMatch = configurer.isUseRegisteredSuffixPatternMatch();</span><br><span class="line"><span class="keyword">if</span> (useRegisteredSuffixPatternMatch != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setUseRegisteredSuffixPatternMatch(useRegisteredSuffixPatternMatch);</span><br><span class="line">&#125;</span><br><span class="line">Boolean useTrailingSlashMatch = configurer.isUseTrailingSlashMatch();</span><br><span class="line"><span class="keyword">if</span> (useTrailingSlashMatch != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setUseTrailingSlashMatch(useTrailingSlashMatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UrlPathHelper pathHelper = configurer.getUrlPathHelper();</span><br><span class="line"><span class="keyword">if</span> (pathHelper != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setUrlPathHelper(pathHelper);</span><br><span class="line">&#125;</span><br><span class="line">PathMatcher pathMatcher = configurer.getPathMatcher();</span><br><span class="line"><span class="keyword">if</span> (pathMatcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setPathMatcher(pathMatcher);</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;String, Predicate&lt;Class&lt;?&gt;&gt;&gt; pathPrefixes = configurer.getPathPrefixes();</span><br><span class="line"><span class="keyword">if</span> (pathPrefixes != <span class="keyword">null</span>) &#123;</span><br><span class="line">mapping.setPathPrefixes(pathPrefixes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mapping;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> spring </tag>
            
            <tag> springMvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/2019/01/14/java%E9%9B%86%E5%90%88/"/>
      <url>/2019/01/14/java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="架构"><a class="header-anchor" href="#架构">¶</a>架构</h3><p><strong>immutable Object:</strong><br>1.final 修饰<br>2.如String这种,内部pro被final修饰,本身没有直接修改该属性的能力<br>3.jcf中强调是否为可变对象,即改变自身会产生新的对象,从而不影响数据本身的对象为不可变对象,如string</p><img src="/2019/01/14/java%E9%9B%86%E5%90%88/CollectionInterface.png" class="" title="接口"><p><strong>view 视图</strong><br>java中默认都是引用逻辑,因此在集合实现中,数据实际是引用,迭代器,sub等方法返回的数据属于引用值,没有进行值拷贝,<br>jdk将这种称之为视图.</p><h5 id="Collection接口"><a class="header-anchor" href="#Collection接口">¶</a>Collection接口</h5><ul><li><strong>概述:</strong><br>1.collection不作为直接父类<br>2.juc中collection子类都包含了一个空构造器和有参构造器<br>3.子类不支持的操作,抛出  UnsupportedOperationException<br>4.某些子类显示某些元素的,如对null,或特定元素的限制<br>5.子类决定线程同步策略<br>6.collection中许多函数是通过Object::equals判断的<br>7.集合递归遍历自身可能会失败</li><li><strong>视图集合 View Collections</strong><br>定义:视图集合指的是本身不储存元素,由其后备集合存储元素,对于视图集合的修改会显现在源集合中<br>如: Collections.checkedCollection, Collections.synchronizedCollection, and Collections.unmodifiableCollection返回的包装集合; List.subList, NavigableSet.subSet, or Map.entrySet;以及迭代器.</li><li><strong>不可修改集合 Unmodifiable Collections</strong><br>若集合不支持修改,如add操作,那么称为不可修改集合,若对此集合执行上述操作,则抛出异常或不进行任何修改;其视图集合应该符合相同性质<br>根据注释所言,Unmodifiable Collections不一定是immutable,若不可修改集合包含了可变元素,那么当元素&quot;mutator&quot;时,集合本身就不是immutable,若集合内部元素是immutable元素那么该集合就是ummutable</li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/Colleciton.png" class=""><figure class="highlight java"><figcaption><span>collection</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 该函数的逻辑是通过generator生成数组,当数组大小小于colleciton.size(),返回一个包含所有元素的数组对象;当生成器数组.length&gt;Collection.size(),则拷贝返回形参数组对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> &lt;T&gt; T[] toArray(IntFunction&lt;T[]&gt; generator) &#123;</span><br><span class="line">        <span class="keyword">return</span> toArray(generator.apply(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本来该函数没有什么疑问,我开始看到的时候疑问在于fast-fail问题上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">        <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">                each.remove(); <span class="comment">//这里调用的是iterator.remove(),不是collection.reomve() 因此modCount由迭代器维护,不会触发fast-fail</span></span><br><span class="line">                removed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removed;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="Set接口"><a class="header-anchor" href="#Set接口">¶</a>Set接口</h6><ul><li><strong>概述</strong><br>set表示不含重复元素(Object::equal相同的情况),以及最多一个null<br>set接口对于继承于collection的有些函数做了自己的规定<br>当set包含可以mutable元素时要注意,因为当元素值改变时equal结果不同</li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/Set.png" class=""><figure class="highlight java"><figcaption><span>Set</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 返回不可修改set</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">static</span> &lt;E&gt; <span class="function">Set&lt;E&gt; <span class="title">copyOf</span><span class="params">(Collection&lt;? extends E&gt; coll)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (coll <span class="keyword">instanceof</span> ImmutableCollections.AbstractImmutableSet) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Set&lt;E&gt;)coll;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Set&lt;E&gt;)Set.of(<span class="keyword">new</span> HashSet&lt;&gt;(coll).toArray());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &lt;E&gt; <span class="function">Set&lt;E&gt; <span class="title">of</span><span class="params">(E... elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (elements.length) &#123; <span class="comment">// implicit null check of elements</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> ImmutableCollections.emptySet();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.Set12&lt;&gt;(elements[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.Set12&lt;&gt;(elements[<span class="number">0</span>], elements[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.SetN&lt;&gt;(elements);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="SortedSet"><a class="header-anchor" href="#SortedSet">¶</a>SortedSet</h6><ul><li><strong>概述:</strong><br>在创建时按照自然顺序或比较器排序,在SortedMap中定义了更多的函数<br>1.插入的元素必须是可以比较的<br>2.子类都提供四种构造器,例如:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>();</span><br><span class="line">      addAll(c);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(s.comparator());</span><br><span class="line">      addAll(s);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><img src="/2019/01/14/java%E9%9B%86%E5%90%88/SortedSet.png" class=""><figure class="highlight java"><figcaption><span>SortedSet.png</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//[&#125;左闭右开</span></span><br><span class="line"><span class="function">SortedSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, E toElement)</span></span>;</span><br><span class="line"><span class="comment">//包含参数元素,当参数所在范围不在set[]中,则按照边界取</span></span><br><span class="line"><span class="function">SortedSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement)</span></span>;</span><br><span class="line"><span class="function">SortedSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement)</span></span>;</span><br></pre></td></tr></table></figure><h6 id="NavigableSet"><a class="header-anchor" href="#NavigableSet">¶</a>NavigableSet</h6><ul><li><strong>概述:</strong><br>该接口是SortedSet子类,表示该set可以进行higher() lower()等函数</li><li><strong>函数</strong></li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/NavigableSet.png" class=""><h6 id="Queue"><a class="header-anchor" href="#Queue">¶</a>Queue</h6><ul><li><strong>概述</strong><br>典型的队列,LIFO原则,该接口提供了成对的操作,一组失败抛出异常,一组失败时返回null|false</li></ul><table><thead><tr><th></th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>Remove</td><td>remove()</td><td>poll()</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td></tr></tbody></table><ul><li><strong>函数</strong></li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/Queue.png" class=""><h6 id="Deque"><a class="header-anchor" href="#Deque">¶</a>Deque</h6><ul><li><strong>概述</strong><br>Deque-&gt;“Double End Queue&quot;双向队列,读作&quot;deck”,对于线性Collection支持双向操作,具有FILO(stack性质),和FIFO(队列性质)<br>对于两端的处理也各提供了两组,抛出异常和不抛出异常的函数</li></ul><table><thead><tr><th></th><th>Head异常</th><th>Head特殊</th><th>Tail异常</th><th>Tail特殊</th></tr></thead><tbody><tr><td>Insert</td><td>addFirst(e)</td><td>offerFirst(e)</td><td>addLast(e)</td><td>offerLast(e)</td></tr><tr><td>Remove</td><td>removieFirst()</td><td>pollFrist()</td><td>removeLast()</td><td>pollLast()</td></tr><tr><td>Examine</td><td>getFirst()</td><td>peekFirst()</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p>Deque接口继承了Queue,因此若将deque按照queue使用,则可以使用queue中的等效函数</p><table><thead><tr><th>queue</th><th>等效Deque</th></tr></thead><tbody><tr><td>add(e)</td><td>addLast(e)</td></tr><tr><td>offer(e)</td><td>offerLast(e)</td></tr><tr><td>remove()</td><td>removeFirst()</td></tr><tr><td>poll()</td><td>pollFirst()</td></tr><tr><td>element</td><td>getFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>若将Deque当作stack使用,也具有等效函数,该使用方式优先于遗留的Stack类,并且注意,此处将Deque的<strong>Head</strong>视为<strong>Stack栈顶</strong></p><table><thead><tr><th>Stack</th><th>等效Deque</th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td></tr><tr><td>pop()</td><td>removeFirst()</td></tr><tr><td>peek()</td><td>getFirst()</td></tr></tbody></table><ul><li><strong>函数</strong></li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/Deque.png" class=""><h5 id="Map接口"><a class="header-anchor" href="#Map接口">¶</a>Map接口</h5><ul><li><strong>概述</strong><br>map表示一组key-value映射,map接口提供了三组视图,key|value|key-value视图<br>若使用可变对象,则要注意当对象改变时,是否能保证equals相同<br>每个map子类都提供两个构造器,空|map(map)<br>map子类有些通过hascode进行比较<br><em>注意:</em> stream()这个函数是Collection接口定义,因此map不能创建stream,也就无法使用stream接口中的各种函数;不过collect()可以用来创建map,比较复杂,因此jdk8加入了一些default函数补偿|map也没有iterator接口,而使用另外三种视图接口</li><li><strong>要点</strong><br>内部interface</li></ul><figure class="highlight java"><figcaption><span>Map.Entry</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部的entry,entry的逻辑非常容易理解,一个节点但是具有key和value两个属性</span></span><br><span class="line"><span class="comment">//即使是用数组实现也可以用来当作map,如最大堆,使用数组实现,每个节点使用map也可以当作map操作</span></span><br><span class="line"><span class="comment">//该接口不是面向使用者的</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"><span class="function">K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">V <span class="title">setValue</span><span class="params">(V value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//返回一个升序比较器,比较key</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;K extends Comparable&lt;? <span class="keyword">super</span> K&gt;, V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByKey() &#123;</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span><br><span class="line">                (c1, c2) -&gt; c1.getKey().compareTo(c2.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较value</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V extends Comparable&lt;? <span class="keyword">super</span> V&gt;&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span><br><span class="line">                (c1, c2) -&gt; c1.getValue().compareTo(c2.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//两个自定义比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByKey(Comparator&lt;? <span class="keyword">super</span> K&gt; cmp) &#123;</span><br><span class="line">            Objects.requireNonNull(cmp);</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span><br><span class="line">                (c1, c2) -&gt; cmp.compare(c1.getKey(), c2.getKey());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparingByValue(Comparator&lt;? <span class="keyword">super</span> V&gt; cmp) &#123;</span><br><span class="line">            Objects.requireNonNull(cmp);</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;Map.Entry&lt;K, V&gt;&gt; &amp; Serializable)</span><br><span class="line">                (c1, c2) -&gt; cmp.compare(c1.getValue(), c2.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其他操作</li></ul><figure class="highlight java"><figcaption><span>Map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//jdk8加入的default</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//当不存在key返回defaultValue</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> </span>&#123;</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">return</span> (((v = get(key)) != <span class="keyword">null</span>) || containsKey(key))</span><br><span class="line">            ? v</span><br><span class="line">            : defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//替代stream中的foreach,使用BiConsumer接口而不是Consumer</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : entrySet()) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                k = entry.getKey();</span><br><span class="line">                v = entry.getValue();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException ise) &#123;</span><br><span class="line">                <span class="comment">// this usually means the entry is no longer in the map.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(ise);</span><br><span class="line">            &#125;</span><br><span class="line">            action.accept(k, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; function)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(function);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : entrySet()) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            V v;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                k = entry.getKey();</span><br><span class="line">                v = entry.getValue();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException ise) &#123;</span><br><span class="line">                <span class="comment">// this usually means the entry is no longer in the map.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(ise);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// ise thrown from function is not a cme.</span></span><br><span class="line">            v = function.apply(k, v);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                entry.setValue(v);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalStateException ise) &#123;</span><br><span class="line">                <span class="comment">// this usually means the entry is no longer in the map.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException(ise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">putIfAbsent</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        V v = get(key);</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">            v = put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//当key存在,并且对应的curValue==value时溢出,注意此处没有使用泛型</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        Object curValue = get(key);</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(curValue, value) ||</span><br><span class="line">            (curValue == <span class="keyword">null</span> &amp;&amp; !containsKey(key))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//存在key,并且对应的curValue==oldValue是替换</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">        Object curValue = get(key);</span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(curValue, oldValue) ||</span><br><span class="line">            (curValue == <span class="keyword">null</span> &amp;&amp; !containsKey(key))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        put(key, newValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//存在key就替换</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">replace</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        V curValue;</span><br><span class="line">        <span class="keyword">if</span> (((curValue = get(key)) != <span class="keyword">null</span>) || containsKey(key)) &#123;</span><br><span class="line">            curValue = put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> curValue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 当key不存在时,调用mapper逻辑,替代stream中mapper()函数</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">computeIfAbsent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">            Function&lt;? <span class="keyword">super</span> K, ? extends V&gt; mappingFunction)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(mappingFunction);</span><br><span class="line">        V v;</span><br><span class="line">        <span class="keyword">if</span> ((v = get(key)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V newValue;</span><br><span class="line">            <span class="keyword">if</span> ((newValue = mappingFunction.apply(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                put(key, newValue);</span><br><span class="line">                <span class="keyword">return</span> newValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//当key存在时,根据key和value进行设置新值</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">computeIfPresent</span><span class="params">(K key,</span></span></span><br><span class="line"><span class="function"><span class="params">            BiFunction&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(remappingFunction);</span><br><span class="line">        V oldValue;</span><br><span class="line">        <span class="keyword">if</span> ((oldValue = get(key)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            V newValue = remappingFunction.apply(key, oldValue);</span><br><span class="line">            <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                put(key, newValue);</span><br><span class="line">                <span class="keyword">return</span> newValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                remove(key);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//当存在旧值时,通过oldvalue和value进行创建新值并替换,否则newValue=vlaue,当newValue==null,移除该节点</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> V <span class="title">merge</span><span class="params">(K key, V value,</span></span></span><br><span class="line"><span class="function"><span class="params">            BiFunction&lt;? <span class="keyword">super</span> V, ? <span class="keyword">super</span> V, ? extends V&gt; remappingFunction)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(remappingFunction);</span><br><span class="line">        Objects.requireNonNull(value);</span><br><span class="line">        V oldValue = get(key);</span><br><span class="line">        V newValue = (oldValue == <span class="keyword">null</span>) ? value :</span><br><span class="line">                   remappingFunction.apply(oldValue, value);</span><br><span class="line">        <span class="keyword">if</span> (newValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            put(key, newValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newValue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">jdk9新增</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//返回不可修改视图,注意接口实现的static函数必须通过接口本身调用,Map.of 不能是HashMap.of</span></span><br><span class="line"><span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">of</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ImmutableCollections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">of</span><span class="params">(K k1, V v1, K k2, V v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.MapN&lt;&gt;(k1, v1, k2, v2);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//.... Map中实现了多个该函数,类似于Set中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过enteries,放置多个, 看到entries就想起c++中的pair&lt;&gt;()</span></span><br><span class="line"> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">ofEntries</span><span class="params">(Entry&lt;? extends K, ? extends V&gt;... entries)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (entries.length == <span class="number">0</span>) &#123; <span class="comment">// implicit null check of entries array</span></span><br><span class="line">            <span class="keyword">return</span> ImmutableCollections.emptyMap();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (entries.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// implicit null check of the array slot</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.Map1&lt;&gt;(entries[<span class="number">0</span>].getKey(),</span><br><span class="line">                    entries[<span class="number">0</span>].getValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] kva = <span class="keyword">new</span> Object[entries.length &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;? extends K, ? extends V&gt; entry : entries) &#123;</span><br><span class="line">                <span class="comment">// implicit null checks of each array slot</span></span><br><span class="line">                kva[a++] = entry.getKey();</span><br><span class="line">                kva[a++] = entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImmutableCollections.MapN&lt;&gt;(kva);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &lt;K, V&gt; <span class="function">Entry&lt;K, V&gt; <span class="title">entry</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// KeyValueHolder checks for nulls</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyValueHolder&lt;&gt;(k, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">copyOf</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map <span class="keyword">instanceof</span> ImmutableCollections.AbstractImmutableMap) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map&lt;K,V&gt;)map;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Map&lt;K,V&gt;)Map.ofEntries(map.entrySet().toArray(<span class="keyword">new</span> Entry[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="SortedMap"><a class="header-anchor" href="#SortedMap">¶</a>SortedMap</h6><p><strong>概述</strong><br>该接口定义了顺序排序的map,默认按照自然顺序,或者按照指定的比较器排序,提供返回三个视图<br>jdk中Map的具体实现基本都对应了一个Set,将value置为固定值就能当作set使用<br>该接口的Key规定:当存在compartor时,key可以不是comparable子类,这里可以看TreeMap.put实现<br>提供四个构造器和set相同,提供的Sorted函数也和set类型<br><strong>函数</strong></p><img src="/2019/01/14/java%E9%9B%86%E5%90%88/SortedMap.png" class=""><h6 id="NavigableMap"><a class="header-anchor" href="#NavigableMap">¶</a>NavigableMap</h6><p><strong>概述</strong><br>参考NavigableSet<br><strong>函数</strong></p><img src="/2019/01/14/java%E9%9B%86%E5%90%88/NavigableMap.png" class=""><h4 id="实现"><a class="header-anchor" href="#实现">¶</a>实现</h4><h5 id="非并发"><a class="header-anchor" href="#非并发">¶</a>非并发</h5><h6 id="HashTable-哈希表"><a class="header-anchor" href="#HashTable-哈希表">¶</a>HashTable 哈希表</h6><ul><li>HashMap</li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/HashMap.png" class="" title="类图:"><p><strong>概述</strong><br>基于数组链表和红黑树构成的结构,除了允许<em>null key</em>和<em>null vlaue</em>并且不是<em>同步</em>的,与HashTable类似,并且该结构不保证顺序,也因此并不是SortedMap子类<br>若正确的在buckets中间分配元素,那么对于put和get函数的性能是O(x)常量时间;迭代视图的时间与bucket及key-value数量成正比;若迭代操作非常重要则不要将初始容量设置太大,或者将load factor设置太小<br>默认load factor为0.75,较高的值会减少空间占用但是会提高查找开销;设置初始容量时,应该考虑其大小和load factory,以便最小化重新散列的数量,当initial capacity &gt;max number/load facotry,不会发生重散列<br>由于该结构不是同步的,若多线程访问,若存在线程修改map,则因该在外部使用同步(只有put/remove这样属于修改,修改某key对应的value不算),或者使用Collections.synchronizedMap返回同步Map</p><ul><li>链表模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//field</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;<span class="comment">//链表数组</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"> <span class="keyword">int</span> threshold;</span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"><span class="comment">//Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//返回接近cap的2^x大小,该函数会返回比cap-1大一个幂的结果|cap|MAXIMUM_CAPACITY</span></span><br><span class="line"><span class="comment">//-1 === 1111111111111111 ,cap如果是2^x 2^x-1=1111111,该幂级比cap小1,获取0的数量, 并且将-1&gt;&gt;&gt;,就会得到该数,最后+1就是cap|若cap!=2^x 则cap=1xxxxxxxxx,其中x必定有1,则cap-1=1xxxxxxxx,说明幂级不变</span></span><br><span class="line"><span class="comment">//该幂级和源cap相同,将-1&gt;&gt;&gt;结果为11111111111,此时将+1会得到比cap高一个幂级的2^x</span></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = -<span class="number">1</span> &gt;&gt;&gt; Integer.numberOfLeadingZeros(cap - <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//补充:返回任意数i,按照补码排列,返回最高位右边到第一个1出现,0的数量,不包含最高位,如 -1则返回 0,1则返回31</span></span><br><span class="line"><span class="comment">//用了二分法进行判断</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfLeadingZeros</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// HD, Count leading 0's</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">32</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">31</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt; <span class="number">16</span>) &#123; n -= <span class="number">16</span>; i &gt;&gt;&gt;= <span class="number">16</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">8</span>) &#123; n -=  <span class="number">8</span>; i &gt;&gt;&gt;=  <span class="number">8</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">4</span>) &#123; n -=  <span class="number">4</span>; i &gt;&gt;&gt;=  <span class="number">4</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">1</span> &lt;&lt;  <span class="number">2</span>) &#123; n -=  <span class="number">2</span>; i &gt;&gt;&gt;=  <span class="number">2</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> n - (i &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//链表节点</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="迭代器"><a class="header-anchor" href="#迭代器">¶</a>迭代器</h4><p>迭代器用来对外部隐藏细节以提供统一的接口,便于使用.</p><h5 id="fast-fail机制"><a class="header-anchor" href="#fast-fail机制">¶</a>fast-fail机制</h5><p><strong>概念</strong><br>1.在jcf中通过保持一个modCount int型变量,在数据结构本身任意的mod操作,都会将该值递增,任意数据结构的迭代器被构建时持有该值<br>2.这里将迭代器返回的视为view,无论是collection子类的iterator()返回,还是map中的三个视图,如果在获取view后,改变源导致modCout改变,那么在迭代器视图中,如next()函数会检查一致性,若不一致则抛出异常<br>3.这就是最大可能避免并发问题,记住并不是说非线程安全的结构不能用于并发,这里的要点是理解view的作用,同时迭代器提供romvoe()用于view对于源的修改,我思考了一下如果普通迭代器并发操作如remove操作,那么加锁就可以了<br>4.若进行带锁并发操作迭代器,效率和单线程差距?,锁的粒度最细也只能在如remove()函数上,这里如果并发处理就要用到splIterator<br>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现于AbstractList中的迭代器</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">int</span> expectedModCount = modCount; <span class="comment">//创建时获取当前modCount</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification(); <span class="comment">//检查一致性</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                E next = get(i);</span><br><span class="line">                lastRet = i;</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123; <span class="comment">//这种操作迭代器本身维护了expectedModCount==新的modCount,如果并发操作,必定加锁</span></span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                AbstractList.<span class="keyword">this</span>.remove(lastRet); <span class="comment">//此处源本身remove,并且修改了modCount</span></span><br><span class="line">                <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                    cursor--;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount; <span class="comment">//维护新的expectedModCount</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SplIterator"><a class="header-anchor" href="#SplIterator">¶</a>SplIterator</h5><p><strong>概念</strong><br>jdk8加入的SplIterator,顾名思义,该迭代器的逻辑是将视图分割,从而完成并发操作</p><figure class="highlight java"><figcaption><span>Spliterator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Spliterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryAdvance</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>; <span class="comment">//对当前元素进行action操作</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123; &#125; <span class="keyword">while</span> (tryAdvance(action));</span><br><span class="line">    &#125;<span class="comment">//以当前位置迭代执行action</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Spliterator&lt;T&gt; <span class="title">trySplit</span><span class="params">()</span></span>;<span class="comment">//将Spliterator分割,这是该迭代器完成并发的关键</span></span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight java"><figcaption><span>ArrayList中的实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayList 接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSpliterator</span> <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> index; <span class="comment">//表示当前位置</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fence; <span class="comment">// 该迭代器的边界</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount; <span class="comment">//fast-fail,逻辑还是和普通迭代器相同</span></span><br><span class="line"> ArrayListSpliterator(<span class="keyword">int</span> origin, <span class="keyword">int</span> fence, <span class="keyword">int</span> expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.index = origin;</span><br><span class="line">            <span class="keyword">this</span>.fence = fence;</span><br><span class="line">            <span class="keyword">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFence</span><span class="params">()</span> </span>&#123; <span class="comment">// initialize fence to size on first use</span></span><br><span class="line">            <span class="keyword">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></span><br><span class="line">            <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123; <span class="comment">//当第一次创建该迭代器时默认fence=-1,总之hi==边界fence</span></span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">                hi = fence = size;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hi;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;<span class="function"><span class="keyword">public</span> ArrayListSpliterator <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">//寻找当前位置----边界位置  &gt;&gt;&gt;1</span></span><br><span class="line">            <span class="keyword">return</span> (lo &gt;= mid) ? <span class="keyword">null</span> : <span class="comment">// divide range in half unless too small</span></span><br><span class="line">                <span class="keyword">new</span> ArrayListSpliterator(lo, index = mid, expectedModCount); <span class="comment">//创建一个分割的前半部分迭代器[lo,mid),当前迭代器变成[mid,fence)</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="stream"><a class="header-anchor" href="#stream">¶</a>stream</h4><ul><li>urml类图</li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/stream.jpg" class=""><ul><li>时序</li></ul><img src="/2019/01/14/java%E9%9B%86%E5%90%88/stream2.jpg" class=""><ul><li>关于stream源码调用实现<br>stream框架由中间操作生成 pipe(Head)&lt;----&gt;pipe(Stateless|Stateful)&lt;-----&gt;pipe(Stateless|Stateful)这样的管道节点,当执行终止操作时,<br>产生sink----&gt;sink----&gt;sink—&gt;sink这样的槽节点,然后遍历s迭代器,并逐层调用sink完成stream操作<br>补充:这里的逻辑和tomcat中Pipeline和其Valve相同,但是具体实现还是不同,很有趣, tomcat采取由组件持有pipeline,pipeline持有valve节点,逐层调用</li></ul><figure class="highlight java"><figcaption><span>PipelineHelper及其子类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----------------------------------------PipelineHelper---------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PipelineHelper</span>&lt;<span class="title">P_OUT</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> &lt;P_IN&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">copyIntoWithCancel</span><span class="params">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span>&lt;P_IN&gt; Sink&lt;P_IN&gt; <span class="title">wrapSink</span><span class="params">(Sink&lt;P_OUT&gt; sink)</span></span>;<span class="comment">//该函数表示每个节点如何将sink(槽)的包装方式,返回的结果是上一个sink</span></span><br><span class="line"><span class="keyword">abstract</span>&lt;P_IN, S extends Sink&lt;P_OUT&gt;&gt; <span class="function">S <span class="title">wrapAndCopyInto</span><span class="params">(S sink, Spliterator&lt;P_IN&gt; spliterator)</span></span>;<span class="comment">//将节点向前推进封装sink,并从head开始调用</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span>&lt;P_IN&gt; <span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span></span>;<span class="comment">//调用pipe</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------AbstractPipeline---------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPipeline</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>, <span class="title">S</span> <span class="keyword">extends</span> <span class="title">BaseStream</span>&lt;<span class="title">E_OUT</span>, <span class="title">S</span>&gt;&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">PipelineHelper</span>&lt;<span class="title">E_OUT</span>&gt; <span class="keyword">implements</span> <span class="title">BaseStream</span>&lt;<span class="title">E_OUT</span>, <span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AbstractPipeline sourceStage;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Backlink to the head of the pipeline chain (self if this is the source</span></span><br><span class="line"><span class="comment">     * stage).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractPipeline sourceStage;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The "upstream" pipeline, or null if this is the source stage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractPipeline previousStage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The operation flags for the intermediate operation represented by this</span></span><br><span class="line"><span class="comment">     * pipeline object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> sourceOrOpFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next stage in the pipeline, or null if this is the last stage.</span></span><br><span class="line"><span class="comment">     * Effectively final at the point of linking to the next pipeline.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="keyword">private</span> AbstractPipeline nextStage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of intermediate operations between this pipeline object</span></span><br><span class="line"><span class="comment">     * and the stream source if sequential, or the previous stateful if parallel.</span></span><br><span class="line"><span class="comment">     * Valid at the point of pipeline preparation for evaluation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> depth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The combined source and operation flags for the source and all operations</span></span><br><span class="line"><span class="comment">     * up to and including the operation represented by this pipeline object.</span></span><br><span class="line"><span class="comment">     * Valid at the point of pipeline preparation for evaluation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> combinedFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The source spliterator. Only valid for the head pipeline.</span></span><br><span class="line"><span class="comment">     * Before the pipeline is consumed if non-null then &#123;<span class="doctag">@code</span> sourceSupplier&#125;</span></span><br><span class="line"><span class="comment">     * must be null. After the pipeline is consumed if non-null then is set to</span></span><br><span class="line"><span class="comment">     * null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Spliterator&lt;?&gt; sourceSpliterator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The source supplier. Only valid for the head pipeline. Before the</span></span><br><span class="line"><span class="comment">     * pipeline is consumed if non-null then &#123;<span class="doctag">@code</span> sourceSpliterator&#125; must be</span></span><br><span class="line"><span class="comment">     * null. After the pipeline is consumed if non-null then is set to null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Supplier&lt;? extends Spliterator&lt;?&gt;&gt; sourceSupplier;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * True if this pipeline has been linked or consumed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> linkedOrConsumed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * True if there are any stateful ops in the pipeline; only valid for the</span></span><br><span class="line"><span class="comment">     * source stage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> sourceAnyStateful;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Runnable sourceCloseAction;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * True if pipeline is parallel, otherwise the pipeline is sequential; only</span></span><br><span class="line"><span class="comment">     * valid for the source stage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> parallel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor for the head of a stream pipeline.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source &#123;<span class="doctag">@code</span> Supplier&lt;Spliterator&gt;&#125; describing the stream source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceFlags The source flags for the stream source, described in</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> StreamOpFlag&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallel True if the pipeline is parallel</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    AbstractPipeline(Supplier&lt;? extends Spliterator&lt;?&gt;&gt; source,</span><br><span class="line">                     <span class="keyword">int</span> sourceFlags, <span class="keyword">boolean</span> parallel) &#123; </span><br><span class="line">        <span class="keyword">this</span>.previousStage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.sourceSupplier = source; <span class="comment">//不同的构造器区别在于源来自何处</span></span><br><span class="line">        <span class="keyword">this</span>.sourceStage = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.sourceOrOpFlags = sourceFlags &amp; StreamOpFlag.STREAM_MASK;</span><br><span class="line">        <span class="comment">// The following is an optimization of:</span></span><br><span class="line">        <span class="comment">// StreamOpFlag.combineOpFlags(sourceOrOpFlags, StreamOpFlag.INITIAL_OPS_VALUE);</span></span><br><span class="line">        <span class="keyword">this</span>.combinedFlags = (~(sourceOrOpFlags &lt;&lt; <span class="number">1</span>)) &amp; StreamOpFlag.INITIAL_OPS_VALUE;</span><br><span class="line">        <span class="keyword">this</span>.depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.parallel = parallel;</span><br><span class="line">    &#125;</span><br><span class="line">AbstractPipeline(Spliterator&lt;?&gt; source,</span><br><span class="line">                     <span class="keyword">int</span> sourceFlags, <span class="keyword">boolean</span> parallel) &#123;</span><br><span class="line">        <span class="keyword">this</span>.previousStage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.sourceSpliterator = source; <span class="comment">//来自迭代器</span></span><br><span class="line">        <span class="keyword">this</span>.sourceStage = <span class="keyword">this</span>; </span><br><span class="line">        <span class="keyword">this</span>.sourceOrOpFlags = sourceFlags &amp; StreamOpFlag.STREAM_MASK;</span><br><span class="line">        <span class="comment">// The following is an optimization of:</span></span><br><span class="line">        <span class="comment">// StreamOpFlag.combineOpFlags(sourceOrOpFlags, StreamOpFlag.INITIAL_OPS_VALUE);</span></span><br><span class="line">        <span class="keyword">this</span>.combinedFlags = (~(sourceOrOpFlags &lt;&lt; <span class="number">1</span>)) &amp; StreamOpFlag.INITIAL_OPS_VALUE;</span><br><span class="line">        <span class="keyword">this</span>.depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.parallel = parallel;</span><br><span class="line">    &#125;</span><br><span class="line">AbstractPipeline(AbstractPipeline&lt;?, E_IN, ?&gt; previousStage, <span class="keyword">int</span> opFlags) &#123; </span><br><span class="line">        <span class="keyword">if</span> (previousStage.linkedOrConsumed)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(MSG_STREAM_LINKED);</span><br><span class="line">        previousStage.linkedOrConsumed = <span class="keyword">true</span>;</span><br><span class="line">        previousStage.nextStage = <span class="keyword">this</span>; <span class="comment">//和上一个pipe连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.previousStage = previousStage;<span class="comment">//构建双向链表</span></span><br><span class="line">        <span class="keyword">this</span>.sourceOrOpFlags = opFlags &amp; StreamOpFlag.OP_MASK;</span><br><span class="line">        <span class="keyword">this</span>.combinedFlags = StreamOpFlag.combineOpFlags(opFlags, previousStage.combinedFlags);</span><br><span class="line">        <span class="keyword">this</span>.sourceStage = previousStage.sourceStage;</span><br><span class="line">        <span class="keyword">if</span> (opIsStateful())</span><br><span class="line">            sourceStage.sourceAnyStateful = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.depth = previousStage.depth + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一般的执行最终操作</span></span><br><span class="line"> <span class="keyword">final</span> &lt;R&gt; <span class="function">R <span class="title">evaluate</span><span class="params">(TerminalOp&lt;E_OUT, R&gt; terminalOp)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">getOutputShape</span><span class="params">()</span> </span>== terminalOp.inputShape();</span><br><span class="line">        <span class="keyword">if</span> (linkedOrConsumed)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(MSG_STREAM_LINKED);</span><br><span class="line">        linkedOrConsumed = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isParallel()</span><br><span class="line">               ? terminalOp.evaluateParallel(<span class="keyword">this</span>, sourceSpliterator(terminalOp.getOpFlags())) <span class="comment">//具体如何执行可以取决于terminalOp实现</span></span><br><span class="line">               : terminalOp.evaluateSequential(<span class="keyword">this</span>, sourceSpliterator(terminalOp.getOpFlags()));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//一般执行时会调用的逻辑</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">final</span> &lt;P_IN, S extends Sink&lt;E_OUT&gt;&gt; <span class="function">S <span class="title">wrapAndCopyInto</span><span class="params">(S sink, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class="line">        copyInto(wrapSink(Objects.requireNonNull(sink)), spliterator);</span><br><span class="line">        <span class="keyword">return</span> sink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">final</span> &lt;P_IN&gt; <span class="function"><span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;如何调用sink</span><br><span class="line">        Objects.requireNonNull(wrappedSink);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!StreamOpFlag.SHORT_CIRCUIT.isKnown(getStreamAndOpFlags())) &#123;</span><br><span class="line">            wrappedSink.begin(spliterator.getExactSizeIfKnown()); <span class="comment">//由当前sink调用begin(),一般会递归调用下去,唤醒下sink节点begin逻辑</span></span><br><span class="line">            spliterator.forEachRemaining(wrappedSink); <span class="comment">//遍历数据,并且每个数据都会途径sink.apceet()</span></span><br><span class="line">            wrappedSink.end();<span class="comment">//同begin()</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            copyIntoWithCancel(wrappedSink, spliterator);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">final</span> &lt;P_IN&gt; <span class="function">Sink&lt;P_IN&gt; <span class="title">wrapSink</span><span class="params">(Sink&lt;E_OUT&gt; sink)</span> </span>&#123; <span class="comment">//如何封装sink</span></span><br><span class="line">        Objects.requireNonNull(sink);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>) AbstractPipeline p=AbstractPipeline.<span class="keyword">this</span>; p.depth &gt; <span class="number">0</span>; p=p.previousStage) &#123; <span class="comment">//获取当前pipe,实际就是调用最终操作的pipe,sink则是由最终操作构建的sink</span></span><br><span class="line">            sink = p.opWrapSink(p.previousStage.combinedFlags, sink); <span class="comment">//每次sink都表示上一个pipe的sink,第一次创建后 sink(最终操作调用者pipe)&lt;--&gt;sink(最终操作创建的)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Sink&lt;P_IN&gt;) sink; <span class="comment">//返回为第一个中间操作sink</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> &lt;P_IN&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">copyIntoWithCancel</span><span class="params">(Sink&lt;P_IN&gt; wrappedSink, Spliterator&lt;P_IN&gt; spliterator)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        AbstractPipeline p = AbstractPipeline.<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (p.depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            p = p.previousStage;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        wrappedSink.begin(spliterator.getExactSizeIfKnown());</span><br><span class="line">        <span class="keyword">boolean</span> cancelled = p.forEachWithCancel(spliterator, wrappedSink);</span><br><span class="line">        wrappedSink.end();</span><br><span class="line">        <span class="keyword">return</span> cancelled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------------ReferencePipeline-------------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferencePipeline</span>&lt;<span class="title">P_IN</span>, <span class="title">P_OUT</span>&gt; //<span class="title">OUT</span>表示该<span class="title">pipe</span>要给调用者返回的,也是<span class="title">Stream</span>中实际元素的类型,<span class="title">in</span>代表上一个<span class="title">pipe</span>输入的</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractPipeline</span>&lt;<span class="title">P_IN</span>, <span class="title">P_OUT</span>, <span class="title">Stream</span>&lt;<span class="title">P_OUT</span>&gt;&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Stream</span>&lt;<span class="title">P_OUT</span>&gt;  </span>&#123;</span><br><span class="line">   ReferencePipeline(Supplier&lt;? extends Spliterator&lt;?&gt;&gt; source,</span><br><span class="line">                      <span class="keyword">int</span> sourceFlags, <span class="keyword">boolean</span> parallel) &#123;</span><br><span class="line">        <span class="keyword">super</span>(source, sourceFlags, parallel);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// BaseStream</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;P_OUT&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.iterator(spliterator());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该类有两个三个内部静态类,这就是实际的节点,</span></span><br><span class="line"><span class="comment">//-------------------------------------Sink-------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">//该接口表示管道中的槽,继承Consumer</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sink</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"called wrong accept method"</span>);</span><br><span class="line">    &#125; <span class="comment">//可以实现接受int</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"called wrong accept method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">double</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"called wrong accept method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OfInt</span> <span class="keyword">extends</span> <span class="title">Sink</span>&lt;<span class="title">Integer</span>&gt;, <span class="title">IntConsumer</span> </span>&#123; <span class="comment">//int型</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span></span>; <span class="comment">//此处实现接受到int值后如何处理,用于intPipeline</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Tripwire.ENABLED)</span><br><span class="line">                Tripwire.trip(getClass(), <span class="string">"&#123;0&#125; calling Sink.OfInt.accept(Integer)"</span>);</span><br><span class="line">            accept(i.intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Sink&#125; that implements &#123;<span class="doctag">@code</span> Sink&lt;Long&gt;&#125;, re-abstracts</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept(long)&#125;, and wires &#123;<span class="doctag">@code</span> accept(Long)&#125; to bridge to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept(long)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OfLong</span> <span class="keyword">extends</span> <span class="title">Sink</span>&lt;<span class="title">Long</span>&gt;, <span class="title">LongConsumer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">long</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Tripwire.ENABLED)</span><br><span class="line">                Tripwire.trip(getClass(), <span class="string">"&#123;0&#125; calling Sink.OfLong.accept(Long)"</span>);</span><br><span class="line">            accept(i.longValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Sink&#125; that implements &#123;<span class="doctag">@code</span> Sink&lt;Double&gt;&#125;, re-abstracts</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept(double)&#125;, and wires &#123;<span class="doctag">@code</span> accept(Double)&#125; to bridge to</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept(double)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OfDouble</span> <span class="keyword">extends</span> <span class="title">Sink</span>&lt;<span class="title">Double</span>&gt;, <span class="title">DoubleConsumer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">double</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Double i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Tripwire.ENABLED)</span><br><span class="line">                Tripwire.trip(getClass(), <span class="string">"&#123;0&#125; calling Sink.OfDouble.accept(Double)"</span>);</span><br><span class="line">            accept(i.doubleValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间操作应该产生的sink</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedReference</span>&lt;<span class="title">T</span>, <span class="title">E_OUT</span>&gt; <span class="keyword">implements</span> <span class="title">Sink</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="comment">//对应泛型种类</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChainedReference</span><span class="params">(Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.downstream = Objects.requireNonNull(downstream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123; <span class="comment">//begin和end都和调用下层sink的begin和end将之传递</span></span><br><span class="line">            downstream.begin(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            downstream.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancellationRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> downstream.cancellationRequested();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedInt</span>&lt;<span class="title">E_OUT</span>&gt; <span class="keyword">implements</span> <span class="title">Sink</span>.<span class="title">OfInt</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChainedInt</span><span class="params">(Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.downstream = Objects.requireNonNull(downstream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            downstream.begin(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            downstream.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancellationRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> downstream.cancellationRequested();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Abstract &#123;<span class="doctag">@code</span> Sink&#125; implementation designed for creating chains of</span></span><br><span class="line"><span class="comment">     * sinks.  The &#123;<span class="doctag">@code</span> begin&#125;, &#123;<span class="doctag">@code</span> end&#125;, and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> cancellationRequested&#125; methods are wired to chain to the</span></span><br><span class="line"><span class="comment">     * downstream &#123;<span class="doctag">@code</span> Sink&#125;.  This implementation takes a downstream</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Sink&#125; of unknown input shape and produces a &#123;<span class="doctag">@code</span> Sink.OfLong&#125;.</span></span><br><span class="line"><span class="comment">     * The implementation of the &#123;<span class="doctag">@code</span> accept()&#125; method must call the correct</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept()&#125; method on the downstream &#123;<span class="doctag">@code</span> Sink&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedLong</span>&lt;<span class="title">E_OUT</span>&gt; <span class="keyword">implements</span> <span class="title">Sink</span>.<span class="title">OfLong</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChainedLong</span><span class="params">(Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.downstream = Objects.requireNonNull(downstream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            downstream.begin(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            downstream.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancellationRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> downstream.cancellationRequested();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Abstract &#123;<span class="doctag">@code</span> Sink&#125; implementation designed for creating chains of</span></span><br><span class="line"><span class="comment">     * sinks.  The &#123;<span class="doctag">@code</span> begin&#125;, &#123;<span class="doctag">@code</span> end&#125;, and</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> cancellationRequested&#125; methods are wired to chain to the</span></span><br><span class="line"><span class="comment">     * downstream &#123;<span class="doctag">@code</span> Sink&#125;.  This implementation takes a downstream</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> Sink&#125; of unknown input shape and produces a &#123;<span class="doctag">@code</span> Sink.OfDouble&#125;.</span></span><br><span class="line"><span class="comment">     * The implementation of the &#123;<span class="doctag">@code</span> accept()&#125; method must call the correct</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> accept()&#125; method on the downstream &#123;<span class="doctag">@code</span> Sink&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedDouble</span>&lt;<span class="title">E_OUT</span>&gt; <span class="keyword">implements</span> <span class="title">Sink</span>.<span class="title">OfDouble</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChainedDouble</span><span class="params">(Sink&lt;? <span class="keyword">super</span> E_OUT&gt; downstream)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.downstream = Objects.requireNonNull(downstream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">            downstream.begin(size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            downstream.end();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancellationRequested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> downstream.cancellationRequested();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ReferencePipeline</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//总体而言大部分stream()操作返回的实体是该抽象类的子类</span></span><br><span class="line"><span class="comment">//该类定义两个子类stateless 和 stateful</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferencePipeline</span>&lt;<span class="title">P_IN</span>, <span class="title">P_OUT</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">AbstractPipeline</span>&lt;<span class="title">P_IN</span>, <span class="title">P_OUT</span>, <span class="title">Stream</span>&lt;<span class="title">P_OUT</span>&gt;&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Stream</span>&lt;<span class="title">P_OUT</span>&gt;  </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt; <span class="keyword">extends</span> <span class="title">ReferencePipeline</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constructor for the source stage of a Stream.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> source &#123;<span class="doctag">@code</span> Spliterator&#125; describing the stream source</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> sourceFlags the source flags for the stream source, described</span></span><br><span class="line"><span class="comment">         *                    in &#123;<span class="doctag">@link</span> StreamOpFlag&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Head(Spliterator&lt;?&gt; source,</span><br><span class="line">             <span class="keyword">int</span> sourceFlags, <span class="keyword">boolean</span> parallel) &#123;</span><br><span class="line">            <span class="keyword">super</span>(source, sourceFlags, parallel);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">opIsStateful</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Sink&lt;E_IN&gt; <span class="title">opWrapSink</span><span class="params">(<span class="keyword">int</span> flags, Sink&lt;E_OUT&gt; sink)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); <span class="comment">//这个函数是主要关注点,此处决定了sink如何封装,明显如果head执行那么就异常,用户是无法如此执行的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Optimized sequential terminal operations for the head of the pipeline</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E_OUT&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isParallel()) &#123;</span><br><span class="line">                sourceStageSpliterator().forEachRemaining(action);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.forEach(action);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachOrdered</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E_OUT&gt; action)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isParallel()) &#123;</span><br><span class="line">                sourceStageSpliterator().forEachRemaining(action);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.forEachOrdered(action);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatelessOp</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ReferencePipeline</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Construct a new Stream by appending a stateless intermediate</span></span><br><span class="line"><span class="comment">         * operation to an existing stream.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> upstream The upstream pipeline stage</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inputShape The stream shape for the upstream pipeline stage</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> opFlags Operation flags for the new stage</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StatelessOp(AbstractPipeline&lt;?, E_IN, ?&gt; upstream,</span><br><span class="line">                    StreamShape inputShape,</span><br><span class="line">                    <span class="keyword">int</span> opFlags) &#123;</span><br><span class="line">            <span class="keyword">super</span>(upstream, opFlags);</span><br><span class="line">            <span class="keyword">assert</span> upstream.getOutputShape() == inputShape;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">opIsStateful</span><span class="params">()</span> </span>&#123; <span class="comment">//无状态</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatefulOp</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">ReferencePipeline</span>&lt;<span class="title">E_IN</span>, <span class="title">E_OUT</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Construct a new Stream by appending a stateful intermediate operation</span></span><br><span class="line"><span class="comment">         * to an existing stream.</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> upstream The upstream pipeline stage</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> inputShape The stream shape for the upstream pipeline stage</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> opFlags Operation flags for the new stage</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        StatefulOp(AbstractPipeline&lt;?, E_IN, ?&gt; upstream,</span><br><span class="line">                   StreamShape inputShape,</span><br><span class="line">                   <span class="keyword">int</span> opFlags) &#123;</span><br><span class="line">            <span class="keyword">super</span>(upstream, opFlags);</span><br><span class="line">            <span class="keyword">assert</span> upstream.getOutputShape() == inputShape;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">opIsStateful</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">abstract</span> &lt;P_IN&gt; <span class="function">Node&lt;E_OUT&gt; <span class="title">opEvaluateParallel</span><span class="params">(PipelineHelper&lt;E_OUT&gt; helper,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                       Spliterator&lt;P_IN&gt; spliterator,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                       IntFunction&lt;E_OUT[]&gt; generator)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//---------------------------------------------其他操作</span></span><br><span class="line"><span class="comment">//该类将操作分为状态操作|无状态操作|终止操作</span></span><br><span class="line"><span class="comment">//stateless</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Stream&lt;P_OUT&gt; <span class="title">unordered</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isOrdered())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StatelessOp&lt;P_OUT, P_OUT&gt;(<span class="keyword">this</span>, StreamShape.REFERENCE, StreamOpFlag.NOT_ORDERED) &#123; <span class="comment">//该操作改变了StreamOpFlag.NOT_ORDERED</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function">Sink&lt;P_OUT&gt; <span class="title">opWrapSink</span><span class="params">(<span class="keyword">int</span> flags, Sink&lt;P_OUT&gt; sink)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> sink;  <span class="comment">//实际此处并不进行什么操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Stream&lt;P_OUT&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> P_OUT&gt; predicate)</span> </span>&#123; <span class="comment">//这是典型的中间操作逻辑</span></span><br><span class="line">        Objects.requireNonNull(predicate);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StatelessOp&lt;P_OUT, P_OUT&gt;(<span class="keyword">this</span>, StreamShape.REFERENCE,</span><br><span class="line">                                     StreamOpFlag.NOT_SIZED) &#123;  <span class="comment">//返回Stateless实现</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function">Sink&lt;P_OUT&gt; <span class="title">opWrapSink</span><span class="params">(<span class="keyword">int</span> flags, Sink&lt;P_OUT&gt; sink)</span> </span>&#123; <span class="comment">//重写onWarapSink用于最终执行逻辑中的封装sink代码</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Sink.ChainedReference&lt;P_OUT, P_OUT&gt;(sink) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(<span class="keyword">long</span> size)</span> </span>&#123;</span><br><span class="line">                        downstream.begin(-<span class="number">1</span>); </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(P_OUT u)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (predicate.test(u))  <span class="comment">//u实际就是stream遍历源过程中的一个元素,此处捕获外部lambda表达式调用.test(u)</span></span><br><span class="line">                            downstream.accept(u); <span class="comment">//此处调用下一层sink</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>特点<ul><li>不储存数据:并非是数据结构,通过数据结构 io 等pipeline获取数据</li><li>Functional in nature(功能性):返回数据,但是不修改源</li><li>惰性求值|及早求值,当返回为Stream则为惰性求值</li><li>Possibly unbounded(无边界)</li><li>考虑状态lambda</li><li>无序性在并行操作有更好的性能</li></ul></li><li>获取方式<ul><li>Collection子类 stream()|parallelStream()</li><li>Arrays.stream(Object[])</li><li>静态工厂 Stream.of()| IntStream.range(int, int) | Stream.iterate(Object, UnaryOperator);</li><li>The lines of a file can be obtained from BufferedReader.lines();</li><li>Streams of file paths can be obtained from methods in Files; Files是1.7的一个类</li><li>Streams of random numbers can be obtained from Random.ints();</li><li>Numerous other stream-bearing methods in the JDK, including BitSet.stream(), Pattern.splitAsStream(java.lang.CharSequence), and JarFile.stream().</li><li>第三方库</li></ul></li><li>stream操作和pipeline<ul><li>stream 操作由中间操作和最终操作构成,组成pipeline;pipeline由源,中间操作如Stream.filter or Stream.map,最终操作Stream.forEach or Stream.reduce构成</li><li>中间操作都是惰性求值</li><li>当最终操作执行后,流被消耗,iterator() and spliterator()除外</li></ul></li><li>Function接口<ul><li>Predicate(谓语):测试input是否符合条件</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>; <span class="comment">//判断是否符合</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">and</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123; <span class="comment">//lambda1&amp;lambda2</span></span><br><span class="line">            Objects.requireNonNull(other);</span><br><span class="line">            <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">or</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line">                Objects.requireNonNull(other);</span><br><span class="line">                <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">            &#125;       </span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">isEqual</span><span class="params">(Object targetRef)</span> </span>&#123; <span class="comment">//静态函数用来创建一个predicate判断是否和targetRef相同</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">not</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; target)</span> </span>&#123; <span class="comment">//创建一个和形参逻辑相反的predicate</span></span><br><span class="line">        Objects.requireNonNull(target);</span><br><span class="line">        <span class="keyword">return</span> (Predicate&lt;T&gt;)target.negate();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Function:接受T类型返回R类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>; <span class="comment">//获取一个T输入,输出一个R类型</span></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;V, R&gt; <span class="title">compose</span><span class="params">(Function&lt;? <span class="keyword">super</span> V, ? extends T&gt; before)</span> </span>&#123; </span><br><span class="line">            Objects.requireNonNull(before);</span><br><span class="line">            <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));<span class="comment">//新的lambda解释: 输入V-&gt;由before调用输出T-&gt;输入T由this(这里指代当前上下文,this被新的lambda捕获 )-&gt;输出R</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">Function&lt;T, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123; </span><br><span class="line">            Objects.requireNonNull(after);</span><br><span class="line">            <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));<span class="comment">//新的lambda解释:输入T-&gt;this输出R-&gt;after接受输出? extend V</span></span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">     <span class="keyword">static</span> &lt;T&gt; <span class="function">Function&lt;T, T&gt; <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">        &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Consumer接受T类型,继续对该类型进行操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;<span class="comment">//接受T,进行操作</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Consumer&lt;T&gt; <span class="title">andThen</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; after)</span> </span>&#123; <span class="comment">//this操作,再进行after操作</span></span><br><span class="line">            Objects.requireNonNull(after);</span><br><span class="line">            <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>BiFunction 接受T,U返回R</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BiFunction</span>&lt;<span class="title">T</span>, <span class="title">U</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t, U u)</span></span>;</span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; <span class="function">BiFunction&lt;T, U, V&gt; <span class="title">andThen</span><span class="params">(Function&lt;? <span class="keyword">super</span> R, ? extends V&gt; after)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(after);</span><br><span class="line">            <span class="keyword">return</span> (T t, U u) -&gt; after.apply(apply(t, u)); <span class="comment">//当前操作调用after</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BinaryOperator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BiFunction</span>&lt;<span class="title">T</span>,<span class="title">T</span>,<span class="title">T</span>&gt; </span>&#123; <span class="comment">//进行二元计算</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">BinaryOperator&lt;T&gt; <span class="title">minBy</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(comparator);</span><br><span class="line">            <span class="keyword">return</span> (a, b) -&gt; comparator.compare(a, b) &lt;= <span class="number">0</span> ? a : b;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">BinaryOperator&lt;T&gt; <span class="title">maxBy</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span> </span>&#123;</span><br><span class="line">         Objects.requireNonNull(comparator);</span><br><span class="line">         <span class="keyword">return</span> (a, b) -&gt; comparator.compare(a, b) &gt;= <span class="number">0</span> ? a : b;</span><br><span class="line">     &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="杂项"><a class="header-anchor" href="#杂项">¶</a>杂项</h4><ul><li>闭包</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构|算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想法</title>
      <link href="/2019/01/04/%E6%83%B3%E6%B3%95/"/>
      <url>/2019/01/04/%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="完成一个工具"><a class="header-anchor" href="#完成一个工具">¶</a>完成一个工具</h4><ul><li>设置快捷键,输出指定内容,将内容分类,如html标签,常用短语</li><li>执行脚本,如打开指定目录</li></ul><h4 id="hexo和markdown相关"><a class="header-anchor" href="#hexo和markdown相关">¶</a>hexo和markdown相关</h4><ul><li>markdown输出公式</li><li>使用MathJax的渲染器,或者引入MathJax.JS<br><a href="https://blog.csdn.net/ethmery/article/details/50670297" target="_blank" rel="noopener">MATHJax语法参考</a><br><a href="https://www.mathelounge.de/509545/mathjax-latex-basic-tutorial-und-referenz-deutsch" target="_blank" rel="noopener">官方语法</a></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;http:&#x2F;&#x2F;cdn.mathjax.org&#x2F;mathjax&#x2F;latest&#x2F;MathJax.js?config&#x3D;default&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li>启用inline渲染,至少在上文引入的js默认不是使用%%表示inline,因此要手动改变</li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;script type&#x3D;&quot;text&#x2F;x-mathjax-config&quot;&gt;</span><br><span class="line">  MathJax.Hub.Config(&#123;</span><br><span class="line">    tex2jax: &#123;</span><br><span class="line">      inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&quot;\\(&quot;,&quot;\\)&quot;] ],</span><br><span class="line">      processEscapes: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 想法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论</title>
      <link href="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/"/>
      <url>/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="绪论"><a class="header-anchor" href="#绪论">¶</a>绪论</h3><h4 id="数据模型"><a class="header-anchor" href="#数据模型">¶</a>数据模型</h4><p>数据模型由<code>概念模型</code>和<code>逻辑模型</code>构成<br>如下图所示:</p> <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E6%A8%A1%E5%9E%8B%E5%85%B3%E7%B3%BB.png" class=""><h5 id="概念模型"><a class="header-anchor" href="#概念模型">¶</a>概念模型</h5><p>用于按照用户的观点进行对数据和信息建模,用于数据库设计,供数据库设置人员和用户交流</p> <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%B7%A5%E5%8E%82%E6%A6%82%E5%BF%B5%E6%A8%A1%E5%9E%8B.png" class="" title="一个概念模型"><ol><li>实体（Entity）:客观存在并可相互区别的事物称为实体。可以是具体的人、事、物或抽象的概念。</li><li>属性（Attribute）:实体所具有的某一特性称为属性。一个实体可以由若干个属性来刻画</li><li>码（Key）:唯一标识实体的属性集称为码。</li><li>实体型（Entity Type）: 用实体名及其属性名集合来抽象和刻画同类实体称为实体型</li><li>实体集（Entity Set）: 同一类型实体的集合称为实体集</li><li>联系（Relationship）: 实体间(指属性和实体的联系)|实体内联系(如1对1,1对n,多对多)<br>E-R图就是用来描述概念模型</li></ol><h5 id="数据模型的性质"><a class="header-anchor" href="#数据模型的性质">¶</a>数据模型的性质</h5><ol><li>数据结构<ul><li>以数据结构来命名数据模型:如层次结构-层次模型,关系结构-关系模型</li></ul></li><li>数据操作<ul><li>操作类型:如更新(增|删|改|)和查</li><li>操作语言:QL|DML</li></ul></li><li>完整性约束</li></ol><h5 id="常见的数据模型-以其数据结构命名"><a class="header-anchor" href="#常见的数据模型-以其数据结构命名">¶</a>常见的数据模型(以其数据结构命名)</h5><ul><li>格式化模型:该类模型复杂,并且语言趋向于程序化<ul><li>层次模型(Hierarchical Model)</li><li>网状模型(NetWork Model)</li></ul></li><li>关系模型(Relational Model）</li><li>对象模型<ul><li>面向对象模型(Object Oriented Data Model)</li><li>对象关系模型(Object Relational Data Model)</li></ul></li><li>半结构化模型(Semi-struture Data Model) 如xml</li><li>非结构化模型,图模型</li></ul><h6 id="结构化模型举例"><a class="header-anchor" href="#结构化模型举例">¶</a>结构化模型举例</h6><ul><li>基本数据单位</li></ul> <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B.png" class=""><ol><li>层次模型:以树结构实现,不是二叉树</li></ol> <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png" class="">    <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BC%98%E7%BC%BA%E7%82%B9.png" class=""> <ol start="2"><li>网状模型:使用网状结构表示 实体和实体间关系</li></ol> <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E7%BD%91%E7%8A%B6%E6%A8%A1%E5%9E%8B.png" class="">   <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E7%BD%91%E7%8A%B6%E6%A8%A1%E5%9E%8B%E5%A4%9A%E5%AF%B9%E5%A4%9A.png" class="">  <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E7%BD%91%E7%8A%B6%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.png" class=""><ol start="3"><li>关系型数据库:</li></ol><ul><li>在用户的角度关系就是一张二元表<ul><li>关系（Relation）—— 一个关系对应通常说的一张表</li><li>元组（Tuple）—— 表中的一行即为一个元组</li><li>属性（Attribute）——表中的一列即为一个属性，给每一个属性起一个名称即属性名</li><li>主码（Key）——也称码键。表中的某个属性组，它可以唯一确定一个元组</li><li>域（Domain）——是一组具有相同数据类型的值的集合。属性的取值范围来自某个域。<br>例：学生年龄属性的域（15～45岁），性别的域是（男，女），系名的域是一个学校所有系名的集合；</li><li>分量——元组中的一个属性值</li><li>关系模式——对关系的描述<br>关系名（属性1，属性2，…，属性n）学生（学号，姓名，年龄，性别，系名，年级）</li></ul></li><li>关系是不可再分割的<br><img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%B8%8D%E5%8F%AF%E5%88%86.png" class=""></li><li>数据操作<br><img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C.png" class=""></li><li>完整性:<br><img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E5%AE%8C%E6%95%B4%E6%80%A7.png" class=""></li><li>优缺点:<br><img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%9E%8B%E4%BC%98%E7%BC%BA%E7%82%B9.png" class=""></li></ul><hr><h4 id="关系数据库"><a class="header-anchor" href="#关系数据库">¶</a>关系数据库</h4><h5 id="关系数据库数据结构和完整性"><a class="header-anchor" href="#关系数据库数据结构和完整性">¶</a>关系数据库数据结构和完整性</h5><h6 id="关系"><a class="header-anchor" href="#关系">¶</a>关系</h6><pre><code>域(domain)表示属性的取值,将域D1,D2,D3...做笛卡儿积,就会得到关系,即关系二维表表</code></pre>   <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB.png" class="">    <img src="/2019/01/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%AE%BA/%E5%85%B3%E7%B3%BB2.png" class=""> <h6 id="完整性约束"><a class="header-anchor" href="#完整性约束">¶</a>完整性约束</h6><ul><li>实体完整性<ul><li>主键约束(实际就是非空和联合主键)</li></ul></li><li>参照完整性:实体间引用存在关系<ul><li>引用的值应该存在,如学生选课表存在的数据才能被选择</li><li>外键约束</li></ul></li><li>用户完整性<ul><li>唯一约束</li><li>非主键非空</li><li>指定取值</li></ul></li></ul><h5 id="关系操作"><a class="header-anchor" href="#关系操作">¶</a>关系操作</h5><h6 id="关系代数"><a class="header-anchor" href="#关系代数">¶</a>关系代数</h6><pre><code>- 关系数据库语言:典型的为SQL</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准库源码</title>
      <link href="/2019/01/04/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/"/>
      <url>/2019/01/04/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="分配器"><a class="header-anchor" href="#分配器">¶</a>分配器</h2><h3 id="关于c-中new"><a class="header-anchor" href="#关于c-中new">¶</a>关于c++中new</h3><figure class="highlight cpp"><figcaption><span>new.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>)</span> _<span class="title">GLIBCXX_THROW</span> <span class="params">(<span class="built_in">std</span>::bad_alloc)</span></span></span><br><span class="line"><span class="function">  __<span class="title">attribute__</span><span class="params">((__externally_visible__))</span></span>;</span><br><span class="line"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span>) _GLIBCXX_THROW (<span class="built_in">std</span>::bad_alloc)</span><br><span class="line">  __attribute__((__externally_visible__));</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*)</span> _GLIBCXX_USE_NOEXCEPT</span></span><br><span class="line"><span class="function">  __<span class="title">attribute__</span><span class="params">((__externally_visible__))</span></span>;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>*) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">  __attribute__((__externally_visible__));</span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> _GLIBCXX_USE_NOEXCEPT</span></span><br><span class="line"><span class="function">  __<span class="title">attribute__</span><span class="params">((__externally_visible__))</span></span>;</span><br><span class="line"><span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">  __attribute__((__externally_visible__));</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span>*, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;)</span> _GLIBCXX_USE_NOEXCEPT</span></span><br><span class="line"><span class="function">  __<span class="title">attribute__</span><span class="params">((__externally_visible__))</span></span>;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>*, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="keyword">nothrow_t</span>&amp;) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">  __attribute__((__externally_visible__));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default placement versions of operator new.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">void</span>* __p)</span> _GLIBCXX_USE_NOEXCEPT</span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> __p; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span>* <span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="built_in">std</span>::<span class="keyword">size_t</span>, <span class="keyword">void</span>* __p) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">&#123; <span class="keyword">return</span> __p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Default placement versions of operator delete.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span>  <span class="params">(<span class="keyword">void</span>*, <span class="keyword">void</span>*)</span> _GLIBCXX_USE_NOEXCEPT </span>&#123; &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="keyword">operator</span> <span class="keyword">delete</span>[](<span class="keyword">void</span>*, <span class="keyword">void</span>*) _GLIBCXX_USE_NOEXCEPT &#123; &#125;</span><br></pre></td></tr></table></figure><p>这是minggw中定义new的文件头,具体实现要看linux下的源码<br>规则:<br>1.new 表达式形式</p><ul><li>普通的new int(2) / 数组new new int[10]</li><li>调用new ClassType()</li><li>new § obj()   p表示分配了空间的指针,obj()表示一个对象的构造<br>补充:<br>new为 new operator 用户不能重载,该操作符就是平时使用的,它会调用operator new 即标准库定义的,并且调用对应的构造方式,无论是一般类型还是类类型; place new 仅仅对分配了的空间进行赋值.<br>new()和new[] 问题,看看allocator.allocate</li></ul> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  pointer</span><br><span class="line">     allocate(size_type __n, <span class="keyword">const</span> <span class="keyword">void</span>* = <span class="number">0</span>)  </span><br><span class="line">     &#123; </span><br><span class="line"><span class="keyword">if</span> (__n &gt; <span class="keyword">this</span>-&gt;max_size())</span><br><span class="line">  <span class="built_in">std</span>::__throw_bad_alloc();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp*&gt;(::<span class="keyword">operator</span> <span class="keyword">new</span>(__n * <span class="keyword">sizeof</span>(_Tp)));  <span class="comment">//明显根据默认类型大小*n来进行分配,假设你要分配数组,那么n&gt;1,也就是说new 和new [] 编译器帮程序员做过了计算类型大小的步骤</span></span><br><span class="line">     &#125;</span><br><span class="line">   <span class="keyword">void</span></span><br><span class="line">     deallocate(pointer __p, size_type)</span><br><span class="line">     &#123; ::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(__p)</span></span>; &#125;     <span class="comment">//由于分配是new所以销毁也就是delete,并且这样不会主动调用析构函数</span></span><br><span class="line">     </span><br><span class="line">       <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Up, <span class="keyword">typename</span>... _Args&gt;</span><br><span class="line">       <span class="keyword">void</span></span><br><span class="line">       construct(_Up* __p, _Args&amp;&amp;... __args)  <span class="comment">//分配器分配函数</span></span><br><span class="line">&#123; ::<span class="keyword">new</span>((<span class="keyword">void</span> *)__p) _Up(<span class="built_in">std</span>::forward&lt;_Args&gt;(__args)...); &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Up&gt;</span><br><span class="line">       <span class="keyword">void</span> </span><br><span class="line">       destroy(_Up* __p) &#123; __p-&gt;~_Up(); &#125;  <span class="comment">//析构函数的调用</span></span><br></pre></td></tr></table></figure><p>2.如果是对普通类型进行new操作,编译器首先会对该类型进行匹配,如果程序员没有定义一个重载的operator new运算符(运算符在c++中视为函数),那么编译器就会直接去调用new.h定义的.<br>当new表达式进行的是类,那么编译器也会先对类内部进行匹配,如果你没有重写,那么此时就会用调用new.h中的,并且会在空间分配之后调用类的构造器.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试关于类的new 操作符相关</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">F</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        <span class="comment">//构造器初始化顺序时按照变量位置进行的</span></span><br><span class="line">        F(<span class="keyword">int</span> c, <span class="keyword">int</span> d) : F(c, d) &#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;p = p;</span><br><span class="line">        &#125;</span><br><span class="line">        F(<span class="keyword">int</span> c, <span class="keyword">int</span> d) : a(c), b(d) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"构造函数"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        F(<span class="keyword">const</span> F &amp;f) &#123;</span><br><span class="line">            a = f.a;</span><br><span class="line">            b = f.b;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了拷贝构造"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ~F() &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"析构"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//重写一个new操作符,此处的代码实际就是new.h定义的一般new 的源码形式,仅仅是分配了空间</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span> sz)</span> </span>&#123; <span class="comment">//此处的参数是给编译器使用的,并非是给程序员使用的</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"调用op new"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">void</span> *p;</span><br><span class="line">            <span class="comment">// new_handler 以后说明，但是可以看出首先我们根据入口参数 sz的大小分配内存，</span></span><br><span class="line">            <span class="comment">// 如果sz为0 则令其为1 ，然后在while循环中调用malloc申请内存</span></span><br><span class="line">            <span class="comment">// 直到 申请成功 或者 抛出异常或者 abort</span></span><br><span class="line">            <span class="comment">/* malloc (0) is unpredictable; avoid it.  */</span></span><br><span class="line">            <span class="keyword">if</span> (sz == <span class="number">0</span>)</span><br><span class="line">                sz = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (__builtin_expect ((p = <span class="built_in">malloc</span> (sz)) == <span class="number">0</span>, <span class="literal">false</span>))</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">auto</span> handler = <span class="built_in">std</span>::new_handler ();</span><br><span class="line">                <span class="keyword">if</span> (! handler)</span><br><span class="line">                   _GLIBCXX_THROW_OR_ABORT(<span class="built_in">std</span>::bad_alloc());</span><br><span class="line">                handler ();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">     <span class="comment">//重写new操作符</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">opNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        F *f=<span class="keyword">new</span> F(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//次数的参数则是当作了汇编器调用构造器时使用的形参</span></span><br><span class="line">        PRINT(f-&gt;a);  <span class="comment">//打印宏</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 调用op new</span></span><br><span class="line">   <span class="comment">// 构造函数</span></span><br><span class="line">   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>输出的结果说明了编译器new 的实质过程,如果你喜欢可以去看一眼反汇编代码<br>3.关于palce new</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用定位new</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     F *f;</span><br><span class="line">     <span class="function">F <span class="title">f2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">      <span class="built_in">std</span>::allocator&lt;F&gt; allocator;</span><br><span class="line">     f = allocator.allocate(<span class="number">1</span>); <span class="comment">//f指针必须先是一块分配了空间的指针才行</span></span><br><span class="line">     ::<span class="keyword">new</span> ((<span class="keyword">void</span>*)f)  F(f2); <span class="comment">//表示直接使用编译器关键字new</span></span><br><span class="line">     <span class="keyword">new</span> ((<span class="keyword">void</span>*)f)  F(f2);  <span class="comment">//如果改成这样,至少在minGW编译器下会提示没有匹配到 F::operator new(sizetype, void*)'</span></span><br><span class="line">     PRINT(f-&gt;a);  <span class="comment">//打印宏</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//构造函数   ---&gt;这是f2创建时调用的和palce new 无关</span></span><br><span class="line"> <span class="comment">//调用了拷贝构造   --&gt;这个拷贝构造则时临时对象的创建,最后该临时对象也没有发生析构,也就是说将该临时对象的内存给了p</span></span><br><span class="line"> <span class="comment">//1</span></span><br><span class="line"> <span class="comment">//析构</span></span><br></pre></td></tr></table></figure><p>对于palce new 在mingGW环境下,编译器会去从类内部匹配是否重写了place new, 如果没有就并没有去调用标准库定义的全局,此处就要主动使用<br>输出结果说明了palce new 的调用过程 就是将后者的内存使用拷贝拷贝,并且在palce new 函数的调用过程不会进行析构函数的调用<br>4.关于转发和移动语义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../marco.h"</span></span></span><br><span class="line"><span class="keyword">namespace</span> cp13&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MoveTest</span> &#123;</span></span><br><span class="line">      <span class="keyword">int</span> a;</span><br><span class="line">      <span class="keyword">int</span>*p;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        MoveTest(<span class="keyword">int</span> a,<span class="keyword">int</span>*p):a(a),p(p)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拷贝保持值行为</span></span><br><span class="line">        MoveTest(<span class="keyword">const</span> MoveTest&amp; moveTest)&#123;</span><br><span class="line">            a=moveTest.a;</span><br><span class="line">            p=<span class="keyword">new</span> <span class="keyword">int</span>(*moveTest.p);</span><br><span class="line">            PRINT(<span class="string">"拷贝"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        MoveTest&amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> MoveTest&amp; moveTest)&#123;</span><br><span class="line">            a=moveTest.a;</span><br><span class="line">            p=<span class="keyword">new</span> <span class="keyword">int</span>(*moveTest.p);</span><br><span class="line">            PRINT(<span class="string">"拷贝运算"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ~MoveTest()&#123;</span><br><span class="line">            <span class="keyword">if</span>(p)</span><br><span class="line">                <span class="keyword">delete</span> p;</span><br><span class="line">            PRINT(<span class="string">"析构"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动保持控制转移</span></span><br><span class="line">        MoveTest( MoveTest&amp;&amp; moveTest)&#123;</span><br><span class="line">            a=moveTest.a;</span><br><span class="line">            p=moveTest.p;</span><br><span class="line">            moveTest.p= <span class="literal">nullptr</span>;</span><br><span class="line">            PRINT(<span class="string">"移动"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        MoveTest&amp;<span class="keyword">operator</span>=( MoveTest&amp;&amp; moveTest)&#123;</span><br><span class="line">            a=moveTest.a;</span><br><span class="line">            p=moveTest.p;</span><br><span class="line">            moveTest.p= <span class="literal">nullptr</span>;</span><br><span class="line">            PRINT(<span class="string">"移动运算"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">MoveTest <span class="title">test</span><span class="params">(MoveTest&amp;&amp;<span class="built_in">move</span>)</span></span>&#123;  <span class="comment">//只有模板的情况该函数才能接受左值,具体看看constur()函数</span></span><br><span class="line">        <span class="function">MoveTest <span class="title">moveTest</span><span class="params">(<span class="built_in">std</span>::forward&lt;MoveTest&gt;(<span class="built_in">move</span>))</span></span>;</span><br><span class="line">        <span class="keyword">return</span> moveTest;</span><br><span class="line">    &#125;</span><br><span class="line">    Test(<span class="string">"移动fun"</span>)&#123;</span><br><span class="line">          <span class="keyword">auto</span> p=test(MoveTest(<span class="number">1</span>,<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">1</span>)));</span><br><span class="line">          PRINT(<span class="string">"main"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.形参 返回值 局部变量,如果直接返回形参,test函数中相当生成了两个变量;如果返回局部变量也是两个变量,也就是说编译器将结果在汇编语句每条直接放到跟eax相关寄存器中了,也就是说如果返回值是一个局部变量那么它就不在栈中分配.<br>2.如果返回值赋给了一个句柄,那么该返回值不会在函数中析构,从而延长了声明周期<br>3.转移语句的实质就是控制权限的转移,如果要返回一个参数,那么就说明该参数的声明周期并不是该函数中结束,那么为啥你不将参数设为引用呢?如果使用了形参值传递,那么返回形参的时候只要保证形参-&gt;返回值是移动构造,就能把形参的控制权移交给返回值,那么也没有任何问题<br>4.只有当要使用权限转移的时候才应该使用转移语句,也就是说将A中的堆内存转移到B中,如局部变量值的返回.<br>5.我认为只要保证拷贝函数是值拷贝行为,移动是控制转移行为,就ok了.    —此条是完全正确的<br>6.关于allocate.construct(),函数其形参即使是拷贝构造,也不会调用析构,是什么鬼.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再次说明返回值问题</span></span><br><span class="line"><span class="comment">//1.形参如果是值,那么不论如何调用时要进行拷贝构造,即使该形参时&amp;&amp;类型,你创造这个形参的方式除了临时产生的右值,就是通过std::move(),那么对于值类型形参和之前的值没有关系</span></span><br><span class="line"><span class="comment">//2.返回值问题,移动语义可以发生在返回值到调用这过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况1 返回临时对象</span></span><br><span class="line"><span class="function">A <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"> A a; <span class="comment">//构造,rax存放该对象首地址</span></span><br><span class="line"> <span class="keyword">return</span> a; <span class="comment">//a为临时右值</span></span><br><span class="line"> <span class="comment">//若没有返回赋值语句,那么析构返回值</span></span><br><span class="line">&#125;</span><br><span class="line">A a=test();<span class="comment">// 赋值行为,test中a返回值,进行一次拷贝构造函数,若存在移动构造函数,那么就进行移动构造</span></span><br><span class="line"><span class="comment">//析构返回值</span></span><br><span class="line"><span class="comment">//析构a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况2 返回形参</span></span><br><span class="line"><span class="function">A <span class="title">test2</span><span class="params">(A a)</span></span>&#123; <span class="comment">//形参a存在于rdi寄存器中</span></span><br><span class="line"><span class="keyword">return</span> a;   <span class="comment">//返回值rax 进行移动/拷贝构造</span></span><br><span class="line"><span class="comment">//若无赋值语句,析构rax</span></span><br><span class="line"><span class="comment">//析构形参a</span></span><br><span class="line">&#125;</span><br><span class="line">A a;</span><br><span class="line">A a2=test2(a); <span class="comment">//拷贝构造复制形参</span></span><br><span class="line"><span class="comment">//返回值进行拷贝/移动构造</span></span><br><span class="line"><span class="comment">//析构返回值</span></span><br><span class="line"><span class="comment">//析构a2</span></span><br><span class="line"><span class="comment">//析构a</span></span><br><span class="line"></span><br><span class="line">  <span class="function">F <span class="title">test6</span><span class="params">(F  f)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这种情况就保留了 返回值到调用者的移动赋值函数/或者移动赋值函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    Test("参数返回赋值情况")&#123;</span></span><br><span class="line"><span class="comment">//        F f(1,2);</span></span><br><span class="line"><span class="comment">//        f=test6(f);</span></span><br><span class="line"><span class="comment">//        PRINT("MAIN")</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于返回值优化的情况存在,test6函数中形参到返回值f的移动/拷贝构造过程创造的对象就直接时调用者f2,不存在中间的test6()返回值到f2的拷贝或者移动构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Test(<span class="string">"参数返回构造情况"</span>)&#123;</span><br><span class="line">        <span class="function">F <span class="title">f</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line">        F f2=test6(f);</span><br><span class="line">        PRINT(<span class="string">"MAIN"</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上边这些代码我觉得很能说明问题了, 移动语义,返回值优化,返回值RAX,形参寄存器这些都构成了C++这部分难以理解.</p><ol><li>参照上边的5,移动和复制保持原意</li><li>移动语义适用的场合 将不需要的内存转到另一个身上,避免新对象构造的开销</li></ol><ul><li>具体来说 如果上例子中值返回情况,既然是值返回,那么该值就是无用对象,那么为何不使用移动构造/赋值呢</li><li>将指针指向的堆函数移动都另一个指针上,这个问题在C++ perimer中13.5中realloca函数中 这里我重点说明,移动转移的是string*(栈内存A)–&gt;string实际占用的堆内存B—&gt;string内部的指针指向的堆内存C,实际上转移的是C内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++杂项</title>
      <link href="/2019/01/04/c/"/>
      <url>/2019/01/04/c/</url>
      
        <content type="html"><![CDATA[<h2 id="未归类"><a class="header-anchor" href="#未归类">¶</a>未归类</h2><ol><li>类型转换</li></ol><ul><li><p>static_cast<type>()</p><ul><li>基本类型转换: 同整数类型截断/不同类型值解释</li><li>同继承体系同进行转换:<br>一般来说子类指针或者栈对象向父类转换,前者属于多态,后者不是,也就是说使用显示的static_cast&lt;&gt;转换可以增加编译期检查从而确保安全性</li><li>任意类型指针与void*转换</li></ul></li><li><p>dynamic_cast</p><ul><li>向上类型转换和static_cast相同</li><li>向下类型转换会做编译器检查,如果出现问题,则返回null</li></ul></li><li><p>const_cast 解除const</p></li><li><p>reinterpret_cast</p><ul><li>将直接按照位模式解释</li></ul></li></ul><ol start="2"><li>std::swap() 内存转移基于移动构造</li></ol><figure class="highlight cpp"><figcaption><span>std::swap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">    swap(_Tp&amp; __a, _Tp&amp; __b)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">    <span class="keyword">noexcept</span>(__and_&lt;is_nothrow_move_constructible&lt;_Tp&gt;,</span><br><span class="line">            is_nothrow_move_assignable&lt;_Tp&gt;&gt;::value)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// concept requirements</span></span><br><span class="line">      __glibcxx_function_requires(_SGIAssignableConcept&lt;_Tp&gt;)</span><br><span class="line"></span><br><span class="line">      _Tp __tmp = _GLIBCXX_MOVE(__a); <span class="comment">//这个宏就是std::move</span></span><br><span class="line">      __a = _GLIBCXX_MOVE(__b);</span><br><span class="line">      __b = _GLIBCXX_MOVE(__tmp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>该函数使用实际上将根据a,b的移动构造进行权限转移,进一步的证实我认为的拷贝进行拷贝值行为,移动进行权限转移行为.<br>3. std::move  实际是一个强制类型转换</p><figure class="highlight cpp"><figcaption><span>std::move</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp;</span><br><span class="line">    move(_Tp&amp;&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span></span><br><span class="line">    &#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(<span class="keyword">__t</span>); &#125;</span><br></pre></td></tr></table></figure><p>实际上就是将<code>_t</code>类型转为<code>&amp;&amp;</code>右值<br>4. 关于模板使用typename<br>如上<code>constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;</code> 表示一个返回值</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span></span></span><br><span class="line"><span class="class">   &#123;</span> <span class="keyword">typedef</span> _Tp   type; &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span>&lt;_Tp&amp;&gt;</span></span><br><span class="line"><span class="class">   &#123;</span> <span class="keyword">typedef</span> _Tp   type; &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">remove_reference</span>&lt;_Tp&amp;&amp;&gt;</span></span><br><span class="line"><span class="class">   &#123;</span> <span class="keyword">typedef</span> _Tp   type; &#125;;</span><br></pre></td></tr></table></figure><p><code>::</code>符号之后可以跟变量,类型名,typename就是为了告知编译器这是一个类型不是变量</p><ol start="5"><li>std::uninitialized_copy(a,b,c) 将b-a范围中的数据复制到c–&gt;c+(b-a)区间,返回的指针是c+(b-a)的位置<br>std::uninitialized_copy(std::make_move_iterator(a),std::make_move_iterator(b),c)<br>//可以触发移动语义</li></ol> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">bool</span> _TrivialValueTypes&gt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> __<span class="title">uninitialized_copy</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _InputIterator, <span class="keyword">typename</span> _ForwardIterator&gt;</span><br><span class="line">        <span class="keyword">static</span> _ForwardIterator</span><br><span class="line">        __uninit_copy(_InputIterator __first, _InputIterator __last,</span><br><span class="line">      _ForwardIterator __result)</span><br><span class="line">        &#123;</span><br><span class="line">  _ForwardIterator __cur = __result;</span><br><span class="line">  __try</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (; __first != __last; ++__first, ++__cur)</span><br><span class="line"><span class="built_in">std</span>::_Construct(<span class="built_in">std</span>::__addressof(*__cur), *__first);  <span class="comment">//实际上还是使用的allocated,这样样子实现的就是拷贝语义,是不能进行转移语义的</span></span><br><span class="line">      <span class="keyword">return</span> __cur;</span><br><span class="line">    &#125;</span><br><span class="line">  __catch(...)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">std</span>::_Destroy(__result, __cur);</span><br><span class="line">      __throw_exception_again;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  @brief Copies the range [first,last) into result.</span></span><br><span class="line"><span class="comment">   *  @param  __first  An input iterator.</span></span><br><span class="line"><span class="comment">   *  @param  __last   An input iterator.</span></span><br><span class="line"><span class="comment">   *  @param  __result An output iterator.</span></span><br><span class="line"><span class="comment">   *  @return   __result + (__first - __last)</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  Like copy(), but does not require an initialized output range.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _InputIterator, <span class="keyword">typename</span> _ForwardIterator&gt;</span><br><span class="line">    <span class="keyword">inline</span> _ForwardIterator</span><br><span class="line">    uninitialized_copy(_InputIterator __first, _InputIterator __last,</span><br><span class="line">       _ForwardIterator __result)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_InputIterator&gt;::value_type</span><br><span class="line">_ValueType1;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_ForwardIterator&gt;::value_type</span><br><span class="line">_ValueType2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &lt; 201103L</span></span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">bool</span> __assignable = <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">      <span class="comment">// trivial types can have deleted assignment</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_InputIterator&gt;::reference _RefType1;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_ForwardIterator&gt;::reference _RefType2;</span><br><span class="line">      <span class="keyword">const</span> <span class="keyword">bool</span> __assignable = is_assignable&lt;_RefType2, _RefType1&gt;::value;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">std</span>::__uninitialized_copy&lt;__is_trivial(_ValueType1)</span><br><span class="line">       &amp;&amp; __is_trivial(_ValueType2)</span><br><span class="line">       &amp;&amp; __assignable&gt;::</span><br><span class="line">__uninit_copy(__first, __last, __result);  <span class="comment">//调用__uninitialized_copy::__uninit_copy函数进行构造</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++基础</title>
      <link href="/2019/01/04/c-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/01/04/c-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1>c++基础</h1><h2 id="一、常见问题"><a class="header-anchor" href="#一、常见问题">¶</a>一、常见问题</h2><h3 id="指针-数组"><a class="header-anchor" href="#指针-数组">¶</a>指针 数组</h3><p>关于指针,实际就是addr,在汇编代码中对应着M[R[xx]];引用类型,只是语法对指针做的一层封装,在传递值的语言以及函数中,拥有对象控制权限,那么传递的就是引用.</p><p>1.指针的实质:</p><ul><li>对于指针的类型决定了其每次进行移位操作时,内存地址的偏移大小,而任意类型指针其所占的内存大小咋取决于程序和机器内存地址位数<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li><li>void *类型指针可以代表任意指针类型,作为形参可以接受任意指针,指针之间的互相转换也是非常合理的.</li><li>指向指针指针类型如 int**p,从语法角度来理解p是一个指针,其指向了一个int*指针,也就是说该指针内存存放这一个指针的地址 <code>int \*p1=0; int \*\*p=&amp;p1</code>;</li><li>只想指针的引用类型 *&amp;ref</li></ul><p>2.数组的实质:</p><p>数组表示一段连续的空间,c++很容易将指针和数组概念不能完全分清楚.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.栈上分配数组</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> *a1= a;</span><br><span class="line"><span class="keyword">int</span> a2 = *a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br></pre></td></tr></table></figure><p>汇编代码:<br>首先[addr]不是间接取址 而是直接取址</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line"><span class="number">00</span>C64CB8  mov         dword ptr [ebp<span class="number">-14</span>h],<span class="number">1</span>  <span class="comment">//此处的地址就是a符号</span></span><br><span class="line"><span class="number">00</span>C64CBF  mov         dword ptr [ebp<span class="number">-10</span>h],<span class="number">2</span>  </span><br><span class="line"><span class="number">00</span>C64CC6  mov         dword ptr [ebp<span class="number">-0</span>Ch],<span class="number">3</span>  </span><br><span class="line"><span class="keyword">int</span> *a1 = a;                            <span class="comment">//将a赋予一个指针,就是将该数组首位内存地址计算出来并且给了指针</span></span><br><span class="line"><span class="number">00</span>C64CCD  lea         eax,[ebp<span class="number">-14</span>h]  </span><br><span class="line"><span class="number">00</span>C64CD0  mov         dword ptr [ebp<span class="number">-20</span>h],eax  </span><br><span class="line"><span class="keyword">int</span> a2 = *a;</span><br><span class="line"><span class="number">00</span>C64CD3  mov         eax,<span class="number">4</span>  </span><br><span class="line"><span class="number">00</span>C64CD8  imul        ecx,eax,<span class="number">0</span>   <span class="comment">//计算偏移</span></span><br><span class="line"><span class="number">00</span>C64CDB  mov         edx,dword ptr [ebp+ecx<span class="number">-14</span>h]  ecx=<span class="number">0</span> [ebp<span class="number">-14</span>h]=a</span><br><span class="line"><span class="number">00</span>C64CDF  mov         dword ptr [ebp<span class="number">-2</span>Ch],edx</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>堆上分配数组</span><br><span class="line"><span class="keyword">int</span> *a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125; <span class="comment">//c++中使用new关键字后,该函数本身就会返回一个指针</span></span><br><span class="line"><span class="comment">//此中情况下a指针指向的就是数组元素的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以上结论可以通过反汇编自行证明</span></span><br></pre></td></tr></table></figure><p>结论:</p><ul><li>对于数组如果是局部变量其本身就是通过栈维护的几个连续元素,语法上使用首元素[index]的形式进行访问;</li><li>如果将局部数组a符号赋值给数组,那么相当于引用了新的指针变量,指针变量内容为数组元素地址</li><li>使用堆数组则表现的如同java语言</li></ul><p>3.关于数组和指针在语法上的一些使用:</p><ul><li>c++中语法中数组名=指针</li><li>既然使用指针来控制数组,那么每次进行的偏移量是根据指针类型确定的,而数组长度则未知,在传递参数时,要告知数组长度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本类型指针和数组参数传递</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span>*p)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"int*p"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对于数组名[xx] 和指针 对于编译器来说当作参数时相同对待 看作一个指针值</span></span><br><span class="line">    <span class="comment">//这两个函数重复定义</span></span><br><span class="line"><span class="comment">//    void point(int array[])</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        std::cout&lt;&lt;"int*p";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    void point(int array[10])</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        std::cout&lt;&lt;"int*p";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param p 指向int[10] 这种类型数组名,每次偏移为type*length ,接受类型为数组指针</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pointArrayFun</span><span class="params">(<span class="keyword">int</span> (*p)[<span class="number">10</span>])</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p[<span class="number">1</span>]-p[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//指针的类型就是控制每次偏移的位置,对于p来说每次偏移的量就是10*4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param p为指向指针的指针,可以接受类型为 type *array[xx] 指针数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">arrayPointFun</span><span class="params">(<span class="keyword">int</span>**p)</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;p&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//本例子中代表了arrayPoint数组的首位地址</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;*p&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;<span class="comment">//代表了a的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pointAndArray</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>* arrayPoint[<span class="number">10</span>]=&#123;&amp;a,&amp;b&#125;;</span><br><span class="line">        <span class="comment">//匹配指针</span></span><br><span class="line">        arrayPointFun(arrayPoint);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> (*pointArray)[<span class="number">10</span>]=&amp;<span class="built_in">array</span>;</span><br><span class="line">        pointArrayFun(pointArray);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4.函数指针和函数名</p><ul><li>函数名等同于函数指针,也就是说在作为形参,函数名可以匹配函数参数和函数指针参数,无非是在使用的时候是否要使用*符号</li><li>当返回复杂类型 使用 auto fun()-&gt;return type</li></ul><hr><h3 id="作用域和生命周期"><a class="header-anchor" href="#作用域和生命周期">¶</a>作用域和生命周期</h3><p>c++的作用域有编译单元即文件,函数,函数内部出现的{}符号</p><ul><li>全a局符号:</li><li>delclear 声明 如外部函数声明,外部变量声明属于<code>弱符号</code>,对于c++未使用extern关键的外部变量声明会被编译器解释为全局变量这样的强符号</li><li>define 全局函数=类函数,全局变量定义都属于<code>强符号</code></li><li>static 修饰静态全局变量,为当前编译单元所有,静态变量可以声明在函数体中</li><li>局部变量:<br>定义在函数体作用域中,编译过程分配在栈上的变量,当作用域结束后随着栈回收而回收</li><li>关于类:<br>c++将类作为了全局符号,类中的函数作为了全局函数,static 类函数只是从编译器的角度来看是静态类函数,而不是和默认static 作为静态单元关键字来使用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//t.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ELFREAD_T_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELFREAD_T_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//ELFREAD_T_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"t.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T::test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ELFREAD_T2_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELFREAD_T2_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//ELFREAD_T2_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"t2.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">T::test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这两个cpp在链接过程就会出现全局符号重复定义</code></pre><p>头文件在c++语言中的作用就是将所谓的声明和定义分开,去看一下链接过程就能完全明白,按照上述定义的符号来理解,头文件的用法就是用来写外部符号,也就是所谓的 declear声明.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CMakeFiles\elfRead.dir&#x2F;objects.a(test2.cpp.obj): In function &#96;ZN1T4testEv&#39;:</span><br><span class="line">F:&#x2F;code&#x2F;clionProject&#x2F;elfRead&#x2F;test2.cpp:6: multiple definition of &#96;T::test()&#39;</span><br><span class="line">CMakeFiles\elfRead.dir&#x2F;objects.a(test.cpp.obj):F:&#x2F;code&#x2F;clionProject&#x2F;elfRead&#x2F;test.cpp:6: first defined here</span><br></pre></td></tr></table></figure><pre><code>这是minGW链接时提示的错误,说明类函数的确是被汇编器当作全局符号的,链接过程在符号解析的过程中抛出错误;即使此处不适用头文件,直接使用两个cpp,里边写相同的class定义,也会如此.</code></pre><p>补充:<br>对于语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="function">type <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//至少在minGW编译器中会将之看作声明,就是说在头文件中,可以进行类函数的实现,当该函数被引入其实现cpp中,如果在cpp再次实现该函数,会在`预处理`过程中提示`重复定义`</span></span><br><span class="line"><span class="comment">//当这种类头文件被引入其他使用者的编译头中,并不会在链接过程中出现任何问题,按照逻辑来说t.h 进行声明,t.cpp中进行定义,如果t.h中实现了一个类函数,就相当于一个全局符号,当xx.cpp引如t.h,在预处理展开后,也就出现了一个全局符号,链接时就应该出错.</span></span><br><span class="line"><span class="comment">//但是事实与之相反,并不会出现链接错误,就说明上述语法被编译器作为声明而非定义</span></span><br></pre></td></tr></table></figure><h2 id="￼10"><a class="header-anchor" href="#￼10">¶</a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T t;</span><br><span class="line">    t.test();</span><br><span class="line">    t.x();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时 t.test t.x</span></span><br><span class="line"><span class="comment">//t.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ELFREAD_T_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ELFREAD_T_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="number">123</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">x</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//ELFREAD_T_H</span></span></span><br><span class="line"><span class="comment">//test.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"t.h"</span></span></span><br><span class="line"><span class="keyword">void</span> T:: x()&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"xx"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></h2><h3 id="构造器相关"><a class="header-anchor" href="#构造器相关">¶</a>构造器相关</h3><p>1.默认构造器<br>默认构造器不完成任何内容,定义了其他构造器后,编译器不会再创建默认构造器,可以通过default关键字保留默认构造器  XX()=default;<br>2.构造器初始化列表顺序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> a;</span><br><span class="line"> <span class="keyword">int</span> b;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">//构造器初始化顺序时按照变量位置进行的</span></span><br><span class="line">   F(<span class="keyword">int</span> c,<span class="keyword">int</span> d):b(c),a(b)&#123;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">       <span class="comment">//4201358</span></span><br><span class="line">       <span class="comment">//1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.拷贝构造函数和赋值操作符完成了深拷贝工作</p><ul><li>拷贝构造函数的调用时机:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    F(<span class="keyword">const</span> F&amp;f)<span class="comment">//默认的拷贝</span></span><br><span class="line">    F&amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> F&amp;f)<span class="comment">// 默认的赋值运算符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">Person p2=p; <span class="comment">//创造新的对象时调用 也就是这条语句编译器认为是调用了拷贝构造器 参数是p2的地址和p的地址</span></span><br><span class="line">Pserson p=p2; <span class="comment">//赋值运算符</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发生值传递/返回值也会调用拷贝构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 对于这种返回值的情况</span></span><br><span class="line"><span class="comment">*  1.如果Person重写了析构函数,也就是说明Person含有指针对象,并且是在析构中delete了指针对象,那么对于形参p的拷贝对象实参p,就会在结束时造成实参p内存指针内存被回收</span></span><br><span class="line"><span class="comment">   2.编译器优化会自动使用移动语义,就会避免返回值的析构发生</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">void test2(Person p)&#123;</span></span><br><span class="line"><span class="comment"> return p; //此时在AX寄存器中又创建了一个p对象</span></span><br><span class="line"><span class="comment"> //当该函数结束时,会调用参数p对象的析构和返回p对象的析构</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">void test3()&#123;</span></span><br><span class="line"><span class="comment"> Person p;</span></span><br><span class="line"><span class="comment"> Pserson px;</span></span><br><span class="line"><span class="comment"> Person p2=test2(p); //拷贝构造</span></span><br><span class="line"><span class="comment"> px=test2(p); //赋值运算符</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><p>了解一个事实,编译器对于形参无论是X86还是IA32都创建了一个<code>新的</code>,无论是任何类型,形参所占用的空间和实参是相同</p><ul><li>基本数据类型形参在栈或者寄存器拷贝一份当作形参</li><li>指针类型相同,指针本身对于汇编来说也只是一个 <code>值</code>而已</li><li>类类型 分为值传递和引用传递, 前者对于栈对象,如果直接传递对象本身,相当于调用构造器创建新的形参对象;后者指栈对象传递引用或者取地址,都会传递该对象首地址,堆对象和传递引用和指针是相同的.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> a;</span><br><span class="line"> <span class="keyword">int</span> b;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> F(<span class="keyword">int</span> c,<span class="keyword">int</span> d):a(c),d(b)&#123;&#125;</span><br><span class="line"> F(F&amp;f)&#123;a=f.a;b=f.b;&#125; <span class="comment">//拷贝构造函数,参数必须是引用类型,否则相当于不断的调用拷贝构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.析构函数</p><ul><li>会在栈对象销毁后调用,堆对象调用delete过程中free函数调用前调用</li><li>析构函数本身{}中由程序员编写,用来释放类中指针成员,指针成员编译器自动释放</li><li>如果重写了析构函数,那么相对来说就要重写一个拷贝构造函数和拷贝赋值运算符,因为拷贝对于指针成员来说是浅拷贝,指针会指向同一块,重写的拷贝函数应该完成指针对象构造,具体看3.</li><li>指针作为基本数据类型,并不会触发析构函数,所以传递类对象时,传递引用就不会发生上述重写析构导致的内存回收</li></ul><p>5.委托构造函数,构造器调用前调用另一个构造完成初始化,以及其中的逻辑代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line"> <span class="keyword">int</span> a;</span><br><span class="line"> <span class="keyword">int</span> b;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> F(<span class="keyword">int</span> c,<span class="keyword">int</span> d):a(c),d(b)&#123;&#125;</span><br><span class="line"> F():F(<span class="number">1</span>,<span class="number">2</span>)&#123;&#125; <span class="comment">//委托构造</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.隐式类型转换可以通过explicit关键字屏蔽<br>7.仅仅使用数据的类使用struct<br>8.关于c++ 指针 引用 值 类构造器</p><ul><li>首先将指针和引用看作相同的,两者都占用空间,并且其值都是地址,只是c++编译器在语法上对两者进行了区别,属于不同类型,可以参与重载</li><li>值传递:参数在汇编指令下会进行一次值复制操作,无论该实参的类型,只是在c++语法层面将这个问题复杂化了<br>1.关于基本类值传递,就是简单的复制操作;对于简单类型的引用或者指针传递,被称之为引用传递,实际对于引用/指针来说还是存在一次地址值的复制操作,作为寄存器或栈值进行函数调用,只是该参数的行为改动的是原值的<br>2.对于复杂类型类的值传递问题,对于语法层面的值传递,会导致拷贝构造函数的调用,返回值也是,都存在了创建一份新的对象的操作;当传递指针和引用时候,值传递的是地址值,此时的参数复制工作并不会涉及原对象的拷贝工作<br>3.关于析构函数,析构函数本身并不做什么工作,对于类成员变量的清除,默认析构函数也不会进行;对于汇编代码的堆栈指针变化造成的所谓<code>回收堆栈</code>也不会对内存本身数据造成改变,只是在语法上不让代码访问,形参也是如此,不过X86形参会放在寄存器中;这里要说的意思是,只有你的析构函数主动清除了指针成员指向的内存,此时返回临时引用才会造成问题.</li></ul><hr><h2 id="二、关键字"><a class="header-anchor" href="#二、关键字">¶</a>二、关键字</h2><h3 id="const"><a class="header-anchor" href="#const">¶</a>const</h3><ol><li>基础用法:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> <span class="keyword">const</span>* a <span class="comment">//前者为顶层const  后者底层const</span></span><br></pre></td></tr></table></figure><p>顶层const 表示 a不能再被赋值 ,底层const 表示不能通过*a进行赋值操作</p><h3 id="typedef和using"><a class="header-anchor" href="#typedef和using">¶</a>typedef和using</h3><ol><li>基础用法:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.使用别名</span></span><br><span class="line"><span class="keyword">typedef</span> typeName type;</span><br><span class="line"><span class="keyword">using</span> typeName=type;</span><br><span class="line"><span class="comment">//2.using 使用命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xx; <span class="comment">//不推荐这样使用会导致命名空间污染</span></span><br></pre></td></tr></table></figure><h3 id="auto"><a class="header-anchor" href="#auto">¶</a>auto</h3><ol><li>基础用法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.自动推断类型</span><br><span class="line">auto returnFun a;</span><br><span class="line">&#x2F;&#x2F;2.后置返回类型</span><br><span class="line">auto fun(paras)-&gt;return Type</span><br></pre></td></tr></table></figure><h3 id="decltype"><a class="header-anchor" href="#decltype">¶</a>decltype</h3><ol><li>基础用法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获得类型</span><br><span class="line">decltype (expression)</span><br></pre></td></tr></table></figure><h3 id="命名空间namespace"><a class="header-anchor" href="#命名空间namespace">¶</a>命名空间namespace</h3><ol><li>基础用法:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.定义命名空间</span><br><span class="line">namesapce xx&#123;</span><br><span class="line">code</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.使用命名空间</span><br><span class="line">xx::fun</span><br><span class="line">&#x2F;&#x2F;3.匿名命名空间</span><br><span class="line">namesapce&#123;</span><br><span class="line">&#125;</span><br><span class="line">匿名命名空间和static关键字都可以将该变量 函数的作用域控制在当前文件中</span><br></pre></td></tr></table></figure><p>关于匿名命名空间可以参看<a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-cpp-styleguide/scoping/#unnamed-namespace-and-static-variables#" target="_blank" rel="noopener">google c++ style</a></p><h3 id="class-struct-union"><a class="header-anchor" href="#class-struct-union">¶</a>class struct union</h3><ol><li>基础用法:<br>class struct只是默认权限不同,一般仅仅当不含有成员函数的情况使用struct;<br>union {<br>int x<br>double y<br>} 同时只能一个变量占用内存,也就是说其内存大小= <code>sizeof (int)</code> /<code>sizeof (double)</code></li></ol><h2 id="三、宏"><a class="header-anchor" href="#三、宏">¶</a>三、宏</h2><h3 id="1-使用宏的保护机制"><a class="header-anchor" href="#1-使用宏的保护机制">¶</a>1.使用宏的保护机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#ifndef xx</span><br><span class="line">#define xx</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><ul><li>关于xx的命名方式要体现项目的全路径,如 FOO_BAR_BAZ_H_</li><li>关于c++的编译单元是以单个文件进行的,宏保护就是对于单个文件进行的保护</li></ul><h3 id="2-使用-表示宏的换行"><a class="header-anchor" href="#2-使用-表示宏的换行">¶</a>2.使用\表示宏的换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;测试函数的宏定义</span><br><span class="line">#define Test(Name) \</span><br><span class="line">extern void testFunction(void);\</span><br><span class="line">class TestClass    \</span><br><span class="line">&#123;                  \</span><br><span class="line">  public:          \</span><br><span class="line">    TestClass()    \</span><br><span class="line"> &#123;                 \</span><br><span class="line">   cout&lt;&lt;#Name;    \</span><br><span class="line">   testFunction(); \</span><br><span class="line"> &#125;                 \</span><br><span class="line">&#125;instance;          \</span><br><span class="line">void testFunction(void)</span><br><span class="line">&#x2F;&#x2F;如何使用</span><br><span class="line">Test(fun)</span><br><span class="line">&#123;</span><br><span class="line">std::cout&lt;&lt;&quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子还能看出来extern 关系不仅仅在链接时取链接外部函数,还能链接同一个文件中的函数</p><h2 id="四、其他特性"><a class="header-anchor" href="#四、其他特性">¶</a>四、其他特性</h2><h3 id="1-使用-进行初始化"><a class="header-anchor" href="#1-使用-进行初始化">¶</a>1.使用{}进行初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int array[3]&#x3D;&#123;1,2,3&#125;</span><br><span class="line">std::vector&lt;int&gt;vec&#x3D;&#123;1,2,3&#125; &#x2F;&#x2F;google中提倡使用这个替代可变参数</span><br></pre></td></tr></table></figure><h3 id="2-关于c-内存管理"><a class="header-anchor" href="#2-关于c-内存管理">¶</a>2.关于c++内存管理</h3><ol><li>编译器只会主动调用栈对象的析构函数,而程序员要自己确定的事情是当该类中含有堆内存的时候要在析构函数中进行delete,delete的作用是调用析构函数,并且释放该指针指向的堆内存</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Innner</span>&#123;</span></span><br><span class="line">type * var;</span><br><span class="line">~()&#123;</span><br><span class="line"><span class="keyword">if</span>(var)</span><br><span class="line"><span class="keyword">delete</span> var;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line">Inner * in;</span><br><span class="line">~()&#123;</span><br><span class="line"><span class="keyword">if</span>(in)</span><br><span class="line"><span class="keyword">delete</span> in;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">(F f)</span></span>&#123; <span class="comment">//如果如此直接传递值,则会引起临时对象析构,导致内存问题</span></span><br><span class="line"><span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//仅仅当`句柄`为栈对象的时候才会编译器才会按照如此进行,在于该内存在函数作用域结束后就无法生存</span></span><br><span class="line">F f;<span class="comment">// 当该函数结束自动释放内存</span></span><br><span class="line"><span class="comment">//如果时堆指针</span></span><br><span class="line">F *f=<span class="keyword">new</span> F()<span class="comment">//函数结束后则不会调用析构函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于栈对象</p><ul><li>又因为值传递问题,引出了 拷贝构造函数在 栈对象参数传递  栈对象返回时导致的析构,可能会引起内部指针指向同一处造成的内存问题,如果非要进行值传递,那么就要定义值传递的拷贝构造函数,以及值传递的赋值运算符</li><li>关于栈对象中共享堆成员内存,那么就要定义引用传递的拷贝构造函数和赋值运算符,以及析构函数</li></ul><figure class="highlight cpp"><figcaption><span>值行为的类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Class Inner&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Inner(<span class="keyword">int</span> a):a(a)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line">Inner* in;</span><br><span class="line">F(Inner* in):in(in)&#123;&#125;</span><br><span class="line"><span class="comment">//值传递的拷贝构造函数</span></span><br><span class="line">F(<span class="keyword">const</span> &amp;F f)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;in=<span class="keyword">new</span> Inner(f.in.a);</span><br><span class="line">&#125;</span><br><span class="line">F&amp; oprator=(<span class="keyword">const</span> &amp;F f)</span><br><span class="line"><span class="keyword">this</span>-&gt;in=<span class="keyword">new</span> Inner(f.in.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时的析构函数按照正常的就可以</span></span><br><span class="line">~F()&#123;</span><br><span class="line"><span class="keyword">if</span>(in)</span><br><span class="line"><span class="keyword">delete</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>引用行为的类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Class Inner&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">Inner(<span class="keyword">int</span> a):a(a)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>&#123;</span></span><br><span class="line">Inner* in;</span><br><span class="line"><span class="built_in">std</span>::<span class="keyword">size_t</span>* count;</span><br><span class="line">F(Inner* in):in(in),count(<span class="number">1</span>)&#123;&#125;</span><br><span class="line"><span class="comment">//引用行为的拷贝构造函数</span></span><br><span class="line">F(<span class="keyword">const</span> &amp;F f)&#123;</span><br><span class="line">  <span class="keyword">this</span>-&gt;in=f.in;</span><br><span class="line">  <span class="keyword">this</span>.count=f.count;</span><br><span class="line">  <span class="keyword">this</span>.count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//引用行为的赋值运算符</span></span><br><span class="line">F&amp; oprator=(<span class="keyword">const</span> &amp;F f)</span><br><span class="line"> count--;</span><br><span class="line"> clear();</span><br><span class="line"> <span class="keyword">this</span>.in=f.in;</span><br><span class="line"> <span class="keyword">this</span>.count=f.count;</span><br><span class="line"> count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时的析构函数按照正常的就可以</span></span><br><span class="line">~F()&#123;</span><br><span class="line">count--;</span><br><span class="line">clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(count==<span class="number">0</span>)</span><br><span class="line"> <span class="keyword">delete</span> in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如此就完成了对于中栈对象值行为和拷贝行为的管理</span></span><br></pre></td></tr></table></figure><p>对于堆对象</p><ul><li>还是上述的问题,堆对象句柄c++编译器不会为之进行主动析构,只有程序员主动调用析构函数,理解一下无论时栈还是堆句柄,我们所做的都应该是在其句柄声明周期结束的时候去判断是否应该是否该内存,对于分配在栈上的内存,编译器就是很自信的直接清除了,而令人困惑的就是堆这部分内存.</li><li>我的理解是,如果你创建了一个栈对象,并且保持值行为,那么这个对象的内存无论是栈成员,还是指针堆成员,都应该伴随着该句柄的生命而结束;如果定义的是引用行为,那么就要使用引用计数来判定何时释放堆成员.</li><li>使用原生指针作为堆句柄时,问题在于你没有办法使用c++本身语法进行引用计数判定</li><li>一般来说存在new 就要有与之匹配的delete</li></ul><figure class="highlight cpp"><figcaption><span>堆句柄</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class A&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">A *a=NEW A();</span><br><span class="line">A *a2=NEW A();</span><br><span class="line"><span class="comment">//对于指针数据类型本身来说仅仅是一次值覆盖过程,但是造成了a本身指向的内存没有办法释放</span></span><br><span class="line"><span class="comment">//原因在于type*这个类型实质还是指针,没有办法执行 所谓的引用行为赋值运算符,通过智能指针将指针封装成对象类型就能够限制此行为</span></span><br><span class="line">a=a2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>智能指针的实质就是通过将指针封装成栈对象,此时编译器对于智能指针这种栈对象就会按照一般情况来处理</p><h3 id="3-左右值"><a class="header-anchor" href="#3-左右值">¶</a>3. 左右值</h3><p>将没有指向<code>句柄</code>的量称之为右值</p><ul><li>如临时变量 1 a 等,</li><li>由左值运算出的结果未赋值的情况<br>string a=“123”;string b=123&quot;; a+b(右值)</li></ul><p>引用函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Temp</span>&#123;</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> &amp;</span>; <span class="comment">//匹配this为左值的情况</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>&amp;&amp; <span class="comment">//匹配this是右值的情况,&amp;和const一样可以参与函数重载</span></span></span><br><span class="line"><span class="function"> Temp <span class="title">test2</span><span class="params">()</span></span>;<span class="comment">//该函数函数的就是右值</span></span><br><span class="line"> <span class="function">Temp&amp; <span class="title">test3</span><span class="params">()</span></span>;<span class="comment">//返回左值</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"> test2().test()<span class="comment">//匹配左值</span></span><br><span class="line"> test3().test() <span class="comment">//匹配右值函数</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>对于熟悉的我就不会列出例子 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>标准库源码-io</title>
      <link href="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/"/>
      <url>/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/</url>
      
        <content type="html"><![CDATA[<h2 id="c-io概述"><a class="header-anchor" href="#c-io概述">¶</a>c++ io概述</h2><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/io.png" class=""><p>补充:</p><ol><li>关于postypes.h 定义的类型</li></ol><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/fpos.png" class=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _GLIBCXX_HAVE_INT64_T_LONG</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">long</span>          streamoff;  <span class="comment">//表示相对的文件/流位置（距 fpos 的偏移），足以表示任何文件大小</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_GLIBCXX_HAVE_INT64_T_LONG_LONG)</span></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>     streamoff;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(_GLIBCXX_HAVE_INT64_T) </span></span><br><span class="line"> <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span>streamsize <span class="comment">//ptrdiff_t 表示指针间距离=(addr1-addr2)/typeSize  如 (int* -int*)/4</span></span><br><span class="line"> <span class="comment">//streamsize 表示 I/O 操作中传输的字符数，或 I/O 缓冲区的大小 </span></span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _StateT&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">fpos</span> //表示流或文件中的绝对位置 (<span class="title">filePosition</span>?)</span></span><br><span class="line"><span class="class">    &#123;</span>&#125;</span><br><span class="line"> <span class="comment">//以下表示泛型特化   </span></span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; streampos;</span><br><span class="line">  <span class="comment">/// File position for wchar_t streams.</span></span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; wstreampos;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">  <span class="comment">/// File position for char16_t streams.</span></span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; u16streampos;</span><br><span class="line">  <span class="comment">/// File position for char32_t streams.</span></span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; u32streampos;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; streampos;  <span class="comment">//fpos表示的就是流的位置</span></span><br><span class="line">  <span class="comment">/// File position for wchar_t streams.</span></span><br><span class="line">  <span class="keyword">typedef</span> fpos&lt;<span class="keyword">mbstate_t</span>&gt; wstreampos;</span><br></pre></td></tr></table></figure><h3 id="local"><a class="header-anchor" href="#local">¶</a>local</h3><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/locale.png" class="" title="locale.h"><p>local是所有io类中都含有的一个成员属性,它完成了关于本地化的相关操作</p><figure class="highlight cpp"><figcaption><span>locale.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span>category;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Forward decls and friends:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">facet</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">id</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> _<span class="title">Impl</span>;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">facet</span>;</span>  <span class="comment">//它完成了各式的本地化操作</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> _<span class="title">Impl</span>;</span></span><br><span class="line">    <span class="comment">//这三个实现在tcc中</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Facet&gt;</span><br><span class="line">      <span class="keyword">friend</span> <span class="keyword">bool</span></span><br><span class="line">      has_facet(<span class="keyword">const</span> locale&amp;) <span class="keyword">throw</span>();</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Facet&gt;</span><br><span class="line">      <span class="keyword">friend</span> <span class="keyword">const</span> _Facet&amp;</span><br><span class="line">      use_facet(<span class="keyword">const</span> locale&amp;);</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Cache&gt;</span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> __<span class="title">use_cache</span>;</span></span><br><span class="line">  <span class="comment">//这实际上就是平面的类型    </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category none= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category ctype= <span class="number">1L</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category numeric= <span class="number">1L</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category collate= <span class="number">1L</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category time= <span class="number">1L</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category monetary= <span class="number">1L</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category messages= <span class="number">1L</span> &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> category all= (ctype | numeric | collate |</span><br><span class="line">   time  | monetary | messages);</span><br><span class="line"><span class="keyword">private</span>: <span class="comment">//私有属性                       </span></span><br><span class="line">    <span class="comment">// The (shared) implementation</span></span><br><span class="line">    _Impl*_M_impl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The "C" reference locale</span></span><br><span class="line">    <span class="keyword">static</span> _Impl*       _S_classic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Current global locale</span></span><br><span class="line">    <span class="keyword">static</span> _Impl*_S_global;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Names of underlying locale categories.</span></span><br><span class="line">    <span class="comment">// NB: locale::global() has to know how to modify all the</span></span><br><span class="line">    <span class="comment">// underlying categories, not just the ones required by the C++</span></span><br><span class="line">    <span class="comment">// standard.</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="keyword">const</span>* <span class="keyword">const</span> _S_categories;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>impl.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// Friends.</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">locale</span>;</span></span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">locale</span>:</span>:facet;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Facet&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span></span><br><span class="line">    has_facet(<span class="keyword">const</span> locale&amp;) <span class="keyword">throw</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Facet&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">const</span> _Facet&amp;</span><br><span class="line">    use_facet(<span class="keyword">const</span> locale&amp;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Cache&gt;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> __<span class="title">use_cache</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// Data Members.</span></span><br><span class="line">  <span class="comment">//关于facet /id的声明文件中,并不能看到有用的信息,总之facet是基类,id用来表示facet,impl则是locale具体行为的类,它持有了facet和id成员</span></span><br><span class="line">  </span><br><span class="line">  _Atomic_word_M_refcount;</span><br><span class="line">  <span class="keyword">const</span> facet**_M_facets;</span><br><span class="line">  <span class="keyword">size_t</span>_M_facets_size;</span><br><span class="line">  <span class="keyword">const</span> facet**_M_caches;</span><br><span class="line">  <span class="keyword">char</span>**_M_names;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_ctype[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_numeric[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_collate[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_time[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_monetary[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>_S_id_messages[];</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> locale::id* <span class="keyword">const</span>* <span class="keyword">const</span> _S_facet_categories[];</span><br><span class="line">  </span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>collate:facet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  @brief  Facet for localized string comparison.  //该平面是用来比较字符串的</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  This facet encapsulates the code to compare strings in a localized</span></span><br><span class="line"><span class="comment">   *  manner.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  The collate template uses protected virtual functions to provide</span></span><br><span class="line"><span class="comment">   *  the actual results.  The public accessors forward the call to</span></span><br><span class="line"><span class="comment">   *  the virtual functions.  These virtual functions are hooks for</span></span><br><span class="line"><span class="comment">   *  developers to implement the behavior they require from the</span></span><br><span class="line"><span class="comment">   *  collate facet.  //该类虚函数可以由子类决定实现</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> _<span class="title">GLIBCXX_NAMESPACE_CXX11</span> <span class="title">collate</span> :</span> <span class="keyword">public</span> locale::facet</span><br><span class="line">    &#123;  </span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _CharTchar_type;</span><br><span class="line">      <span class="keyword">typedef</span> basic_string&lt;_CharT&gt;string_type;</span><br><span class="line">      <span class="comment">//比如:</span></span><br><span class="line">       <span class="keyword">int</span></span><br><span class="line">      compare(<span class="keyword">const</span> _CharT* __lo1, <span class="keyword">const</span> _CharT* __hi1,</span><br><span class="line">      <span class="keyword">const</span> _CharT* __lo2, <span class="keyword">const</span> _CharT* __hi2) <span class="keyword">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;do_compare(__lo1, __hi1, __lo2, __hi2); &#125;</span><br><span class="line">      <span class="comment">//虚</span></span><br><span class="line">            <span class="keyword">virtual</span> <span class="keyword">int</span></span><br><span class="line">      do_compare(<span class="keyword">const</span> _CharT* __lo1, <span class="keyword">const</span> _CharT* __hi1,</span><br><span class="line"> <span class="keyword">const</span> _CharT* __lo2, <span class="keyword">const</span> _CharT* __hi2) <span class="keyword">const</span>; <span class="comment">//此处没有写成=0,tcc中也没有实现,不能确定是否库中没有实现</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>num_put: public locale::facet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该平面定义在locale_facets.中,起到了对于整形进行格式化,os的buf中的工作</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  @brief  Primary class template num_put.</span></span><br><span class="line"><span class="comment">   *  @ingroup locales</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  This facet encapsulates the code to convert a number to a string.  It is</span></span><br><span class="line"><span class="comment">   *  used by the ostream numeric insertion operators. //当os进行numberic输出操作时,将数字转换为字符串</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  The num_put template uses protected virtual functions to provide the</span></span><br><span class="line"><span class="comment">   *  actual results.  The public accessors forward the call to the virtual</span></span><br><span class="line"><span class="comment">   *  functions.  These virtual functions are hooks for developers to</span></span><br><span class="line"><span class="comment">   *  implement the behavior they require from the num_put facet.  </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">   <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _OutIter&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">num_put</span> :</span> <span class="keyword">public</span> locale::facet</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> _CharTchar_type;</span><br><span class="line">    <span class="keyword">typedef</span> _OutIter    iter_type; <span class="comment">//buf迭代器,见下文</span></span><br><span class="line">    <span class="comment">//典型的函数</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *  @brief  Numeric formatting.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *  Formats the boolean @a v and inserts it into a stream.  It does so</span></span><br><span class="line"><span class="comment">       *  by calling num_put::do_put().</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *  If ios_base::boolalpha is set, writes ctype&lt;CharT&gt;::truename() or</span></span><br><span class="line"><span class="comment">       *  ctype&lt;CharT&gt;::falsename().  Otherwise formats @a v as an int.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *  @param  __s  Stream to write to.</span></span><br><span class="line"><span class="comment">       *  @param  __io  Source of locale and flags.</span></span><br><span class="line"><span class="comment">       *  @param  __fill  Char_type to use for filling.</span></span><br><span class="line"><span class="comment">       *  @param  __v  Value to format and insert.</span></span><br><span class="line"><span class="comment">       *  @return  Iterator after writing.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     iter_type</span><br><span class="line">      put(iter_type __s, ios_base&amp; __io, char_type __fill, <span class="keyword">bool</span> __v) <span class="keyword">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;do_put(__s, __io, __fill, __v); &#125; <span class="comment">//该函数实现也可以在locale_facet.h中找到</span></span><br><span class="line">      <span class="comment">//tcc实现</span></span><br><span class="line">       <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _OutIter&gt;</span><br><span class="line">    _OutIter</span><br><span class="line">    num_put&lt;_CharT, _OutIter&gt;::</span><br><span class="line">    do_put(iter_type __s, ios_base&amp; __io, char_type __fill, <span class="keyword">bool</span> __v) <span class="keyword">const</span> <span class="comment">//对bool类型进行格式化</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> ios_base::fmtflags __flags = __io.flags();</span><br><span class="line">      <span class="keyword">if</span> ((__flags &amp; ios_base::boolalpha) == <span class="number">0</span>) <span class="comment">//当不是boolalpha控制符时</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">const</span> <span class="keyword">long</span> __l = __v;</span><br><span class="line">          __s = _M_insert_int(__s, __io, __fill, __l); <span class="comment">//调用这个插入</span></span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">  <span class="keyword">typedef</span> __numpunct_cache&lt;_CharT&gt;              __cache_type; <span class="comment">//声明在locale_facets.h中</span></span><br><span class="line">  __use_cache&lt;__cache_type&gt; __uc;</span><br><span class="line">  <span class="keyword">const</span> locale&amp; __loc = __io._M_getloc();</span><br><span class="line">  <span class="keyword">const</span> __cache_type* __lc = __uc(__loc);       <span class="comment">//__uc(__loc)这是一个函数操作符,返回__numpunct_cache指针</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _CharT* __name = __v ? __lc-&gt;_M_truename</span><br><span class="line">                             : __lc-&gt;_M_falsename;  <span class="comment">//改变bool为string类型的"true"/"false"</span></span><br><span class="line">  <span class="keyword">int</span> __len = __v ? __lc-&gt;_M_truename_size</span><br><span class="line">                  : __lc-&gt;_M_falsename_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> streamsize __w = __io.width();</span><br><span class="line">  <span class="keyword">if</span> (__w &gt; <span class="keyword">static_cast</span>&lt;streamsize&gt;(__len))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> streamsize __plen = __w - __len;</span><br><span class="line">      _CharT* __ps</span><br><span class="line">= <span class="keyword">static_cast</span>&lt;_CharT*&gt;(__builtin_alloca(<span class="keyword">sizeof</span>(_CharT)</span><br><span class="line">* __plen));</span><br><span class="line"></span><br><span class="line">      char_traits&lt;_CharT&gt;::assign(__ps, __plen, __fill);</span><br><span class="line">      __io.width(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((__flags &amp; ios_base::adjustfield) == ios_base::left)</span><br><span class="line">&#123;</span><br><span class="line">  __s = <span class="built_in">std</span>::__write(__s, __name, __len);   <span class="comment">//明显此函数才是进行buf插入的操作</span></span><br><span class="line">  __s = <span class="built_in">std</span>::__write(__s, __ps, __plen);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  __s = <span class="built_in">std</span>::__write(__s, __ps, __plen);</span><br><span class="line">  __s = <span class="built_in">std</span>::__write(__s, __name, __len);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> __s;</span><br><span class="line">    &#125;</span><br><span class="line">  __io.width(<span class="number">0</span>);</span><br><span class="line">  __s = <span class="built_in">std</span>::__write(__s, __name, __len);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> __s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入整形</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _OutIter&gt;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _ValueT&gt;</span><br><span class="line">      _OutIter</span><br><span class="line">      num_put&lt;_CharT, _OutIter&gt;::</span><br><span class="line">      _M_insert_int(_OutIter __s, ios_base&amp; __io, _CharT __fill,</span><br><span class="line">    _ValueT __v) <span class="keyword">const</span></span><br><span class="line">      &#123;</span><br><span class="line">      <span class="comment">//获取一些必要信息</span></span><br><span class="line"><span class="keyword">using</span> __gnu_cxx::__add_unsigned;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> __add_unsigned&lt;_ValueT&gt;::__type __unsigned_type;</span><br><span class="line"><span class="keyword">typedef</span> __numpunct_cache&lt;_CharT&gt;             __cache_type;</span><br><span class="line">__use_cache&lt;__cache_type&gt; __uc;</span><br><span class="line"><span class="keyword">const</span> locale&amp; __loc = __io._M_getloc();</span><br><span class="line"><span class="keyword">const</span> __cache_type* __lc = __uc(__loc);</span><br><span class="line"><span class="keyword">const</span> _CharT* __lit = __lc-&gt;_M_atoms_out;</span><br><span class="line"><span class="keyword">const</span> ios_base::fmtflags __flags = __io.flags();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Long enough to hold hex, dec, and octal representations.  由于要将num转换为字符串,并且要保证不同进制,进行了空间分配</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> __ilen = <span class="number">5</span> * <span class="keyword">sizeof</span>(_ValueT);</span><br><span class="line">_CharT* __cs = <span class="keyword">static_cast</span>&lt;_CharT*&gt;(__builtin_alloca(<span class="keyword">sizeof</span>(_CharT)</span><br><span class="line">     * __ilen)); <span class="comment">//用来容纳任意整形改变成不同进制字符的char/wchar_t*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [22.2.2.2.2] Stage 1, numeric conversion to character.</span></span><br><span class="line"><span class="comment">// Result is returned right-justified in the buffer.</span></span><br><span class="line"><span class="keyword">const</span> ios_base::fmtflags __basefield = __flags &amp; ios_base::basefield;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> __dec = (__basefield != ios_base::oct</span><br><span class="line">    &amp;&amp; __basefield != ios_base::hex);</span><br><span class="line"><span class="keyword">const</span> __unsigned_type __u = ((__v &gt; <span class="number">0</span> || !__dec)</span><br><span class="line">     ? __unsigned_type(__v)</span><br><span class="line">     : -__unsigned_type(__v));  <span class="comment">//你按照有无符号转换截断原则就知道了,v&lt;0&amp;&amp;__dec时,负数转换为同余正数</span></span><br><span class="line"> <span class="keyword">int</span> __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);<span class="comment">//这个函数就是做生成进制字符串操作</span></span><br><span class="line">__cs += __ilen - __len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add grouping, if necessary.</span></span><br><span class="line"><span class="keyword">if</span> (__lc-&gt;_M_use_grouping)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Grouping can add (almost) as many separators as the number</span></span><br><span class="line">    <span class="comment">// of digits + space is reserved for numeric base or sign.</span></span><br><span class="line">    _CharT* __cs2 = <span class="keyword">static_cast</span>&lt;_CharT*&gt;(__builtin_alloca(<span class="keyword">sizeof</span>(_CharT)</span><br><span class="line">  * (__len + <span class="number">1</span>)</span><br><span class="line">  * <span class="number">2</span>));</span><br><span class="line">    _M_group_int(__lc-&gt;_M_grouping, __lc-&gt;_M_grouping_size,</span><br><span class="line"> __lc-&gt;_M_thousands_sep, __io, __cs2 + <span class="number">2</span>, __cs, __len);</span><br><span class="line">    __cs = __cs2 + <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Complete Stage 1, prepend numeric base or sign.</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(__dec, <span class="literal">true</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Decimal.</span></span><br><span class="line">    <span class="keyword">if</span> (__v &gt;= <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">bool</span>(__flags &amp; ios_base::showpos)</span><br><span class="line">    &amp;&amp; __gnu_cxx::__numeric_traits&lt;_ValueT&gt;::__is_signed)</span><br><span class="line">  *--__cs = __lit[__num_base::_S_oplus], ++__len;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      *--__cs = __lit[__num_base::_S_ominus], ++__len;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">bool</span>(__flags &amp; ios_base::showbase) &amp;&amp; __v)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (__basefield == ios_base::oct)</span><br><span class="line">      *--__cs = __lit[__num_base::_S_odigits], ++__len;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">// 'x' or 'X'</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> __uppercase = __flags &amp; ios_base::uppercase;</span><br><span class="line">*--__cs = __lit[__num_base::_S_ox + __uppercase];</span><br><span class="line"><span class="comment">// '0'</span></span><br><span class="line">*--__cs = __lit[__num_base::_S_odigits];</span><br><span class="line">__len += <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pad.</span></span><br><span class="line"><span class="keyword">const</span> streamsize __w = __io.width();</span><br><span class="line"><span class="keyword">if</span> (__w &gt; <span class="keyword">static_cast</span>&lt;streamsize&gt;(__len))</span><br><span class="line">  &#123;</span><br><span class="line">    _CharT* __cs3 = <span class="keyword">static_cast</span>&lt;_CharT*&gt;(__builtin_alloca(<span class="keyword">sizeof</span>(_CharT)</span><br><span class="line">  * __w));</span><br><span class="line">    _M_pad(__fill, __w, __io, __cs3, __cs, __len);</span><br><span class="line">    __cs = __cs3;</span><br><span class="line">  &#125;</span><br><span class="line">__io.width(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [22.2.2.2.2] Stage 4.</span></span><br><span class="line"><span class="comment">// Write resulting, fully-formatted string to output iterator.</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::__write(__s, __cs, __len);  <span class="comment">//最终写回还是这个函数</span></span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">//在clion MinGW环境下,ide不会显示这些虚函数的定义和子类,文件路径mingw530_32\i686-w64-mingw32\include\c++\bits</span></span><br><span class="line">    <span class="comment">//std::__write的调用,</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT&gt;</span><br><span class="line">    <span class="keyword">inline</span></span><br><span class="line">    ostreambuf_iterator&lt;_CharT&gt;</span><br><span class="line">    __write(ostreambuf_iterator&lt;_CharT&gt; __s, <span class="keyword">const</span> _CharT* __ws, <span class="keyword">int</span> __len)</span><br><span class="line">    &#123;</span><br><span class="line">      __s._M_put(__ws, __len);  <span class="comment">//这个函数实际调用了buf中的sputn函数</span></span><br><span class="line">      <span class="keyword">return</span> __s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is the unspecialized form of the template. 非特化版本</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _OutIter&gt;</span><br><span class="line">    <span class="keyword">inline</span></span><br><span class="line">    _OutIter</span><br><span class="line">    __write(_OutIter __s, <span class="keyword">const</span> _CharT* __ws, <span class="keyword">int</span> __len)  <span class="comment">//逻辑上来看就是插入到buf当前空闲位置,然后将迭代器移动</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> __j = <span class="number">0</span>; __j &lt; __len; __j++, ++__s)</span><br><span class="line">*__s = __ws[__j];</span><br><span class="line">      <span class="keyword">return</span> __s;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//与o向对应的i操作,其基本读操作都是_M_extract_int类似这样的函数  </span></span><br><span class="line"> <span class="comment">//这是一部分</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="keyword">bool</span> __negative = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!__testeof)</span><br><span class="line">  &#123;</span><br><span class="line">    __c = *__beg;</span><br><span class="line">    __negative = __c == __lit[__num_base::_S_iminus];</span><br><span class="line">    <span class="keyword">if</span> ((__negative || __c == __lit[__num_base::_S_iplus])</span><br><span class="line">&amp;&amp; !(__lc-&gt;_M_use_grouping &amp;&amp; __c == __lc-&gt;_M_thousands_sep)</span><br><span class="line">&amp;&amp; !(__c == __lc-&gt;_M_decimal_point))</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (++__beg != __end)  <span class="comment">//beg这个迭代器的操作就是对内部buf的操作</span></span><br><span class="line">  __c = *__beg;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  __testeof = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ios-bsae"><a class="header-anchor" href="#ios-bsae">¶</a>ios_bsae</h3><p>定义:管理格式化标准以及相关异常<br>声明在 ios_base.h中 iosfwd.h声明了向前泛型声明和类型别名</p><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/ios_base.png" class=""><ol><li>fmtflag<br><a href="//1.fmtflags" target="_blank" rel="noopener">//1.fmtflags</a><br>常量解释<br>dec为整数 I/O 使用十进制底：见 std::dec<br>oct为整数 I/O 使用八进制底：见 std::oct<br>hex为整数 I/O 使用十六进制底：见 std::hex<br>basefielddec|oct|hex 。适用于掩码运算<br>left左校正（添加填充字符到右）：见 std::left<br>right右校正（添加填充字符到左）：见 std::right<br>internal内部校正（添加填充字符到内部选定点）：见 std::internal<br>adjustfieldleft|right|internal 。适用于掩码运算<br>scientific用科学记数法生成浮点类型，或若与 fixed 组合则用十六进制记法：见 std::scientific<br>fixed用定点记法生成浮点类型，或若与 scientific 组合则用十六进制记法：见 std::fixed<br>floatfieldscientific|fixed 。适用于掩码运算<br>boolalpha以字母数字格式插入并释出 bool 类型：见 std::boolalpha<br>showbase生成为整数输出指示数字基底的前缀，货币 I/O 中要求现金指示器：见 std::showbase<br>showpoint无条件为浮点数输出生成小数点字符：见 std::showpoint<br>showpos为非负数值输出生成 + 字符，见 std::showpos<br>skipws在具体输入操作前跳过前导空白符：见 std::skipws<br>unitbuf在每次输出操作后冲入输出：见 std::unitbuf<br>uppercase在具体输出的输出操作中以大写等价替换小写字符：见 std::uppercase</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> myIoTest::ios_base_test::flagEnumTest() &#123;</span><br><span class="line">    <span class="comment">//以hex输出</span></span><br><span class="line">    <span class="built_in">cout</span>.setf(ios_base::hex, ios::basefield);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">15</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="comment">//left | right :修改填充字符的默认定位。 left 与 right 应用到任何输出，而 internal 应用到整数、浮点和货币输出。在输入时无效果。</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Left fill:\n"</span> &lt;&lt; <span class="built_in">std</span>::left &lt;&lt; setfill(<span class="string">'*'</span>) <span class="comment">//os.setFill('*')</span></span><br><span class="line">         &lt;&lt; setw(<span class="number">12</span>) &lt;&lt; <span class="number">-1.23</span> &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">         &lt;&lt; setw(<span class="number">12</span>) &lt;&lt; hex &lt;&lt; showbase &lt;&lt; <span class="number">42</span> &lt;&lt; <span class="string">'\n'</span></span><br><span class="line">         &lt;&lt; setw(<span class="number">12</span>) &lt;&lt; put_money(<span class="number">123</span>, <span class="literal">true</span>) &lt;&lt; <span class="string">"\n\n"</span>;</span><br><span class="line">    <span class="comment">//boolalpha 将缓冲使用bool量解释</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; boolalpha &lt;&lt; <span class="literal">true</span> &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="literal">false</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">istringstream1</span><span class="params">(<span class="string">"true false"</span>)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> b1, b2;</span><br><span class="line">    istringstream1 &gt;&gt; boolalpha &gt;&gt; b1 &gt;&gt; b2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dec &lt;&lt; noboolalpha &lt;&lt; <span class="string">"true false is parse"</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; b1 &lt;&lt; <span class="string">" "</span> &lt;&lt; b2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. os&lt;&lt; 一般来说 &lt;&lt;都是重写的,而且都不是成员操作符,也就是接受两边值,同时返回一个值</span></span><br><span class="line"><span class="comment">//2. setw=width()</span></span><br></pre></td></tr></table></figure><ol start="2"><li>std::ios_base::openmode  定义在ios_base.h中的一个enum<br>常量解释<br>app每次写入前寻位到流结尾<br>binary以二进制模式打开<br>in为读打开<br>out为写打开<br>trunc在打开时舍弃流的内容<br>ate打开后立即寻位到流结尾</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子:</span></span><br><span class="line"><span class="keyword">void</span> myIoTest::ios_base_test::openModeTest() &#123;</span><br><span class="line">    ifstream ifstream1;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* path;</span><br><span class="line">    ifstream1.<span class="built_in">open</span>(path);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//源码:</span></span><br><span class="line"><span class="comment">//fstream.h</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class</span> <span class="title">basic_ifstream</span> :</span> <span class="keyword">public</span> basic_istream&lt;_CharT, _Traits&gt; &#123;</span><br><span class="line">        <span class="keyword">typedef</span> basic_filebuf&lt;char_type, traits_type&gt; __filebuf_type; <span class="comment">//basic_filebuf也是定义在该文件中的一个类,和ifstream 是has a关系</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">        __filebuf_type _M_filebuf;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *__s, ios_base::openmode __mode = ios_base::in)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!_M_filebuf.<span class="built_in">open</span>(__s, __mode | ios_base::in)) <span class="comment">//实际上open都是basic_filebuf.open(),底层实现看不到</span></span><br><span class="line">                <span class="keyword">this</span>-&gt;setstate(ios_base::failbit);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">this</span>-&gt;<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>iostate 依旧定义在ios_bsae.h中的enum<br>常量解释<br>goodbit无错误<br>badbit不可恢复的流错误<br>failbit输入/输出操作失败（格式化或提取错误）<br>eofbit关联的输出序列已抵达文件尾</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//eofbit</span></span><br><span class="line"><span class="number">1.</span> <span class="built_in">string</span> 输入函数 <span class="built_in">std</span>::getline ，若它以抵达流结尾，而非抵达指定的终止字符完成。</span><br><span class="line"><span class="number">2.</span> basic_istream::<span class="keyword">operator</span>&gt;&gt; 的数值输入重载，若在 num_get::<span class="built_in">get</span> 处理的阶段 <span class="number">2</span> ，读取下个字符时遇到流结尾。取决于分析</span><br><span class="line">状态，可能或可能不同时设置 failbit ：例如 <span class="keyword">int</span> n; <span class="function"><span class="built_in">istringstream</span> <span class="title">buf</span><span class="params">(<span class="string">"1"</span>)</span></span>; buf &gt;&gt; n; 设置 eofbit ，但不设置 </span><br><span class="line">failbit ：成功分析整数 <span class="number">1</span> 并存储之于 n 。另一方面， <span class="keyword">bool</span> b; <span class="function"><span class="built_in">istringstream</span> <span class="title">buf</span><span class="params">(<span class="string">"tr"</span>)</span></span>; buf &gt;&gt; boolalpha &gt;&gt; b; 一同</span><br><span class="line">设置 eofbit 和 failbit ：无足够的字符完成布尔 <span class="literal">true</span> 的分析。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">operator</span>&gt;&gt;<span class="built_in">std</span>::basic_istream 的字符释出重载，若在释出字符数量上的限制（若存在）前抵达流结尾。</span><br></pre></td></tr></table></figure><pre><code>可查阅[iostate](https://zh.cppreference.com/w/cpp/io/ios_base/iostate)</code></pre><ol start="4"><li>seekdir ios_base.h中enum<br>beg流的开始<br>end流的结尾<br>cur流位置指示器的当前位置</li><li>内部定义函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.flags</span></span><br><span class="line"><span class="function">fmtflags <span class="title">flags</span><span class="params">()</span> <span class="keyword">const</span></span>;(<span class="number">1</span>)</span><br><span class="line"><span class="function">fmtflags <span class="title">flags</span><span class="params">( fmtflags flags )</span></span>;(<span class="number">2</span>)</span><br><span class="line">管理格式化标志。</span><br><span class="line"><span class="number">1</span>) 返回当前格式化设置。</span><br><span class="line"><span class="number">2</span>) 以给定者替换当前设置。</span><br><span class="line"><span class="comment">//2.setf</span></span><br><span class="line"><span class="function">fmtflags <span class="title">setf</span><span class="params">( fmtflags flags )</span></span>;(<span class="number">1</span>)</span><br><span class="line"><span class="function">fmtflags <span class="title">setf</span><span class="params">( fmtflags flags, fmtflags mask )</span></span>;(<span class="number">2</span>)</span><br><span class="line">设置格式化标志以指定设置。</span><br><span class="line"><span class="number">1</span>) 设置 flags 所标识的格式化标志。等效地进行下列操作： fl = fl | flags ，其中 fl 定义内部格式化标志的状态。</span><br><span class="line"><span class="number">2</span>) 清除 mask 下的格式化标志，并设置被清除的标志为 flags 所指定者。等效地进行下列操作： fl = (fl &amp; ~mask) | (flags &amp; mask) ，其中 fl 定义格式化标志的内部状态。</span><br><span class="line"><span class="comment">//源码:</span></span><br><span class="line">  fmtflags</span><br><span class="line">    setf(fmtflags __fmtfl)</span><br><span class="line">    &#123;</span><br><span class="line">      fmtflags __old = _M_flags;</span><br><span class="line">      _M_flags |= __fmtfl;  <span class="comment">//添加 __fmtfl到现有fmt中</span></span><br><span class="line">      <span class="keyword">return</span> __old;</span><br><span class="line">    &#125;</span><br><span class="line">    fmtflags</span><br><span class="line">    setf(fmtflags __fmtfl, fmtflags __mask)</span><br><span class="line">    &#123;</span><br><span class="line">      fmtflags __old = _M_flags;</span><br><span class="line">      _M_flags &amp;= ~__mask;   <span class="comment">//清除fmtflags __mask</span></span><br><span class="line">      _M_flags |= (__fmtfl &amp; __mask);  <span class="comment">//将__fmtfl添加</span></span><br><span class="line">      <span class="keyword">return</span> __old;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//3.unsetf</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unsetf</span><span class="params">( fmtflags flags )</span></span>; <span class="comment">//清除对应的fmt</span></span><br><span class="line"><span class="comment">//4.precision</span></span><br><span class="line"><span class="function">streamsize <span class="title">precision</span><span class="params">()</span> <span class="keyword">const</span></span>;(<span class="number">1</span>)</span><br><span class="line"><span class="function">streamsize <span class="title">precision</span><span class="params">( streamsize new_precision )</span></span>;(<span class="number">2</span>)</span><br><span class="line">管理 <span class="built_in">std</span>::num_put::do_put 所进行的浮点输出精度（即生成多少数位）。</span><br><span class="line"><span class="number">1</span>) 返回当前精度。</span><br><span class="line"><span class="number">2</span>) 设置精度为给定值。</span><br><span class="line"><span class="built_in">std</span>::basic_ios::init 所建立的默认精度为 <span class="number">6</span> 。</span><br><span class="line"><span class="keyword">void</span> myIoTest::ios_base_test::precisionTest() &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> d=<span class="number">2.234234324</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setprecision(<span class="number">3</span>)&lt;&lt;d;</span><br><span class="line">    <span class="comment">//setprecision 并非定义在ios_base.h,而是iomanip.h</span></span><br><span class="line"> <span class="comment">//源码: iomanip.h</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> _<span class="title">Setprecision</span> &#123;</span> <span class="keyword">int</span> _M_n; &#125;; <span class="comment">//结构体  </span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> _Setprecision <span class="title">setprecision</span><span class="params">(<span class="keyword">int</span> __n)</span></span>&#123;  <span class="comment">//内联</span></span><br><span class="line">  <span class="keyword">return</span> &#123; __n &#125;; </span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="keyword">inline</span> basic_ostream&lt;_CharT, _Traits&gt;&amp; </span><br><span class="line">    <span class="keyword">operator</span>&lt;&lt;(basic_ostream&lt;_CharT, _Traits&gt;&amp; __os, _Setprecision __f) <span class="comment">//接受_Setprecision的操作符</span></span><br><span class="line">    &#123; </span><br><span class="line">      __os.precision(__f._M_n); </span><br><span class="line">      <span class="keyword">return</span> __os; </span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这里理解一下inline的作用,貌似就是和宏定义相同,并非是通过函数调用,也就是说此处的汇编代码就是执行内联函数体直接展开,那么编译器也做了优化,并没有执行return rax.</span></span><br><span class="line"><span class="comment">//5.width</span></span><br><span class="line"><span class="function">streamsize <span class="title">width</span><span class="params">()</span> <span class="keyword">const</span></span>;(<span class="number">1</span>)</span><br><span class="line"><span class="function">streamsize <span class="title">width</span><span class="params">( streamsize new_width )</span></span>;(<span class="number">2</span>)</span><br><span class="line">管理某些输出操作时生成的最小字符数，和某些输出操作时生成的最大字符数。</span><br><span class="line"><span class="number">1</span>) 返回当前域宽。</span><br><span class="line"><span class="number">2</span>) 设置域宽为给定值 仅仅下一次io函数生效</span><br><span class="line"><span class="comment">//setw</span></span><br><span class="line">用于表达式 out &lt;&lt; setw(n) 或 in &gt;&gt; setw(n) 时，设置流 out 或 in 的 <span class="built_in">width</span> 参数准确为 n 。</span><br><span class="line">参数</span><br><span class="line">n-<span class="built_in">width</span> 的新值</span><br><span class="line">返回值</span><br><span class="line">返回未指定类型对象，满足若 str 是 std::basic_ostream&lt;CharT, Traits&gt; 或 std::basic_istream&lt;CharT, Traits&gt; 类型流的名称，则表达式 str &lt;&lt; setw(n) 或 str &gt;&gt; setw(n) 表现为如同执行下列代码：</span><br><span class="line">str.<span class="built_in">width</span>(n);</span><br><span class="line"><span class="comment">//此处执行方式和prcstion相同,都是iomanip定义的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.std::ios_base::register_callback</span></span><br><span class="line">注册将为 imbue() 、 <span class="built_in">std</span>::basic_ios::copyfmt() 和 ~ios_base() 调用的用户定义函数。每次都调用每个注册的回调：事件类型（ event 类型值）作为首参数传递，而且可用于区别调用方。</span><br><span class="line"><span class="comment">//当调用 imbue() 这几个函数时,才会触发回调</span></span><br><span class="line"><span class="comment">//https://zh.cppreference.com/w/cpp/io/ios_base/register_callback 此处有一段实例</span></span><br><span class="line"><span class="comment">//7. xalloc 返回能安全用作 pword() 和 iword() 下标的程序范围内独有的整数</span></span><br><span class="line"><span class="comment">//8.iword/pword</span></span><br><span class="line">源码:</span><br><span class="line"> <span class="comment">// 27.4.2.5  Members for iword/pword storage</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Words</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">void</span>*_M_pword;</span><br><span class="line">      <span class="keyword">long</span>_M_iword;</span><br><span class="line">      _Words() : _M_pword(<span class="number">0</span>), _M_iword(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Allocated storage.</span></span><br><span class="line">    <span class="keyword">int</span>_M_word_size;</span><br><span class="line">    _Words*_M_word;</span><br><span class="line"> <span class="comment">//返回值可以用来查看,也可以用来修改</span></span><br><span class="line">  <span class="keyword">long</span>&amp;</span><br><span class="line">    iword(<span class="keyword">int</span> __ix) <span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">      _Words&amp; __word = (__ix &lt; _M_word_size)</span><br><span class="line">? _M_word[__ix] : _M_grow_words(__ix, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">return</span> __word._M_iword;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//9.</span></span><br><span class="line">imbue </span><br><span class="line">设置本地环境 </span><br><span class="line">(公开成员函数)</span><br><span class="line">getloc </span><br><span class="line">返回当前本地环境 </span><br><span class="line">(公开成员函数)</span><br></pre></td></tr></table></figure><ol start="6"><li>补充</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//内部回调结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">Callback_list</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="comment">// Data Members</span></span><br><span class="line">      _Callback_list*_M_next;  <span class="comment">//下一个回调节点</span></span><br><span class="line">      ios_base::event_callback_M_fn;<span class="comment">//该回调对应的类型 </span></span><br><span class="line">      <span class="keyword">int</span>_M_index; <span class="comment">//下标</span></span><br><span class="line">      _Atomic_word_M_refcount;  <span class="comment">// 0 means one reference.</span></span><br><span class="line"></span><br><span class="line">      _Callback_list(ios_base::event_callback __fn, <span class="keyword">int</span> __index,</span><br><span class="line">     _Callback_list* __cb)</span><br><span class="line">      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(<span class="number">0</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">void</span></span><br><span class="line">      _M_add_reference() &#123; __gnu_cxx::__atomic_add_dispatch(&amp;_M_refcount, <span class="number">1</span>); &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 0 =&gt; OK to delete.</span></span><br><span class="line">      <span class="keyword">int</span></span><br><span class="line">      _M_remove_reference() </span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Be race-detector-friendly.  For more info see bits/c++config.</span></span><br><span class="line">        _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(&amp;_M_refcount);</span><br><span class="line">        <span class="keyword">int</span> __res = __gnu_cxx::__exchange_and_add_dispatch(&amp;_M_refcount, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span> (__res == <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(&amp;_M_refcount);</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> __res;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h3 id="basic-ios-ios-public-ios-bsae"><a class="header-anchor" href="#basic-ios-ios-public-ios-bsae">¶</a>basic_ios(ios):public ios_bsae</h3><ol><li>特征_Traits</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//iosfwd.h</span></span><br><span class="line">`<span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits = char_traits&lt;_CharT&gt; &gt;</span><br><span class="line">    class basic_ios`</span><br><span class="line"><span class="comment">//stringfwd.h</span></span><br><span class="line">  struct char_traits;</span><br><span class="line">  <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">char_traits</span>&lt;char&gt;;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _GLIBCXX_USE_WCHAR_T</span></span><br><span class="line">  <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">char_traits</span>&lt;wchar_t&gt;;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ((__cplusplus &gt;= 201103L) \</span></span><br><span class="line">     &amp;&amp; defined(_GLIBCXX_USE_C99_STDINT_TR1))</span><br><span class="line">  <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">char_traits</span>&lt;char16_t&gt;;</span></span><br><span class="line">  <span class="keyword">template</span>&lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">char_traits</span>&lt;char32_t&gt;;</span></span><br><span class="line">  <span class="comment">//也就是实际上使用那个特征模板由_CharT决定, 如char 和wchar_t</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//char_traits.h 定义char类型 特化模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="comment">//截取关于char的特化一部分</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">char_traits</span>&lt;char&gt;</span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">char</span>              char_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">int</span>               int_type;</span><br><span class="line">      <span class="keyword">typedef</span> streampos         pos_type;  <span class="comment">// typedef fpos&lt;mbstate_t&gt; streampos;(postype.h中定义)</span></span><br><span class="line">      <span class="keyword">typedef</span> streamoff         off_type; </span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">mbstate_t</span>         state_type; <span class="comment">//int</span></span><br><span class="line"> <span class="comment">//后边都是关系的static函数,其他特化也是如此</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">      assign(char_type&amp; __c1, <span class="keyword">const</span> char_type&amp; __c2) _GLIBCXX_NOEXCEPT</span><br><span class="line">      &#123; __c1 = __c2; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> _GLIBCXX_CONSTEXPR <span class="keyword">bool</span></span><br><span class="line">      eq(<span class="keyword">const</span> char_type&amp; __c1, <span class="keyword">const</span> char_type&amp; __c2) _GLIBCXX_NOEXCEPT</span><br><span class="line">      &#123; <span class="keyword">return</span> __c1 == __c2; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> _GLIBCXX_CONSTEXPR <span class="keyword">bool</span></span><br><span class="line">      lt(<span class="keyword">const</span> char_type&amp; __c1, <span class="keyword">const</span> char_type&amp; __c2) _GLIBCXX_NOEXCEPT</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">// LWG 467.</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(__c1)</span><br><span class="line">&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;(__c2));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">int</span></span><br><span class="line">      compare(<span class="keyword">const</span> char_type* __s1, <span class="keyword">const</span> char_type* __s2, <span class="keyword">size_t</span> __n)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (__n == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> __builtin_memcmp(__s1, __s2, __n);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>部分属性</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">basic_ios</span> :</span> <span class="keyword">public</span> ios_base</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//结合不同的模板如_CharT=char,_Traits= struct char_traits&lt;char&gt;</span></span><br><span class="line">      <span class="keyword">typedef</span> _CharT                                 char_type; <span class="comment">//char</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::int_type             int_type;  <span class="comment">//int</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::pos_type             pos_type;<span class="comment">//fpos&lt;int&gt;</span></span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::off_type             off_type; <span class="comment">//streamoff(long long)</span></span><br><span class="line">      <span class="keyword">typedef</span> _Traits                                traits_type;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//都是facet的子类,用于local</span></span><br><span class="line">      <span class="keyword">typedef</span> ctype&lt;_CharT&gt;                          __ctype_type; </span><br><span class="line">      <span class="keyword">typedef</span> num_put&lt;_CharT, ostreambuf_iterator&lt;_CharT, _Traits&gt; &gt;</span><br><span class="line">     __num_put_type;</span><br><span class="line">      <span class="keyword">typedef</span> num_get&lt;_CharT, istreambuf_iterator&lt;_CharT, _Traits&gt; &gt;</span><br><span class="line">     __num_get_type;</span><br><span class="line">      <span class="comment">// Data members:</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">      basic_ostream&lt;_CharT, _Traits&gt;*                _M_tie; <span class="comment">//绑定的流指针</span></span><br><span class="line">      <span class="keyword">mutable</span> char_type                              _M_fill;<span class="comment">//填充的字符</span></span><br><span class="line">      <span class="keyword">mutable</span> <span class="keyword">bool</span>                                   _M_fill_init;<span class="comment">//是否填充</span></span><br><span class="line">      basic_streambuf&lt;_CharT, _Traits&gt;*              _M_streambuf;<span class="comment">//内部缓冲</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Cached use_facet&lt;ctype&gt;, which is based on the current locale info.</span></span><br><span class="line">      <span class="keyword">const</span> __ctype_type*                            _M_ctype;</span><br><span class="line">      <span class="comment">// For ostream.</span></span><br><span class="line">      <span class="keyword">const</span> __num_put_type*                          _M_num_put;  <span class="comment">//对于输出流&lt;&lt;操作符属于num的进行格式化为 _CharT类型,并插入到buf中</span></span><br><span class="line">      <span class="comment">// For istream.</span></span><br><span class="line">      <span class="keyword">const</span> __num_get_type*                          _M_num_get;</span><br></pre></td></tr></table></figure><ol start="3"><li>函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. good eod fail bad operator! operator bool  都是检查状态</span></span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">      <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span> <span class="comment">//这里就是一个类型转换符,并且使用了explicit阻止了自动转换,要通过static&lt;bool&gt;cast()</span></span></span><br><span class="line"><span class="function">      </span>&#123; <span class="keyword">return</span> !<span class="keyword">this</span>-&gt;fail(); &#125;</span><br><span class="line">------------      </span><br><span class="line">     <span class="keyword">bool</span></span><br><span class="line">      fail() <span class="keyword">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> (<span class="keyword">this</span>-&gt;rdstate() &amp; (badbit | failbit)) != <span class="number">0</span>; &#125;</span><br><span class="line"><span class="comment">//2.rdstate setstate clear 控制ios_base::_M_streambuf_state</span></span><br><span class="line"><span class="comment">//3.copyfmt </span></span><br><span class="line"><span class="function">basic_ios&amp; <span class="title">copyfmt</span><span class="params">(<span class="keyword">const</span> basic_ios&amp; other)</span></span>;</span><br><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    basic_ios&lt;_CharT, _Traits&gt;&amp;</span><br><span class="line">    basic_ios&lt;_CharT, _Traits&gt;::copyfmt(<span class="keyword">const</span> basic_ios&amp; __rhs)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span></span><br><span class="line">      <span class="comment">// 292. effects of a.copyfmt (a)</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;__rhs)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Per 27.1.1, do not call imbue, yet must trash all caches</span></span><br><span class="line">  <span class="comment">// associated with imbue()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Alloc any new word array first, so if it fails we have "rollback".</span></span><br><span class="line">      <span class="comment">//erase_evnet事件传递,触发该流的erase_event回调函数</span></span><br><span class="line">  _Words* __words = (__rhs._M_word_size &lt;= _S_local_word_size) ?</span><br><span class="line">                     _M_local_word : <span class="keyword">new</span> _Words[__rhs._M_word_size];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Bump refs before doing callbacks, for safety.</span></span><br><span class="line">  _Callback_list* __cb = __rhs._M_callbacks;</span><br><span class="line">  <span class="keyword">if</span> (__cb)</span><br><span class="line">    __cb-&gt;_M_add_reference();</span><br><span class="line">  _M_call_callbacks(erase_event);</span><br><span class="line">  <span class="keyword">if</span> (_M_word != _M_local_word)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">delete</span> [] _M_word;</span><br><span class="line">      _M_word = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  _M_dispose_callbacks();</span><br><span class="line">      <span class="comment">//拷贝other的所有信息</span></span><br><span class="line">  <span class="comment">// NB: Don't want any added during above.</span></span><br><span class="line">  _M_callbacks = __cb;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> __i = <span class="number">0</span>; __i &lt; __rhs._M_word_size; ++__i)</span><br><span class="line">    __words[__i] = __rhs._M_word[__i];</span><br><span class="line">  _M_word = __words;</span><br><span class="line">  _M_word_size = __rhs._M_word_size;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>-&gt;flags(__rhs.flags());</span><br><span class="line">  <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(__rhs.<span class="built_in">width</span>());</span><br><span class="line">  <span class="keyword">this</span>-&gt;precision(__rhs.precision());</span><br><span class="line">  <span class="keyword">this</span>-&gt;tie(__rhs.tie());</span><br><span class="line">  <span class="keyword">this</span>-&gt;<span class="built_in">fill</span>(__rhs.<span class="built_in">fill</span>());</span><br><span class="line">  _M_ios_locale = __rhs.getloc();</span><br><span class="line">  _M_cache_locale(_M_ios_locale);</span><br><span class="line">       <span class="comment">//调用 copyfmt_even 事件回调函数</span></span><br><span class="line">  _M_call_callbacks(copyfmt_event);</span><br><span class="line">       <span class="comment">//拷贝异常状态 </span></span><br><span class="line">  <span class="comment">// The next is required to be the last assignment.</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;exceptions(__rhs.exceptions());</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//4.fill</span></span><br><span class="line">    char_type</span><br><span class="line">      <span class="built_in">fill</span>() <span class="keyword">const</span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (!_M_fill_init)</span><br><span class="line">  &#123;</span><br><span class="line">    _M_fill = <span class="keyword">this</span>-&gt;widen(<span class="string">' '</span>);</span><br><span class="line">    _M_fill_init = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> _M_fill;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//实际上调用了_M_ctype的widen</span></span><br><span class="line">         char_type</span><br><span class="line">      widen(<span class="keyword">char</span> __c) <span class="keyword">const</span></span><br><span class="line">      &#123; <span class="keyword">return</span> __check_facet(_M_ctype).widen(__c); &#125;</span><br><span class="line"> <span class="comment">//5.imube 实现</span></span><br><span class="line">   <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    locale</span><br><span class="line">    basic_ios&lt;_CharT, _Traits&gt;::imbue(<span class="keyword">const</span> locale&amp; __loc)</span><br><span class="line">    &#123;</span><br><span class="line">      locale __old(<span class="keyword">this</span>-&gt;getloc());</span><br><span class="line">      ios_base::imbue(__loc); <span class="comment">//调用了父类实现的</span></span><br><span class="line">      _M_cache_locale(__loc); </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;rdbuf() != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">this</span>-&gt;rdbuf()-&gt;pubimbue(__loc);<span class="comment">//改变内部buf</span></span><br><span class="line">      <span class="keyword">return</span> __old;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//6.tie  </span></span><br><span class="line">std::basic_ostream&lt;CharT,Traits&gt;* tie() const;</span><br><span class="line">(<span class="number">1</span>)</span><br><span class="line">std::basic_ostream&lt;CharT,Traits&gt;* tie( std::basic_ostream&lt;CharT,Traits&gt;* str );</span><br><span class="line">(<span class="number">2</span>)</span><br><span class="line">管理联系流。联系流是输出流，它与流缓冲（ rdbuf() ）所控制的输出序列同步，即在任何 *<span class="keyword">this</span> 上的输入/输出操作前，在联系流上调用 <span class="built_in">flush</span>() 。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) 返回当前联系流。若无联系流，则返回空指针。</span><br><span class="line"><span class="number">2</span>) 设置当前联系流为 str 。返回操作前的联系流。若无联系流，则返回空指针。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ofstream <span class="title">os</span><span class="params">(<span class="string">"test.txt"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::ifstream <span class="title">is</span><span class="params">(<span class="string">"test.txt"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">value</span><span class="params">(<span class="string">"0"</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line">    os &lt;&lt; <span class="string">"Hello"</span>;</span><br><span class="line">    is &gt;&gt; value;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Result before tie(): \""</span> &lt;&lt; value &lt;&lt; <span class="string">"\"\n"</span>;</span><br><span class="line">    is.<span class="built_in">clear</span>();</span><br><span class="line">    is.tie(&amp;os);</span><br><span class="line">  </span><br><span class="line">    is &gt;&gt; value;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Result after tie(): \""</span> &lt;&lt; value &lt;&lt; <span class="string">"\"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将is.tie(os),当is&gt;&gt;时,os调用flush,此时文本中才有值</span></span><br><span class="line"><span class="comment">//Result before tie(): "0"</span></span><br><span class="line"><span class="comment">//Result after tie(): "Hello"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//narrow </span></span><br><span class="line">窄化字符 </span><br><span class="line">widen </span><br><span class="line">拓宽字符 </span><br><span class="line">init </span><br><span class="line"><span class="comment">//模板tcc 实现,该函数会被子类构造器调用</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="keyword">void</span></span><br><span class="line">    basic_ios&lt;_CharT, _Traits&gt;::init(basic_streambuf&lt;_CharT, _Traits&gt;* __sb)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// NB: This may be called more than once on the same object.</span></span><br><span class="line">      ios_base::_M_init();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Cache locale data and specific facets used by iostreams.</span></span><br><span class="line">      _M_cache_locale(_M_ios_locale);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// NB: The 27.4.4.1 Postconditions Table specifies requirements</span></span><br><span class="line">      <span class="comment">// after basic_ios::init() has been called. As part of this,</span></span><br><span class="line">      <span class="comment">// fill() must return widen(' ') any time after init() has been</span></span><br><span class="line">      <span class="comment">// called, which needs an imbued ctype facet of char_type to</span></span><br><span class="line">      <span class="comment">// return without throwing an exception. Unfortunately,</span></span><br><span class="line">      <span class="comment">// ctype&lt;char_type&gt; is not necessarily a required facet, so</span></span><br><span class="line">      <span class="comment">// streams with char_type != [char, wchar_t] will not have it by</span></span><br><span class="line">      <span class="comment">// default. Because of this, the correct value for _M_fill is</span></span><br><span class="line">      <span class="comment">// constructed on the first call of fill(). That way,</span></span><br><span class="line">      <span class="comment">// unformatted input and output with non-required basic_ios</span></span><br><span class="line">      <span class="comment">// instantiations is possible even without imbuing the expected</span></span><br><span class="line">      <span class="comment">// ctype&lt;char_type&gt; facet.</span></span><br><span class="line">      _M_fill = _CharT();</span><br><span class="line">      _M_fill_init = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">      _M_tie = <span class="number">0</span>;</span><br><span class="line">      _M_exception = goodbit;</span><br><span class="line">      _M_streambuf = __sb;  <span class="comment">//改变子类的缓冲</span></span><br><span class="line">      _M_streambuf_state = __sb ? goodbit : badbit;</span><br><span class="line">    &#125;</span><br><span class="line">初始化一个默认构造的<span class="built_in">std</span>::basic_ios </span><br><span class="line"><span class="built_in">move</span>  (C++<span class="number">11</span>) </span><br><span class="line">从另一 <span class="built_in">std</span>::basic_ios 移动，除了 rdbuf </span><br><span class="line">swap  (C++<span class="number">11</span>) </span><br><span class="line">与另一 <span class="built_in">std</span>::basic_ios 交换，除了 rdbuf </span><br><span class="line">set_rdbuf </span><br><span class="line">替换 rdbuf 而不清除其错误状态</span><br></pre></td></tr></table></figure><h3 id="basic-streambuf"><a class="header-anchor" href="#basic-streambuf">¶</a>basic_streambuf</h3><ol><li>简单构成</li></ol><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/streambuf0.png" class="" title="底层数据"><p>cppref中的一部分解释:</p><ul><li>buf维护了两个缓冲区,结构类似于vector这样的指针,对于输入in来说称为获取区,对于out来说称为放置区</li><li>图中的associated character sequence,关联字符序列，又称作源（对于输入）或池（对于输出）。它可以是通过 OS API 访问的实体（文件、 TCP 接头、串行端口、其他字符设备），或者可以是能转译成字符源或池的对象（ std::vector 、数组、字符串字面量）。也就是说源或者池分别指的外部io和api内部的对象.</li><li>basic_streambuf 对象可支持输入（该情况下起始、下一位置和终止指针所描述的区域被称为获取区）、输出（放置区），或同时输入与输出。在最后一种情况下，跟踪六个指针，它们可能全部指向同一数组的元素，或指向二个单独数组的元素。</li><li>若放置区中下一位置指针小于终止指针，则写位置可用。下一位置指针可被解引用和赋值</li><li>若获取区中下一位置指针小于终止指针，则读位置可用。下一位置指针可被解引用和读取。</li><li>若获取区中下一位置指针大于起始指针，则回放位置可用，而下一位置指针可以被自减并赋值，以将字符放回到获取区。</li><li>受控制序列中的字符表示和编码可以异于关联序列中的字符表示，该情况下典型地用 std::codecvt 本地环境进行转换。常见的例子是通过 std::wfstream 对象访问 UTF-8 （或其他多字节编码）文件：受控制字符序列由 wchar_t 字符组成，但关联序列由字节组成。</li><li>具体的缓冲类，如 std::basic_filebuf 或 std::basic_stringbuf 导出自 std::basic_streambuf 。</li></ul><figure class="highlight cpp"><figcaption><span>basic_streambuf.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型</span></span><br><span class="line">      <span class="keyword">typedef</span> _CharT char_type;</span><br><span class="line">      <span class="keyword">typedef</span> _Traits traits_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::int_type int_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::pos_type pos_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> traits_type::off_type off_type;</span><br><span class="line"><span class="comment">//友元</span></span><br><span class="line">     <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">basic_ios</span>&lt;char_type, traits_type&gt;;</span></span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">basic_istream</span>&lt;char_type, traits_type&gt;;</span></span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">basic_ostream</span>&lt;char_type, traits_type&gt;;</span></span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">istreambuf_iterator</span>&lt;char_type, traits_type&gt;;</span></span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">ostreambuf_iterator</span>&lt;char_type, traits_type&gt;;</span></span><br><span class="line"><span class="comment">//友元函数,仅仅截取了一个</span></span><br><span class="line"><span class="comment">//该函数被定义在stringbuf.tcc 而不是basic_streambuf.tcc中</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT2, <span class="keyword">typename</span> _Traits2, <span class="keyword">typename</span> _Alloc&gt;</span><br><span class="line">        <span class="keyword">friend</span> basic_istream&lt;_CharT2, _Traits2&gt;&amp;</span><br><span class="line">        getline(basic_istream&lt;_CharT2, _Traits2&gt;&amp;,</span><br><span class="line">basic_string&lt;_CharT2, _Traits2, _Alloc&gt;&amp;, _CharT2);        </span><br><span class="line"><span class="comment">//关键成员</span></span><br><span class="line"><span class="comment">//内部的io缓冲,分配方式和vector这种扩容数组很相似</span></span><br><span class="line">  char_type* _M_in_beg;     <span class="comment">///&lt; Start of get area.</span></span><br><span class="line">      char_type* _M_in_cur;     <span class="comment">///&lt; Current read area.</span></span><br><span class="line">      char_type* _M_in_end;     <span class="comment">///&lt; End of get area.</span></span><br><span class="line">      char_type* _M_out_beg;    <span class="comment">///&lt; Start of put area.</span></span><br><span class="line">      char_type* _M_out_cur;    <span class="comment">///&lt; Current put area.</span></span><br><span class="line">      char_type* _M_out_end;    <span class="comment">///&lt; End of put area.</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/// Current locale setting.</span></span><br><span class="line">      locale _M_buf_locale;</span><br><span class="line">      <span class="comment">//公开的函数</span></span><br><span class="line">      getloc() <span class="keyword">const</span> <span class="comment">//获取_M_buf_locale</span></span><br><span class="line">      pubimbue(<span class="keyword">const</span> locale&amp; __loc) <span class="comment">//设置_M_buf_locale</span></span><br><span class="line">      <span class="comment">//实际调用虚函数</span></span><br><span class="line">       <span class="function">basic_streambuf* <span class="title">pubsetbuf</span><span class="params">(char_type* __s, streamsize __n)</span></span>&#123;  <span class="comment">//设置buf为__s</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>-&gt;setbuf(__s, __n);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//       ------------------------------</span></span><br><span class="line"><span class="comment">//寻位</span></span><br><span class="line">        pos_type</span><br><span class="line">      pubseekoff(off_type __off, ios_base::seekdir __way,    <span class="comment">//改变buf位置为__way(ios_base中定义)</span></span><br><span class="line"> ios_base::openmode __mode = ios_base::in | ios_base::out) </span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;seekoff(__off, __way, __mode); &#125;</span><br><span class="line">      </span><br><span class="line">       pos_type</span><br><span class="line">      pubseekpos(pos_type __sp,</span><br><span class="line"> ios_base::openmode __mode = ios_base::in | ios_base::out) <span class="comment">//通过sp来改变位置 pos_type是fpos类型</span></span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;seekpos(__sp, __mode); &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">int</span></span><br><span class="line">      pubsync() &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;sync(); &#125; <span class="comment">//从名字上看是于流关系的io设备进行同步,刷新??</span></span><br><span class="line"><span class="comment">//----------------------------------</span></span><br><span class="line"><span class="comment">//获取区函数</span></span><br><span class="line">       streamsize</span><br><span class="line">      in_avail() <span class="comment">//当前获取区剩余</span></span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">const</span> streamsize __ret = <span class="keyword">this</span>-&gt;egptr() - <span class="keyword">this</span>-&gt;gptr(); <span class="comment">//end-cur==0?__ret:this-&gt;showmanyc();</span></span><br><span class="line"><span class="keyword">return</span> __ret ? __ret : <span class="keyword">this</span>-&gt;showmanyc(); </span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">       int_type</span><br><span class="line">      snextc() <span class="comment">//读取下一个字符</span></span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret = traits_type::eof();</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(!traits_type::eq_int_type(<span class="keyword">this</span>-&gt;sbumpc(),</span><br><span class="line">       __ret), <span class="literal">true</span>))</span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;sgetc();</span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//读取当前数据,并指针前进</span></span><br><span class="line">      int_type</span><br><span class="line">      sbumpc()  </span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(<span class="keyword">this</span>-&gt;gptr() &lt; <span class="keyword">this</span>-&gt;egptr(), <span class="literal">true</span>)) <span class="comment">//非空</span></span><br><span class="line">  &#123;</span><br><span class="line">    __ret = traits_type::to_int_type(*<span class="keyword">this</span>-&gt;gptr()); <span class="comment">//读取并转为int_type</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;gbump(<span class="number">1</span>); <span class="comment">//前进</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;uflow(); <span class="comment">//空则调用uflow</span></span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">       int_type <span class="comment">//读取当前的数据</span></span><br><span class="line">      sgetc()</span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(<span class="keyword">this</span>-&gt;gptr() &lt; <span class="keyword">this</span>-&gt;egptr(), <span class="literal">true</span>))<span class="comment">//非空</span></span><br><span class="line">  __ret = traits_type::to_int_type(*<span class="keyword">this</span>-&gt;gptr()); <span class="comment">//读取当前获取区值</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;underflow(); <span class="comment">//若当前指针指向end,则进行underflow操作,并返回读取后的数据</span></span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//该函数子类可以实现</span></span><br><span class="line">      <span class="keyword">virtual</span> int_type</span><br><span class="line">      uflow()</span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret = traits_type::eof();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> __testeof = traits_type::eq_int_type(<span class="keyword">this</span>-&gt;underflow(), <span class="comment">//调用应该实现的underflow,该函数应该到io设备中读取数据,放回缓冲区,并且返回此时扩容的缓冲第一个指针,也就是之前__builtin_expect(this-&gt;gptr() &lt; this-&gt;egptr(), true)的情况时,current_prt指针指向了没有数据的位置,若此次有数据,那么说明io设备还能读取,否则返回的一定是eof;然后此时指针指向了扩容部分的第二个位置,也就是说cpp_zh的那张图是正确的,current位置维持着是将要读取的位置</span></span><br><span class="line">__ret);</span><br><span class="line"><span class="keyword">if</span> (!__testeof)</span><br><span class="line">  &#123;</span><br><span class="line">    __ret = traits_type::to_int_type(*<span class="keyword">this</span>-&gt;gptr());</span><br><span class="line">    <span class="keyword">this</span>-&gt;gbump(<span class="number">1</span>);  <span class="comment">//这两个句等同于sbumpc</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">     streamsize</span><br><span class="line">      sgetn(char_type* __s, streamsize __n)</span><br><span class="line">      &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;xsgetn(__s, __n); &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//定义在tcc中</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    streamsize</span><br><span class="line">    basic_streambuf&lt;_CharT, _Traits&gt;::</span><br><span class="line">    xsgetn(char_type* __s, streamsize __n)</span><br><span class="line">    &#123;</span><br><span class="line">      streamsize __ret = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (__ret &lt; __n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> streamsize __buf_len = <span class="keyword">this</span>-&gt;egptr() - <span class="keyword">this</span>-&gt;gptr();  </span><br><span class="line">  <span class="keyword">if</span> (__buf_len)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> streamsize __remaining = __n - __ret;</span><br><span class="line">      <span class="keyword">const</span> streamsize __len = <span class="built_in">std</span>::min(__buf_len, __remaining);  <span class="comment">//获取n和剩余最大值</span></span><br><span class="line">      traits_type::copy(__s, <span class="keyword">this</span>-&gt;gptr(), __len);<span class="comment">//拷贝</span></span><br><span class="line">      __ret += __len; <span class="comment">//读取了多少</span></span><br><span class="line">      __s += __len;<span class="comment">//移动_s指针</span></span><br><span class="line">      <span class="keyword">this</span>-&gt;__safe_gbump(__len);<span class="comment">//移动缓冲指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__ret &lt; __n)</span><br><span class="line">    &#123;<span class="comment">//说明缓冲区已经满了</span></span><br><span class="line">      <span class="keyword">const</span> int_type __c = <span class="keyword">this</span>-&gt;uflow();  <span class="comment">//扩容,返回当前指针数据,并且缓冲区指针向前移动</span></span><br><span class="line">      <span class="keyword">if</span> (!traits_type::eq_int_type(__c, traits_type::eof()))</span><br><span class="line">&#123;</span><br><span class="line">  traits_type::assign(*__s++, traits_type::to_char_type(__c)); <span class="comment">//因为使用了uflow,因此要把这个数据返回</span></span><br><span class="line">  ++__ret; <span class="comment">//增加ret</span></span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> __ret; <span class="comment">//返回</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ----------------------------------------    </span></span><br><span class="line"><span class="comment">// 回放</span></span><br><span class="line"> int_type <span class="comment">//将__c放到反位置</span></span><br><span class="line">      sputbackc(char_type __c)</span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> __testpos = <span class="keyword">this</span>-&gt;eback() &lt; <span class="keyword">this</span>-&gt;gptr();</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(!__testpos ||</span><br><span class="line">     !traits_type::eq(__c, <span class="keyword">this</span>-&gt;gptr()[<span class="number">-1</span>]), <span class="literal">false</span>)) gptr() &gt; eback()||而字符 c 不等于 gptr() 左一位置的字符</span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;pbackfail(traits_type::to_int_type(__c)); <span class="comment">//虚函数 子类实现,若不能移动则返回eof</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">//移动,并读取,返回,相同不用插入</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;gbump(<span class="number">-1</span>); </span><br><span class="line">    __ret = traits_type::to_int_type(*<span class="keyword">this</span>-&gt;gptr());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//例子:</span></span><br><span class="line">     <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSputbackc</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">stringstream</span> <span class="title">s</span><span class="params">(<span class="string">"abcdef"</span>)</span></span>; <span class="comment">// gptr() 指向 "abcdef" 中的 'a'</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Before putback, string holds "</span> &lt;&lt; s.str() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">char</span> c1 = s.get(); <span class="comment">// c1 = 'a' ， gptr() 现在指向 "abcdef" 中的 'b'</span></span><br><span class="line">            <span class="keyword">char</span> c2 = s.rdbuf()-&gt;sputbackc(<span class="string">'z'</span>); <span class="comment">// 同 s.putback('z')</span></span><br><span class="line">            <span class="comment">// gptr() 现在指向 "zbcdef" 中的 'z'</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After putback, string holds "</span> &lt;&lt; s.str() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">char</span> c3 = s.get(); <span class="comment">// c3 = 'z' ， gptr() 现在指向 "zbcdef" 中的 'b'</span></span><br><span class="line">            <span class="keyword">char</span> c4 = s.get(); <span class="comment">// c4 = 'b' ， gptr() 现在指向 "zbcdef" 中的 'c'</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">            s.rdbuf()-&gt;sputbackc(<span class="string">'b'</span>);  <span class="comment">// gptr() 现在指向 "zbcdef" 中的 'b'</span></span><br><span class="line">            s.rdbuf()-&gt;sputbackc(<span class="string">'z'</span>);  <span class="comment">// gptr() 现在指向 "zbcdef" 中的 'z'</span></span><br><span class="line">            <span class="keyword">int</span> eof = s.rdbuf()-&gt;sputbackc(<span class="string">'x'</span>);  <span class="comment">// 无内容能反获取： pbackfail() 失败</span></span><br><span class="line">            <span class="keyword">if</span> (eof == EOF)</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"No room to putback after 'z'\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出:</span></span><br><span class="line">        <span class="comment">//Before putback, string holds abcdef</span></span><br><span class="line">        <span class="comment">//After putback, string holds zbcdef</span></span><br><span class="line">        <span class="comment">//azzb</span></span><br><span class="line">        <span class="comment">//No room to putback after 'z'</span></span><br><span class="line">  </span><br><span class="line">    int_type</span><br><span class="line">      sungetc()<span class="comment">//取回反位置,若不能移动则返回eof</span></span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(<span class="keyword">this</span>-&gt;eback() &lt; <span class="keyword">this</span>-&gt;gptr(), <span class="literal">true</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;gbump(<span class="number">-1</span>);</span><br><span class="line">    __ret = traits_type::to_int_type(*<span class="keyword">this</span>-&gt;gptr());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;pbackfail();</span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//例</span></span><br><span class="line">      <span class="keyword">void</span> myIoTest::bufTest::testSunget() &#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">stringstream</span> <span class="title">s</span><span class="params">(<span class="string">"abcdef"</span>)</span></span>; <span class="comment">// gptr() 指向 'a'</span></span><br><span class="line">    <span class="keyword">char</span> c1 = s.get(); <span class="comment">// c = 'a', gptr() 现在指向 'b'</span></span><br><span class="line">    <span class="keyword">char</span> c2 = s.rdbuf()-&gt;sungetc(); <span class="comment">// 同 s.unget() ： gptr() 又指向 'a'</span></span><br><span class="line">    <span class="keyword">char</span> c3 = s.get(); <span class="comment">// c3 = 'a' ， gptr() 现在指向 'b'</span></span><br><span class="line">    <span class="keyword">char</span> c4 = s.get(); <span class="comment">// c4 = 'b' ， gptr() 现在指向 'c'</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c1 &lt;&lt; c2 &lt;&lt; c3 &lt;&lt; c4 &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">    s.rdbuf()-&gt;sungetc();  <span class="comment">// 回到 'b'</span></span><br><span class="line">    s.rdbuf()-&gt;sungetc();  <span class="comment">// 回到 'a'</span></span><br><span class="line">    <span class="keyword">int</span> eof = s.rdbuf()-&gt;sungetc();  <span class="comment">// 无内容可反获取： pbackfail() 失败</span></span><br><span class="line">    <span class="keyword">if</span> (eof == EOF)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Nothing to unget after 'a'\n"</span>;&#125;</span><br><span class="line">----------------------------------</span><br><span class="line"><span class="comment">//放置区</span></span><br><span class="line">  int_type</span><br><span class="line">      sputc(char_type __c)</span><br><span class="line">      &#123;</span><br><span class="line">int_type __ret;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(<span class="keyword">this</span>-&gt;pptr() &lt; <span class="keyword">this</span>-&gt;epptr(), <span class="literal">true</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    *<span class="keyword">this</span>-&gt;pptr() = __c;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pbump(<span class="number">1</span>);</span><br><span class="line">    __ret = traits_type::to_int_type(__c);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  __ret = <span class="keyword">this</span>-&gt;overflow(traits_type::to_int_type(__c));</span><br><span class="line"><span class="keyword">return</span> __ret;</span><br><span class="line">      &#125;</span><br><span class="line">      sputn()<span class="comment">//放置数组,对比于sgetn,调用虚函数xsputn</span></span><br><span class="line"><span class="comment">//tcc中实现</span></span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    streamsize</span><br><span class="line">    basic_streambuf&lt;_CharT, _Traits&gt;::</span><br><span class="line">    xsputn(<span class="keyword">const</span> char_type* __s, streamsize __n)</span><br><span class="line">    &#123;</span><br><span class="line">      streamsize __ret = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> (__ret &lt; __n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> streamsize __buf_len = <span class="keyword">this</span>-&gt;epptr() - <span class="keyword">this</span>-&gt;pptr();</span><br><span class="line">  <span class="keyword">if</span> (__buf_len)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">const</span> streamsize __remaining = __n - __ret;</span><br><span class="line">      <span class="keyword">const</span> streamsize __len = <span class="built_in">std</span>::min(__buf_len, __remaining);</span><br><span class="line">      traits_type::copy(<span class="keyword">this</span>-&gt;pptr(), __s, __len);</span><br><span class="line">      __ret += __len;</span><br><span class="line">      __s += __len;</span><br><span class="line">      <span class="keyword">this</span>-&gt;__safe_pbump(__len);  <span class="comment">//移动缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__ret &lt; __n)</span><br><span class="line">    &#123;</span><br><span class="line">      int_type __c = <span class="keyword">this</span>-&gt;overflow(traits_type::to_int_type(*__s));  <span class="comment">//调用虚函数,对设备进行写操作,子类实现</span></span><br><span class="line">      <span class="keyword">if</span> (!traits_type::eq_int_type(__c, traits_type::eof()))</span><br><span class="line">&#123;</span><br><span class="line">  ++__ret;</span><br><span class="line">  ++__s;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">return</span> __ret;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//总结来看,buf就是起到缓冲的作用,和java不同? c++io自带缓冲,in--&gt;underflow,out--&gt;overflow,分别对输入/输出序列进行操作.   </span></span><br><span class="line"> <span class="comment">//结合下文的it,本文的buf,以及上文的facet,实际上对于字符的控制,如格式化,本地化,都是和iostream有着has a关系的facet完成,并且在完成格式化操作后,由facet的api调用迭代器,实际上就是调用对应iostream的buf, i:将设备读取过来的字节转换成对应的类型,流入用户内存中,根据条件判断是否应该在此次i操作对底层设置进行读访问;o:将用户内存中的各种类型进行正确的格式化后输出刀缓冲,根据各种判定条件触发是否将缓冲刷入o设备.</span></span><br></pre></td></tr></table></figure><p>2.密切相关的类迭代器</p><figure class="highlight cpp"><figcaption><span>ostreambuf_iterator</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义在steambuf_iterator.h中,并没有tcc</span></span><br><span class="line"> <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ostreambuf_iterator</span></span></span><br><span class="line"><span class="class">    :</span> <span class="keyword">public</span> iterator&lt;output_iterator_tag, <span class="keyword">void</span>, <span class="keyword">void</span>, <span class="keyword">void</span>, <span class="keyword">void</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">// Types:</span></span><br><span class="line">      <span class="comment">//@&#123;</span></span><br><span class="line">      <span class="comment">/// Public typedefs</span></span><br><span class="line">      <span class="keyword">typedef</span> _CharT                           char_type;</span><br><span class="line">      <span class="keyword">typedef</span> _Traits                          traits_type;</span><br><span class="line">      <span class="keyword">typedef</span> basic_streambuf&lt;_CharT, _Traits&gt; streambuf_type;</span><br><span class="line">      <span class="keyword">typedef</span> basic_ostream&lt;_CharT, _Traits&gt;   ostream_type;</span><br><span class="line">      <span class="comment">//@&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT2&gt;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">typename</span> __gnu_cxx::__enable_if&lt;__is_char&lt;_CharT2&gt;::__value,</span><br><span class="line">                    ostreambuf_iterator&lt;_CharT2&gt; &gt;::__type</span><br><span class="line">copy(istreambuf_iterator&lt;_CharT2&gt;, istreambuf_iterator&lt;_CharT2&gt;,</span><br><span class="line">     ostreambuf_iterator&lt;_CharT2&gt;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">      streambuf_type*_M_sbuf;</span><br><span class="line">      <span class="keyword">bool</span>_M_failed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">///  Construct output iterator from ostream.</span></span><br><span class="line">      ostreambuf_iterator(ostream_type&amp; __s) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) &#123; &#125;  <span class="comment">//这两个函数都可以进行隐式构造</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">///  Construct output iterator from streambuf.</span></span><br><span class="line">      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">      : _M_sbuf(__s), _M_failed(!_M_sbuf) &#123; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">///  Write character to streambuf.  Calls streambuf.sputc().</span></span><br><span class="line">  <span class="comment">//这个=符号才是真正做操作的函数,具体看std::__write(_OutIter __s, const _CharT* __ws, int __len),定义在locale_facet.h中   </span></span><br><span class="line">      ostreambuf_iterator&amp;</span><br><span class="line">      <span class="keyword">operator</span>=(_CharT __c)   </span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (!_M_failed &amp;&amp;</span><br><span class="line">    _Traits::eq_int_type(_M_sbuf-&gt;sputc(__c), _Traits::eof()))<span class="comment">//实际上调用了buf.sputc函数</span></span><br><span class="line">  _M_failed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"> <span class="comment">//这个看出来了,对于osbuf_iter,重写的++ 没做什么事情</span></span><br><span class="line">      <span class="comment">/// Return *this.</span></span><br><span class="line">      ostreambuf_iterator&amp;</span><br><span class="line">      <span class="keyword">operator</span>*()</span><br><span class="line">      &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// Return *this.</span></span><br><span class="line">      ostreambuf_iterator&amp;</span><br><span class="line">      <span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">      &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// Return *this.</span></span><br><span class="line">      ostreambuf_iterator&amp;</span><br><span class="line">      <span class="keyword">operator</span>++()</span><br><span class="line">      &#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/// Return true if previous operator=() failed.</span></span><br><span class="line">      <span class="keyword">bool</span></span><br><span class="line">      failed() <span class="keyword">const</span> _GLIBCXX_USE_NOEXCEPT</span><br><span class="line">      &#123; <span class="keyword">return</span> _M_failed; &#125;</span><br><span class="line"></span><br><span class="line">      ostreambuf_iterator&amp;</span><br><span class="line">      _M_put(<span class="keyword">const</span> _CharT* __ws, streamsize __len)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect(!_M_failed, <span class="literal">true</span>)</span><br><span class="line">    &amp;&amp; __builtin_expect(<span class="keyword">this</span>-&gt;_M_sbuf-&gt;sputn(__ws, __len) != __len,</span><br><span class="line"><span class="literal">false</span>))</span><br><span class="line">  _M_failed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="basic-ostream-ostream"><a class="header-anchor" href="#basic-ostream-ostream">¶</a>basic_ostream(ostream)</h3><ol><li>基本</li></ol><img src="/2018/11/12/%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E7%A0%81-io/basic_ostream.png" class="" title="ostream构成"><ol start="2"><li>代码</li></ol><figure class="highlight cpp"><figcaption><span>basic_ostream.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">basic_ostream</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> basic_ios&lt;_CharT, _Traits&gt; <span class="comment">//虚继承</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//type</span></span><br><span class="line">      <span class="comment">// Types (inherited from basic_ios):</span></span><br><span class="line">      <span class="keyword">typedef</span> _CharT char_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::int_type int_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::pos_type pos_type;</span><br><span class="line">      <span class="keyword">typedef</span> <span class="keyword">typename</span> _Traits::off_type off_type;</span><br><span class="line">      <span class="keyword">typedef</span> _Traits traits_type;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Non-standard Types:</span></span><br><span class="line">      <span class="keyword">typedef</span> basic_streambuf&lt;_CharT, _Traits&gt; __streambuf_type;</span><br><span class="line">      <span class="keyword">typedef</span> basic_ios&lt;_CharT, _Traits&gt;__ios_type;</span><br><span class="line">      <span class="keyword">typedef</span> basic_ostream&lt;_CharT, _Traits&gt;__ostream_type;</span><br><span class="line">      <span class="keyword">typedef</span> num_put&lt;_CharT, ostreambuf_iterator&lt;_CharT, _Traits&gt; &gt;</span><br><span class="line">      __num_put_type;</span><br><span class="line">      <span class="keyword">typedef</span> ctype&lt;_CharT&gt;      __ctype_type;</span><br><span class="line">      <span class="comment">//调用basic_ios::int</span></span><br><span class="line">            <span class="keyword">explicit</span></span><br><span class="line">      basic_ostream(__streambuf_type* __sb)</span><br><span class="line">      &#123; <span class="keyword">this</span>-&gt;init(__sb); &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="function">class <span class="title">sentry</span><span class="params">(哨兵)</span></span>;</span><br><span class="line">      <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">sentry</span>;</span></span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">basic_ostream</span>&lt;_CharT, _Traits&gt;:</span>:sentry</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// Data Members.</span></span><br><span class="line">      <span class="keyword">bool</span> _M_ok;</span><br><span class="line">      basic_ostream&lt;_CharT, _Traits&gt;&amp; _M_os;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/*tcc中实现</span></span><br><span class="line"><span class="comment">    *   if(_os.tie&amp;&amp;os.good)</span></span><br><span class="line"><span class="comment">    *     _os.ite().flush</span></span><br><span class="line"><span class="comment">    *       if (__os.good())</span></span><br><span class="line"><span class="comment">  _M_ok = true;</span></span><br><span class="line"><span class="comment">        else</span></span><br><span class="line"><span class="comment"> __os.setstate(ios_base::failbit);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      <span class="keyword">explicit</span></span><br><span class="line">      sentry(basic_ostream&lt;_CharT, _Traits&gt;&amp; __os);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *  @brief  Possibly flushes the stream.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       *  If @c ios_base::unitbuf is set in @c os.flags(), and</span></span><br><span class="line"><span class="comment">       *  @c std::uncaught_exception() is true, the sentry destructor calls</span></span><br><span class="line"><span class="comment">       *  @c flush() on the output stream.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      ~sentry()</span><br><span class="line">      &#123;</span><br><span class="line"><span class="comment">// XXX MT</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">bool</span>(_M_os.flags() &amp; ios_base::unitbuf) &amp;&amp; !uncaught_exception())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Can't call flush directly or else will get into recursive lock.</span></span><br><span class="line">    <span class="keyword">if</span> (_M_os.rdbuf() &amp;&amp; _M_os.rdbuf()-&gt;pubsync() == <span class="number">-1</span>)</span><br><span class="line">      _M_os.setstate(ios_base::badbit);</span><br><span class="line">  &#125;</span><br><span class="line">      <span class="comment">//重写bool</span></span><br><span class="line">      <span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line">      <span class="keyword">explicit</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      <span class="function"><span class="keyword">operator</span> <span class="title">bool</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">      </span>&#123; <span class="keyword">return</span> _M_ok; &#125;</span><br><span class="line">      &#125;</span><br><span class="line"> <span class="comment">//&lt;&lt;输出操作符,直接输出的操作符都调用了这个模板函数,定义在tcc中</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _CharT, <span class="keyword">typename</span> _Traits&gt;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _ValueT&gt;</span><br><span class="line">      basic_ostream&lt;_CharT, _Traits&gt;&amp;</span><br><span class="line">      basic_ostream&lt;_CharT, _Traits&gt;::</span><br><span class="line">      _M_insert(_ValueT __v)</span><br><span class="line">      &#123;</span><br><span class="line">sentry __cerb(*<span class="keyword">this</span>);  <span class="comment">//这里就明白了,sentry就是在流进行io操作时对流本身进行的一次检验</span></span><br><span class="line"><span class="keyword">if</span> (__cerb)<span class="comment">//sentry的bool转换,查看 sentry::_M_ok</span></span><br><span class="line">  &#123;</span><br><span class="line">    ios_base::iostate __err = ios_base::goodbit;</span><br><span class="line">    __try</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">const</span> __num_put_type&amp; __np = __check_facet(<span class="keyword">this</span>-&gt;_M_num_put); <span class="comment">//_M_num_put时facet的子类</span></span><br><span class="line"><span class="keyword">if</span> (__np.put(*<span class="keyword">this</span>, *<span class="keyword">this</span>, <span class="keyword">this</span>-&gt;fill(), __v).failed())  <span class="comment">//这里让人很困惑的原因时,第一个参数是隐式构造成的,cnm</span></span><br><span class="line">  __err |= ios_base::badbit;</span><br><span class="line">      &#125;</span><br><span class="line">    __catch(__cxxabiv1::__forced_unwind&amp;)</span><br><span class="line">      &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;_M_setstate(ios_base::badbit);</span><br><span class="line">__throw_exception_again;</span><br><span class="line">      &#125;</span><br><span class="line">    __catch(...)</span><br><span class="line">      &#123; <span class="keyword">this</span>-&gt;_M_setstate(ios_base::badbit); &#125;</span><br><span class="line">    <span class="keyword">if</span> (__err)</span><br><span class="line">      <span class="keyword">this</span>-&gt;setstate(__err);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="/2018/10/06/tomcat/"/>
      <url>/2018/10/06/tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="架构"><a class="header-anchor" href="#架构">¶</a>架构</h3><img src="/2018/10/06/tomcat/%E6%9E%B6%E6%9E%84.png" class=""><h4 id="server-xml相关"><a class="header-anchor" href="#server-xml相关">¶</a>server.xml相关</h4><h5 id="server-xml源"><a class="header-anchor" href="#server-xml源">¶</a>server.xml源</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--该文件说明了tomcat的 架构,以及很多细节--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- <span class="doctag">Note:</span>  A "Server" is not itself a "Container", so you may not</span></span><br><span class="line"><span class="comment">     define subcomponents such as "Valves" at this level.</span></span><br><span class="line"><span class="comment">     Documentation at /docs/config/server.html</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--最外层的StanderServer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--5个监听器,加上NamingContextListener一共6个--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span><span class="comment">&lt;!--init时打印信息--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Security listener. Documentation at /docs/config/listeners.html</span></span><br><span class="line"><span class="comment">  &lt;Listener className="org.apache.catalina.security.SecurityListener" /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span> <span class="comment">&lt;!-- --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span>  <span class="comment">&lt;!--关于apr是否开启,init时触发--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span>    <span class="comment">&lt;!--关于防止内存溢出,init触发 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span>   <span class="comment">&lt;!-- 处理jndi start和stop触发--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Global JNDI resources</span></span><br><span class="line"><span class="comment">       Documentation at /docs/jndi-resources-howto.html</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span>    <span class="comment">&lt;!--NamingResourcesImpl实例,在digister构建该对象的过程中,不单单加入了Resource,还加入其他属性如ejb...,参考源码看 --&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- Editable user database that can also be used by</span></span><br><span class="line"><span class="comment">         UserDatabaseRealm to authenticate users</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span>   </span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</span> <span class="comment">&lt;!--这就是jndi管理的东西 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- A "Service" is a collection of one or more "Connectors" that share</span></span><br><span class="line"><span class="comment">       a single "Container" <span class="doctag">Note:</span>  A "Service" is not itself a "Container",</span></span><br><span class="line"><span class="comment">       so you may not define subcomponents such as "Valves" at this level.</span></span><br><span class="line"><span class="comment">       Documentation at /docs/config/service.html</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Executor name="tomcatThreadPool" namePrefix="catalina-exec-"</span></span><br><span class="line"><span class="comment">        maxThreads="150" minSpareThreads="4"/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- A "Connector" represents an endpoint by which requests are received</span></span><br><span class="line"><span class="comment">         and responses are returned. Documentation at :</span></span><br><span class="line"><span class="comment">         Java HTTP Connector: /docs/config/http.html</span></span><br><span class="line"><span class="comment">         Java AJP  Connector: /docs/config/ajp.html</span></span><br><span class="line"><span class="comment">         APR (HTTP/AJP) Connector: /docs/apr.html</span></span><br><span class="line"><span class="comment">         Define a non-SSL/TLS HTTP/1.1 Connector on port 8080</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- A "Connector" using the shared thread pool--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector executor="tomcatThreadPool"</span></span><br><span class="line"><span class="comment">               port="8080" protocol="HTTP/1.1"</span></span><br><span class="line"><span class="comment">               connectionTimeout="20000"</span></span><br><span class="line"><span class="comment">               redirectPort="8443" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443</span></span><br><span class="line"><span class="comment">         This connector uses the NIO implementation. The default</span></span><br><span class="line"><span class="comment">         SSLImplementation will depend on the presence of the APR/native</span></span><br><span class="line"><span class="comment">         library and the useOpenSSL attribute of the</span></span><br><span class="line"><span class="comment">         AprLifecycleListener.</span></span><br><span class="line"><span class="comment">         Either JSSE or OpenSSL style configuration may be used regardless of</span></span><br><span class="line"><span class="comment">         the SSLImplementation selected. JSSE style configuration is used below.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"</span></span><br><span class="line"><span class="comment">               maxThreads="150" SSLEnabled="true"&gt;</span></span><br><span class="line"><span class="comment">        &lt;SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">            &lt;Certificate certificateKeystoreFile="conf/localhost-rsa.jks"</span></span><br><span class="line"><span class="comment">                         type="RSA" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">    &lt;/Connector&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2</span></span><br><span class="line"><span class="comment">         This connector uses the APR/native implementation which always uses</span></span><br><span class="line"><span class="comment">         OpenSSL for TLS.</span></span><br><span class="line"><span class="comment">         Either JSSE or OpenSSL style configuration may be used. OpenSSL style</span></span><br><span class="line"><span class="comment">         configuration is used below.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"</span></span><br><span class="line"><span class="comment">               maxThreads="150" SSLEnabled="true" &gt;</span></span><br><span class="line"><span class="comment">        &lt;UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">            &lt;Certificate certificateKeyFile="conf/localhost-rsa-key.pem"</span></span><br><span class="line"><span class="comment">                         certificateFile="conf/localhost-rsa-cert.pem"</span></span><br><span class="line"><span class="comment">                         certificateChainFile="conf/localhost-rsa-chain.pem"</span></span><br><span class="line"><span class="comment">                         type="RSA" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;/SSLHostConfig&gt;</span></span><br><span class="line"><span class="comment">    &lt;/Connector&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- An Engine represents the entry point (within Catalina) that processes</span></span><br><span class="line"><span class="comment">         every request.  The Engine implementation for Tomcat stand alone</span></span><br><span class="line"><span class="comment">         analyzes the HTTP headers included with the request, and passes them</span></span><br><span class="line"><span class="comment">         on to the appropriate Host (virtual host).</span></span><br><span class="line"><span class="comment">         Documentation at /docs/config/engine.html --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</span></span><br><span class="line"><span class="comment">    &lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1"&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--For clustering, please take a look at documentation at:</span></span><br><span class="line"><span class="comment">          /docs/cluster-howto.html  (simple how to)</span></span><br><span class="line"><span class="comment">          /docs/config/cluster.html (reference documentation) --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      &lt;Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/&gt;</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span></span><br><span class="line"><span class="comment">           via a brute-force attack --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span></span><br><span class="line"><span class="comment">             resources under the key "UserDatabase".  Any edits</span></span><br><span class="line"><span class="comment">             that are performed against this UserDatabase are immediately</span></span><br><span class="line"><span class="comment">             available for use by the Realm.  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SingleSignOn valve, share authentication between web applications</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;Valve className="org.apache.catalina.authenticator.SingleSignOn" /&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">             Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">             <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>整体架构(出自tomcat内核分析)</li></ul><img src="/2018/10/06/tomcat/%E6%95%B4%E4%BD%93.png" class="" title="这部分和我看我tomcat9并不是完全符合"><h5 id="server-xml对于java代码加载"><a class="header-anchor" href="#server-xml对于java代码加载">¶</a>server.xml对于java代码加载</h5><figure class="highlight java"><figcaption><span>Catalina中xml解析</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create and configure the Digester we will be using for startup.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the main digester to parse server.xml</span></span><br><span class="line"><span class="comment"> *   看来此处是用来解析server.xml的,而Digester 相当于一个规则和defaultHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> t1=System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// Initialize the digester  ---&gt;这个解析器代码比较复杂</span></span><br><span class="line">    Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">    digester.setValidating(<span class="keyword">false</span>);</span><br><span class="line">    digester.setRulesValidation(<span class="keyword">true</span>);</span><br><span class="line">    Map&lt;Class&lt;?&gt;, List&lt;String&gt;&gt; fakeAttributes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; attrs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    attrs.add(<span class="string">"className"</span>);</span><br><span class="line">    fakeAttributes.put(Object<span class="class">.<span class="keyword">class</span>, <span class="title">attrs</span>)</span>;</span><br><span class="line">    digester.setFakeAttributes(fakeAttributes);</span><br><span class="line">    digester.setUseContextClassLoader(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure the actions we will be using</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  1.addObjectCreate() --&gt;将遇到的开始标签类进行创建</span></span><br><span class="line"><span class="comment">     *  2.addSetProperties()--&gt;将之填充</span></span><br><span class="line"><span class="comment">     *  3.addSetNext--&gt;使用栈顶次栈顶元素调用内部xx方法进行set</span></span><br><span class="line"><span class="comment">     *      在&#123;<span class="doctag">@link</span> Catalina#load()&#125;中push(this)这一步就将catalina本身放到了栈顶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//server</span></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server"</span>,</span><br><span class="line">                             <span class="string">"org.apache.catalina.core.StandardServer"</span>,</span><br><span class="line">                             <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server"</span>,</span><br><span class="line">                        <span class="string">"setServer"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.Server"</span>);</span><br><span class="line">    <span class="comment">//NamingResourcesImpl</span></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/GlobalNamingResources"</span>,</span><br><span class="line">                             <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/GlobalNamingResources"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/GlobalNamingResources"</span>,</span><br><span class="line">                        <span class="string">"setGlobalNamingResources"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.deploy.NamingResourcesImpl"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Listener"</span>,</span><br><span class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                             <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Listener"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Listener"</span>,</span><br><span class="line">                        <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line">    <span class="comment">//service</span></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service"</span>,</span><br><span class="line">                             <span class="string">"org.apache.catalina.core.StandardService"</span>,</span><br><span class="line">                             <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service"</span>,</span><br><span class="line">                        <span class="string">"addService"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.Service"</span>);</span><br><span class="line">    <span class="comment">//service::listener</span></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Listener"</span>,</span><br><span class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                             <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service/Listener"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Listener"</span>,</span><br><span class="line">                        <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service::Executor</span></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,</span><br><span class="line">                     <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,</span><br><span class="line">                     <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,</span><br><span class="line">                        <span class="string">"addExecutor"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.Executor"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//service::listener::Connector</span></span><br><span class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>,</span><br><span class="line">                     <span class="keyword">new</span> ConnectorCreateRule());</span><br><span class="line">    digester.addRule(<span class="string">"Server/Service/Connector"</span>, <span class="keyword">new</span> SetAllPropertiesRule(</span><br><span class="line">            <span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>, <span class="string">"sslImplementationName"</span>, <span class="string">"protocol"</span>&#125;));</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</span><br><span class="line">                        <span class="string">"addConnector"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.connector.Connector"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</span><br><span class="line">                             <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig"</span>,</span><br><span class="line">            <span class="string">"addSslHostConfig"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.util.net.SSLHostConfig"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</span><br><span class="line">                     <span class="keyword">new</span> CertificateCreateRule());</span><br><span class="line">    digester.addRule(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</span><br><span class="line">                     <span class="keyword">new</span> SetAllPropertiesRule(<span class="keyword">new</span> String[]&#123;<span class="string">"type"</span>&#125;));</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/SSLHostConfig/Certificate"</span>,</span><br><span class="line">                        <span class="string">"addCertificate"</span>,</span><br><span class="line">                        <span class="string">"org.apache.tomcat.util.net.SSLHostConfigCertificate"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/Listener"</span>,</span><br><span class="line">                             <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                             <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/Listener"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/Listener"</span>,</span><br><span class="line">                        <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                        <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line"></span><br><span class="line">    digester.addObjectCreate(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</span><br><span class="line">                              <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                              <span class="string">"className"</span>);</span><br><span class="line">    digester.addSetProperties(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>);</span><br><span class="line">    digester.addSetNext(<span class="string">"Server/Service/Connector/UpgradeProtocol"</span>,</span><br><span class="line">                        <span class="string">"addUpgradeProtocol"</span>,</span><br><span class="line">                        <span class="string">"org.apache.coyote.UpgradeProtocol"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add RuleSets for nested elements   这几个内容比较重要</span></span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/GlobalNamingResources/"</span>));  <span class="comment">//处理全局naming资源</span></span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));      <span class="comment">// 加载Engine容器</span></span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));  <span class="comment">//Host容器</span></span><br><span class="line"></span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));   <span class="comment">//Context</span></span><br><span class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Host/Cluster/"</span>);</span><br><span class="line">    digester.addRuleSet(<span class="keyword">new</span> NamingRuleSet(<span class="string">"Server/Service/Engine/Host/Context/"</span>));  <span class="comment">//向context中添加naming资源</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// When the 'engine' is found, set the parentClassLoader.</span></span><br><span class="line">    digester.addRule(<span class="string">"Server/Service/Engine"</span>,</span><br><span class="line">                     <span class="keyword">new</span> SetParentClassLoaderRule(parentClassLoader));</span><br><span class="line">    addClusterRuleSet(digester, <span class="string">"Server/Service/Engine/Cluster/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> t2=System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">"Digester for server.xml created "</span> + ( t2-t1 ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> digester;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>NamingRuleSet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于xml中 GlobalNamingResources标签的加载,处理naming资源映射</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果存在Ejb标签创建,并且调用addEjb添加到NamingResources中</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Ejb"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ContextEjb"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Ejb"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Ejb"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addEjb"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextEjb"</span>));</span><br><span class="line">        <span class="comment">//Environment 添加</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Environment"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ContextEnvironment"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Environment"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Environment"</span>,</span><br><span class="line">                            <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addEnvironment"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextEnvironment"</span>));</span><br><span class="line">        <span class="comment">//LocalEjb</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"LocalEjb"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ContextLocalEjb"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"LocalEjb"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"LocalEjb"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addLocalEjb"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextLocalEjb"</span>));</span><br><span class="line">        <span class="comment">//这个就是默认常见的如数据库配置等</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Resource"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResource"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Resource"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Resource"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addResource"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResource"</span>));</span><br><span class="line">        <span class="comment">//下边三种我不知道啥玩意</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"ResourceEnvRef"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"ResourceEnvRef"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"ResourceEnvRef"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addResourceEnvRef"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResourceEnvRef"</span>));</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"ServiceRef"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextService"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"ServiceRef"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"ServiceRef"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addService"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextService"</span>));</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Transaction"</span>,</span><br><span class="line">            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextTransaction"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Transaction"</span>, <span class="keyword">new</span> SetAllPropertiesRule());</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Transaction"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"setTransaction"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextTransaction"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终在GlobalNamingResources中就会存在xml中配置的所有属性,这就是jndi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SetNextNamingRule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">(String namespace, String name)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//这个类是处理namingRuleSet的setNext情况,和一般的不一样,花里胡哨的</span></span><br><span class="line">     <span class="comment">// Identify the objects to be used</span></span><br><span class="line">     Object child = digester.peek(<span class="number">0</span>);</span><br><span class="line">     Object parent = digester.peek(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">     NamingResourcesImpl namingResources = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (parent <span class="keyword">instanceof</span> Context) &#123;  <span class="comment">//此处判断了栈顶类型,如果是Context 则取getNamingResources,这是一个慢加载代码</span></span><br><span class="line">         namingResources = ((Context) parent).getNamingResources(); <span class="comment">//第一次访问向对应context中创建namingResources,之后按照namingResources的逻辑添加资源映射</span></span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         namingResources = (NamingResourcesImpl) parent; <span class="comment">//否则就是向GlobalNamingResources中添加</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Call the specified method</span></span><br><span class="line">     IntrospectionUtils.callMethod1(namingResources, methodName,</span><br><span class="line">             child, paramType, digester.getClassLoader());</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SetAllPropertiesRule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"> * contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"> * this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"> * The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"> * (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"> * the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.catalina.startup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.IntrospectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.digester.Rule;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Rule that uses the introspection utils to set properties.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Remy Maucherat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetAllPropertiesRule</span> <span class="keyword">extends</span> <span class="title">Rule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------------- Constructors</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetAllPropertiesRule</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetAllPropertiesRule</span><span class="params">(String[] exclude)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;exclude.length; i++ ) <span class="keyword">if</span> (exclude[i]!=<span class="keyword">null</span>) <span class="keyword">this</span>.excludes.put(exclude[i],exclude[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------------------- Instance Variables</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> HashMap&lt;String,String&gt; excludes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------------------- Public Methods</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the beginning of an XML element.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attributes The attributes of this element</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> Exception if a processing error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String nameX, Attributes attributes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</span><br><span class="line">            String name = attributes.getLocalName(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(name)) &#123;</span><br><span class="line">                name = attributes.getQName(i);</span><br><span class="line">            &#125;</span><br><span class="line">            String value = attributes.getValue(i);</span><br><span class="line">            <span class="keyword">if</span> ( !excludes.containsKey(name)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!digester.isFakeAttribute(digester.peek(), name)</span><br><span class="line">                        &amp;&amp; !IntrospectionUtils.setProperty(digester.peek(), name, value) <span class="comment">//这里牵扯到digester解析的过程,不仅仅能够该任意对象的某属性直接调用setXX(Value)赋值</span></span><br><span class="line">                        <span class="comment">//还能够对某对象内部成员为Map&lt;String,Object&gt; ,调用对应的setProperty(String name, Object value) 进行赋值,参考ResourceBase子类的创建过程</span></span><br><span class="line">                        &amp;&amp; digester.getRulesValidation()) &#123;</span><br><span class="line">                    digester.getLogger().warn(<span class="string">"[SetAllPropertiesRule]&#123;"</span> + digester.getMatch() +</span><br><span class="line">                            <span class="string">"&#125; Setting property '"</span> + name + <span class="string">"' to '"</span> +</span><br><span class="line">                            value + <span class="string">"' did not find a matching property."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Engine复杂添加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EngineRuleSet中逻辑</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建StandardEngine</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Engine"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.core.StandardEngine"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Engine"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Engine"</span>,</span><br><span class="line">                         <span class="keyword">new</span> LifecycleListenerRule</span><br><span class="line">                         (<span class="string">"org.apache.catalina.startup.EngineConfig"</span>,</span><br><span class="line">                          <span class="string">"engineConfigClass"</span>));   <span class="comment">//当此处有参数的时候,创建一个 engineConfigClass 如次的类,调用addLifecycleListener加入,明显这是属于Engine的一个监听器</span></span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Engine"</span>,</span><br><span class="line">                            <span class="string">"setContainer"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Engine"</span>);     <span class="comment">//将engine加入到Service中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cluster configuration start                                    //添加cluster</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Engine/Cluster"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Engine/Cluster"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Engine/Cluster"</span>,</span><br><span class="line">                            <span class="string">"setCluster"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Cluster"</span>);</span><br><span class="line">        <span class="comment">//Cluster configuration end</span></span><br><span class="line">         <span class="comment">//创建并添加监听器</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Engine/Listener"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Engine/Listener"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Engine/Listener"</span>,</span><br><span class="line">                            <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理关于Realm 域添加</span></span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> RealmRuleSet(prefix + <span class="string">"Engine/"</span>));</span><br><span class="line">        <span class="comment">//创建关于Valve标签的创建,并添加到engine中</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Engine/Valve"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Engine/Valve"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Engine/Valve"</span>,</span><br><span class="line">                            <span class="string">"addValve"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Valve"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>RealmRuleSet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//补充关于RealmRuleSet中逻辑</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line">        StringBuilder pattern = <span class="keyword">new</span> StringBuilder(prefix);</span><br><span class="line">        <span class="comment">//这里的逻辑还是用来动态生成关于xml中engine/Realm/Realm这中嵌套结构的规则,也就是说</span></span><br><span class="line">        Realm.</span><br><span class="line">        <span class="comment">//对于container子类使用set  CombinedRealm使用add,这个类子类就是默认xml中的LockOutRealm</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_NESTED_REALM_LEVELS; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pattern.append(<span class="string">'/'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            pattern.append(<span class="string">"Realm"</span>);</span><br><span class="line">            addRuleInstances(digester, pattern.toString(), i == <span class="number">0</span> ? <span class="string">"setRealm"</span> : <span class="string">"addRealm"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester, String pattern, String methodName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上边的函数用来判断使用哪个函数,这里就是创建org.apache.catalina.Realm,并且添加到Engine中</span></span><br><span class="line">        digester.addObjectCreate(pattern, <span class="keyword">null</span> <span class="comment">/* MUST be specified in the element */</span>,</span><br><span class="line">                <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(pattern);</span><br><span class="line">        digester.addSetNext(pattern, methodName, <span class="string">"org.apache.catalina.Realm"</span>);</span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> CredentialHandlerRuleSet(pattern + <span class="string">"/"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SetAllPropertiesRule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个类是关于某些属性设置的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SetAllPropertiesRule</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetAllPropertiesRule</span><span class="params">(String[] exclude)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;exclude.length; i++ ) <span class="keyword">if</span> (exclude[i]!=<span class="keyword">null</span>) <span class="keyword">this</span>.excludes.put(exclude[i],exclude[i]);   <span class="comment">///根据exclude配置此加载器,要去除的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String nameX, Attributes attributes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</span><br><span class="line">            String name = attributes.getLocalName(i);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(name)) &#123;</span><br><span class="line">                name = attributes.getQName(i);</span><br><span class="line">            &#125;</span><br><span class="line">            String value = attributes.getValue(i);</span><br><span class="line">            <span class="keyword">if</span> ( !excludes.containsKey(name)) &#123;  <span class="comment">//exclude中不包含的属性进行下面逻辑</span></span><br><span class="line">                <span class="keyword">if</span> (!digester.isFakeAttribute(digester.peek(), name)</span><br><span class="line">                        &amp;&amp; !IntrospectionUtils.setProperty(digester.peek(), name, value)</span><br><span class="line">                        &amp;&amp; digester.getRulesValidation()) &#123;</span><br><span class="line">                    digester.getLogger().warn(<span class="string">"[SetAllPropertiesRule]&#123;"</span> + digester.getMatch() +</span><br><span class="line">                            <span class="string">"&#125; Setting property '"</span> + name + <span class="string">"' to '"</span> +</span><br><span class="line">                            value + <span class="string">"' did not find a matching property."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ConnectorCreateRule</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//创建connector的逻辑</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String name, Attributes attributes)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      Service svc = (Service)digester.peek();</span><br><span class="line">      Executor ex = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//根据connector标签的中"executor" ,从Service中取executor,并且加入到来连接器中,默认情况Service是没有executor的</span></span><br><span class="line">      <span class="keyword">if</span> ( attributes.getValue(<span class="string">"executor"</span>)!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">          ex = svc.getExecutor(attributes.getValue(<span class="string">"executor"</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      Connector con = <span class="keyword">new</span> Connector(attributes.getValue(<span class="string">"protocol"</span>));</span><br><span class="line">      <span class="keyword">if</span> (ex != <span class="keyword">null</span>) &#123;</span><br><span class="line">          setExecutor(con, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//sslImplementationName这个属性默认也是没有的</span></span><br><span class="line">      String sslImplementationName = attributes.getValue(<span class="string">"sslImplementationName"</span>);</span><br><span class="line">      <span class="keyword">if</span> (sslImplementationName != <span class="keyword">null</span>) &#123;</span><br><span class="line">          setSSLImplementationName(con, sslImplementationName);</span><br><span class="line">      &#125;</span><br><span class="line">      digester.push(con);  <span class="comment">//将连接器放到栈顶,是因为接下来对于连接器标签内部也可以进行加载处理</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>host加载</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostRuleSet</span> <span class="keyword">implements</span> <span class="title">RuleSet</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//标准三套:创建StandardHost</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.core.StandardHost"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Host"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                         <span class="keyword">new</span> CopyParentClassLoaderRule()); <span class="comment">//处理父加载器</span></span><br><span class="line"></span><br><span class="line">        digester.addRule(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                         <span class="keyword">new</span> LifecycleListenerRule</span><br><span class="line">                         (<span class="string">"org.apache.catalina.startup.HostConfig"</span>,</span><br><span class="line">                          <span class="string">"hostConfigClass"</span>)); <span class="comment">//添加HostConfig监听器</span></span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Host"</span>,</span><br><span class="line">                            <span class="string">"addChild"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Container"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addCallMethod(prefix + <span class="string">"Host/Alias"</span>,</span><br><span class="line">                               <span class="string">"addAlias"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cluster configuration start</span></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Host/Cluster"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Host/Cluster"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Host/Cluster"</span>,</span><br><span class="line">                            <span class="string">"setCluster"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Cluster"</span>);</span><br><span class="line">        <span class="comment">//Cluster configuration end</span></span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Host/Listener"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Host/Listener"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Host/Listener"</span>,</span><br><span class="line">                            <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> RealmRuleSet(prefix + <span class="string">"Host/"</span>));</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Host/Valve"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Host/Valve"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Host/Valve"</span>,</span><br><span class="line">                            <span class="string">"addValve"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Valve"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ContextRuleSet</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当遇到Server/Service/Engine/Host/Content 时进行创建,这是通过server.xml的方式配置项目,总体而言我不是要说具体的解析过程而是强调</span></span><br><span class="line"><span class="comment">//除了content.xml配置,可以通过server.xml进行配置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addRuleInstances</span><span class="params">(Digester digester)</span> </span>&#123;</span><br><span class="line"><span class="comment">//这其中包含了许多不太了解的类,但是可以反映出content也就是表示项目的结构</span></span><br><span class="line">        <span class="keyword">if</span> (create) &#123;</span><br><span class="line">            digester.addObjectCreate(prefix + <span class="string">"Context"</span>,</span><br><span class="line">                    <span class="string">"org.apache.catalina.core.StandardContext"</span>, <span class="string">"className"</span>);</span><br><span class="line">            digester.addSetProperties(prefix + <span class="string">"Context"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            digester.addRule(prefix + <span class="string">"Context"</span>, <span class="keyword">new</span> SetContextPropertiesRule());</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">//创建content,并加入到父容器Host中</span></span><br><span class="line">        <span class="keyword">if</span> (create) &#123;</span><br><span class="line">            digester.addRule(prefix + <span class="string">"Context"</span>,</span><br><span class="line">                             <span class="keyword">new</span> LifecycleListenerRule</span><br><span class="line">                                 (<span class="string">"org.apache.catalina.startup.ContextConfig"</span>,</span><br><span class="line">                                  <span class="string">"configClass"</span>));</span><br><span class="line">            digester.addSetNext(prefix + <span class="string">"Context"</span>,</span><br><span class="line">                                <span class="string">"addChild"</span>,</span><br><span class="line">                                <span class="string">"org.apache.catalina.Container"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Listener"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Listener"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Listener"</span>,</span><br><span class="line">                            <span class="string">"addLifecycleListener"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.LifecycleListener"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Loader"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.loader.WebappLoader"</span>,</span><br><span class="line">                            <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Loader"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Loader"</span>,</span><br><span class="line">                            <span class="string">"setLoader"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Loader"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Manager"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.session.StandardManager"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Manager"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Manager"</span>,</span><br><span class="line">                            <span class="string">"setManager"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Manager"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Manager/Store"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Manager/Store"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Manager/Store"</span>,</span><br><span class="line">                            <span class="string">"setStore"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Store"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Manager/SessionIdGenerator"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.util.StandardSessionIdGenerator"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Manager/SessionIdGenerator"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Manager/SessionIdGenerator"</span>,</span><br><span class="line">                            <span class="string">"setSessionIdGenerator"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.SessionIdGenerator"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Parameter"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ApplicationParameter"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Parameter"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Parameter"</span>,</span><br><span class="line">                            <span class="string">"addApplicationParameter"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ApplicationParameter"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addRuleSet(<span class="keyword">new</span> RealmRuleSet(prefix + <span class="string">"Context/"</span>));</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Resources"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.catalina.webresources.StandardRoot"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Resources"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Resources"</span>,</span><br><span class="line">                            <span class="string">"setResources"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.WebResourceRoot"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Resources/PreResources"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Resources/PreResources"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Resources/PreResources"</span>,</span><br><span class="line">                            <span class="string">"addPreResources"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.WebResourceSet"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Resources/JarResources"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Resources/JarResources"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Resources/JarResources"</span>,</span><br><span class="line">                            <span class="string">"addJarResources"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.WebResourceSet"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Resources/PostResources"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Resources/PostResources"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Resources/PostResources"</span>,</span><br><span class="line">                            <span class="string">"addPostResources"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.WebResourceSet"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/ResourceLink"</span>,   <span class="comment">//关于资源引用标签的解析就在此处</span></span><br><span class="line">                <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResourceLink"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/ResourceLink"</span>);</span><br><span class="line">        digester.addRule(prefix + <span class="string">"Context/ResourceLink"</span>,</span><br><span class="line">                <span class="keyword">new</span> SetNextNamingRule(<span class="string">"addResourceLink"</span>,</span><br><span class="line">                        <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResourceLink"</span>));</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/Valve"</span>,</span><br><span class="line">                                 <span class="keyword">null</span>, <span class="comment">// MUST be specified in the element</span></span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/Valve"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/Valve"</span>,</span><br><span class="line">                            <span class="string">"addValve"</span>,</span><br><span class="line">                            <span class="string">"org.apache.catalina.Valve"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addCallMethod(prefix + <span class="string">"Context/WatchedResource"</span>,</span><br><span class="line">                               <span class="string">"addWatchedResource"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        digester.addCallMethod(prefix + <span class="string">"Context/WrapperLifecycle"</span>,</span><br><span class="line">                               <span class="string">"addWrapperLifecycle"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        digester.addCallMethod(prefix + <span class="string">"Context/WrapperListener"</span>,</span><br><span class="line">                               <span class="string">"addWrapperListener"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/JarScanner"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.scan.StandardJarScanner"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/JarScanner"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/JarScanner"</span>,</span><br><span class="line">                            <span class="string">"setJarScanner"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.JarScanner"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/JarScanner/JarScanFilter"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.scan.StandardJarScanFilter"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/JarScanner/JarScanFilter"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/JarScanner/JarScanFilter"</span>,</span><br><span class="line">                            <span class="string">"setJarScanFilter"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.JarScanFilter"</span>);</span><br><span class="line"></span><br><span class="line">        digester.addObjectCreate(prefix + <span class="string">"Context/CookieProcessor"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.http.Rfc6265CookieProcessor"</span>,</span><br><span class="line">                                 <span class="string">"className"</span>);</span><br><span class="line">        digester.addSetProperties(prefix + <span class="string">"Context/CookieProcessor"</span>);</span><br><span class="line">        digester.addSetNext(prefix + <span class="string">"Context/CookieProcessor"</span>,</span><br><span class="line">                            <span class="string">"setCookieProcessor"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.http.CookieProcessor"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="接口"><a class="header-anchor" href="#接口">¶</a>接口</h4><h5 id="1-Lifecycle-接口"><a class="header-anchor" href="#1-Lifecycle-接口">¶</a>1. Lifecycle 接口</h5><ul><li>该接口的子类要按照一定状态和顺序,完成init start stop destory 函数,并且该子类可以作为lifeEvent的事件源,并且调整life部件的状态</li></ul> <figure class="highlight java"><figcaption><span>lifeBase</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在生命周期初始化开端 改变状态,调用子类internal</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">           invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);   <span class="comment">// INITIALIZING(false, Lifecycle.BEFORE_INIT_EVENT),</span></span><br><span class="line">           initInternal();</span><br><span class="line">           setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>); <span class="comment">//INITIALIZED(false, Lifecycle.AFTER_INIT_EVENT),</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">           handleSubClassException(t, <span class="string">"lifecycleBase.initFail"</span>, toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setStateInternal</span><span class="params">(LifecycleState state, Object data, <span class="keyword">boolean</span> check)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">           log.debug(sm.getString(<span class="string">"lifecycleBase.setState"</span>, <span class="keyword">this</span>, state));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (check) &#123;</span><br><span class="line">           <span class="comment">// Must have been triggered by one of the abstract methods (assume</span></span><br><span class="line">           <span class="comment">// code in this class is correct)</span></span><br><span class="line">           <span class="comment">// null is never a valid state</span></span><br><span class="line">           <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">               invalidTransition(<span class="string">"null"</span>);</span><br><span class="line">               <span class="comment">// Unreachable code - here to stop eclipse complaining about</span></span><br><span class="line">               <span class="comment">// a possible NPE further down the method</span></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Any method can transition to failed</span></span><br><span class="line">           <span class="comment">// startInternal() permits STARTING_PREP to STARTING</span></span><br><span class="line">           <span class="comment">// stopInternal() permits STOPPING_PREP to STOPPING and FAILED to</span></span><br><span class="line">           <span class="comment">// STOPPING</span></span><br><span class="line">           <span class="keyword">if</span> (!(state == LifecycleState.FAILED ||</span><br><span class="line">                   (<span class="keyword">this</span>.state == LifecycleState.STARTING_PREP &amp;&amp;</span><br><span class="line">                           state == LifecycleState.STARTING) ||</span><br><span class="line">                   (<span class="keyword">this</span>.state == LifecycleState.STOPPING_PREP &amp;&amp;</span><br><span class="line">                           state == LifecycleState.STOPPING) ||</span><br><span class="line">                   (<span class="keyword">this</span>.state == LifecycleState.FAILED &amp;&amp;</span><br><span class="line">                           state == LifecycleState.STOPPING))) &#123;</span><br><span class="line">               <span class="comment">// No other transition permitted</span></span><br><span class="line">               invalidTransition(state.name());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.state = state;</span><br><span class="line">       String lifecycleEvent = state.getLifecycleEvent();</span><br><span class="line">       <span class="keyword">if</span> (lifecycleEvent != <span class="keyword">null</span>) &#123;  <span class="comment">//此处事件源触发事件</span></span><br><span class="line">           fireLifecycleEvent(lifecycleEvent, data);  <span class="comment">//这个逻辑是当发生状态改变时,调用监听器,可以理解为事件发生,触发该事件源的监听器</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>lifecycleMbeanBase实现了其下属子类的共同接口函数,实现共同逻辑,类似的还有ContainBase</li></ul> <figure class="highlight java"><figcaption><span>lifecycleMbeanBase</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类只在init和destory有用</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">  <span class="comment">//将life部件加入到mServer</span></span><br><span class="line">       <span class="comment">// If oname is not null then registration has already happened via</span></span><br><span class="line">       <span class="comment">// preRegister().</span></span><br><span class="line">       <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</span><br><span class="line">           mserver = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">           oname = register(<span class="keyword">this</span>, getObjectNameKeyProperties());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//卸除mbean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">destroyInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">       unregister(oname);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//没有实现startInternal</span></span><br></pre></td></tr></table></figure><ul><li>衍生出了大部分第三层父类, ContainBase,LifecycleMBeanBase则实现了internal</li></ul><h5 id="ContainerBase"><a class="header-anchor" href="#ContainerBase">¶</a>ContainerBase</h5><p>此类加载过程通常都是 container.start()-&gt;ContainerBase.startInternal()-&gt;((导致子类容器start) &amp;&amp;( 自身pieple start-&gt;关联valve-&gt;start)-&gt;启动线程)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init 逻辑</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        reconfigureStartStopExecutor(getStartStopThreadsInternal());  <span class="comment">//设置线程池</span></span><br><span class="line">        <span class="keyword">super</span>.initInternal();  <span class="comment">//父类是mbean 所以加入到jmx</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//关于线程的逻辑,这里要清楚要自己看看这几个线程类的继承关系</span></span><br><span class="line">    <span class="keyword">protected</span> ExecutorService startStopExecutor; <span class="comment">//startStopExecutor是该抽象类的属性</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconfigureStartStopExecutor</span><span class="params">(<span class="keyword">int</span> threads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threads == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的逻辑是,如果startStopExecutor为null,那么就实例化为InlineExecutorService</span></span><br><span class="line">            <span class="keyword">if</span> (!(startStopExecutor <span class="keyword">instanceof</span> InlineExecutorService)) &#123;  </span><br><span class="line">                startStopExecutor = <span class="keyword">new</span> InlineExecutorService();   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//其他情况说明该startStopExecutor接口被实例化了,比如第二次调用该函数就调用如下逻辑</span></span><br><span class="line">        <span class="comment">//当为线程池时进行设置,否则将该startStopExecutor实例化为线程池类型,当再一次调用时就会进行改变</span></span><br><span class="line">            <span class="keyword">if</span> (startStopExecutor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">                ((ThreadPoolExecutor) startStopExecutor).setMaximumPoolSize(threads);</span><br><span class="line">                ((ThreadPoolExecutor) startStopExecutor).setCorePoolSize(threads);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                BlockingQueue&lt;Runnable&gt; startStopQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">                ThreadPoolExecutor tpe = <span class="keyword">new</span> ThreadPoolExecutor(threads, threads, <span class="number">10</span>,</span><br><span class="line">                        TimeUnit.SECONDS, startStopQueue,</span><br><span class="line">                        <span class="keyword">new</span> StartStopThreadFactory(getName() + <span class="string">"-startStop-"</span>));</span><br><span class="line">                tpe.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">                startStopExecutor = tpe;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//被engine调用的获取realm逻辑    </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Lock l = realmLock.readLock();</span><br><span class="line">        l.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (realm != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> realm;</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> parent.getRealm();  <span class="comment">//如果该容器体系不存在realm则返回null</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            l.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//设置Realm</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRealm</span><span class="params">(Realm realm)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Lock l = realmLock.writeLock();</span><br><span class="line">        l.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Change components if necessary</span></span><br><span class="line">            Realm oldRealm = <span class="keyword">this</span>.realm;</span><br><span class="line">            <span class="keyword">if</span> (oldRealm == realm)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">this</span>.realm = realm;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Stop the old component if necessary</span></span><br><span class="line">            <span class="keyword">if</span> (getState().isAvailable() &amp;&amp; (oldRealm != <span class="keyword">null</span>) &amp;&amp;  <span class="comment">//对于持有作用域的组件,只能持有一个域,并且域也是一种生命周期组件</span></span><br><span class="line">                (oldRealm <span class="keyword">instanceof</span> Lifecycle)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ((Lifecycle) oldRealm).stop();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                    log.error(<span class="string">"ContainerBase.setRealm: stop: "</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start the new component if necessary</span></span><br><span class="line">            <span class="keyword">if</span> (realm != <span class="keyword">null</span>)</span><br><span class="line">                realm.setContainer(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (getState().isAvailable() &amp;&amp; (realm != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                (realm <span class="keyword">instanceof</span> Lifecycle)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ((Lifecycle) realm).start();  <span class="comment">//启动域</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">                    log.error(<span class="string">"ContainerBase.setRealm: start: "</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">            support.firePropertyChange(<span class="string">"realm"</span>, oldRealm, <span class="keyword">this</span>.realm);  <span class="comment">//类似于javafx的作用,当发生改变时触发事件,实际还是通过监听模式实现的</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            l.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//容器start    </span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our subordinate components, if any</span></span><br><span class="line">        logger = <span class="keyword">null</span>;</span><br><span class="line">        getLogger();</span><br><span class="line">        Cluster cluster = getClusterInternal();  <span class="comment">//(cluster)是和集群相关的</span></span><br><span class="line">        <span class="keyword">if</span> (cluster <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) cluster).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Realm realm = getRealmInternal();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 此处关于默认情况的逻辑进行lockoutRealm的生命周期init到start,看看lifeBase中的init/start函数并非在对应的函数其组件一定会执行对应生命周期函数,执行</span></span><br><span class="line"><span class="comment">         * 对应的函数取决于容器的state</span></span><br><span class="line"><span class="comment">         * 在处理lockoutRealm的过程中,也遍历启动了其内部realm的生命周期函数 默认就是UserDataRealm</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (realm <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">            ((Lifecycle) realm).start();   <span class="comment">//此处激活容器所属域,默认此处启动的是lockoutRealm,其内部可以含有子类realm,默认是userDataRealm</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our child containers, if any</span></span><br><span class="line">        Container children[] = findChildren();  <span class="comment">//xml中的host等都是子类容器</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ExecutorService::&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span></span><br><span class="line"><span class="comment">         * 返回的Future.get表示执行结果</span></span><br><span class="line"><span class="comment">         * 也就是说实际上此处执行的就是自容器的start函数,不过是通过线程执行的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            results.add(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));  <span class="comment">//通过线程池来执行StartChild(Call子类)中的call函数</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> fail = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.get(); <span class="comment">//get表示</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>), e);</span><br><span class="line">                fail = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fail) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line">        <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle)</span><br><span class="line">            ((Lifecycle) pipeline).start(); <span class="comment">//启动pipeline</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our thread</span></span><br><span class="line">        threadStart(); <span class="comment">//启动线程</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//关于后台线程,一个内部线程类</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerBackgroundProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Throwable t = <span class="keyword">null</span>;</span><br><span class="line">            String unexpectedDeathMessage = sm.getString(</span><br><span class="line">                    <span class="string">"containerBase.backgroundProcess.unexpectedThreadDeath"</span>,</span><br><span class="line">                    Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!threadDone) &#123; <span class="comment">//当线程没有结束时，不断执行</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(backgroundProcessorDelay * <span class="number">1000L</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">// Ignore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!threadDone) &#123;</span><br><span class="line">                        processChildren(ContainerBase.<span class="keyword">this</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException|Error e) &#123;</span><br><span class="line">                t = e;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!threadDone) &#123;</span><br><span class="line">                    log.error(unexpectedDeathMessage, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processChildren</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">            ClassLoader originalClassLoader = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    Loader loader = ((Context) container).getLoader();</span><br><span class="line">                    <span class="comment">// Loader will be null for FailedContext instances</span></span><br><span class="line">                    <span class="keyword">if</span> (loader == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Ensure background processing for Contexts and Wrappers</span></span><br><span class="line">                    <span class="comment">// is performed under the web app's class loader</span></span><br><span class="line">                    originalClassLoader = ((Context) container).bind(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                container.backgroundProcess(); <span class="comment">//实际上执行的是个这个函数</span></span><br><span class="line">                Container[] children = container.findChildren();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (children[i].getBackgroundProcessorDelay() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        processChildren(children[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(<span class="string">"Exception invoking periodic operation: "</span>, t);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                    ((Context) container).unbind(<span class="keyword">false</span>, originalClassLoader);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//不断执行内部这些成员的back，不代表所有成员都实现了该函数</span></span><br><span class="line">        <span class="keyword">if</span> (!getState().isAvailable())</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        Cluster cluster = getClusterInternal();</span><br><span class="line">        <span class="keyword">if</span> (cluster != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cluster.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.cluster"</span>,</span><br><span class="line">                        cluster), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Realm realm = getRealmInternal();</span><br><span class="line">        <span class="keyword">if</span> (realm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                realm.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.realm"</span>, realm), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Valve current = pipeline.getFirst();</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.backgroundProcess();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"containerBase.backgroundProcess.valve"</span>, current), e);</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        fireLifecycleEvent(Lifecycle.PERIODIC_EVENT, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ContainBase容器部分功能</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加子容器</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addChild</span><span class="params">(Container child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">            PrivilegedAction&lt;Void&gt; dp =</span><br><span class="line">                <span class="keyword">new</span> PrivilegedAddChild(child);</span><br><span class="line">            AccessController.doPrivileged(dp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            addChildInternal(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addChildInternal</span><span class="params">(Container child)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( log.isDebugEnabled() )</span><br><span class="line">            log.debug(<span class="string">"Add child "</span> + child + <span class="string">" "</span> + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (children.get(child.getName()) != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"addChild:  Child name '"</span> +</span><br><span class="line">                                                   child.getName() +</span><br><span class="line">                                                   <span class="string">"' is not unique"</span>);</span><br><span class="line">            child.setParent(<span class="keyword">this</span>);  <span class="comment">// May throw IAE</span></span><br><span class="line">            children.put(child.getName(), child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start child</span></span><br><span class="line">        <span class="comment">// Don't do this inside sync block - start can be a slow process and</span></span><br><span class="line">        <span class="comment">// locking the children object can cause problems elsewhere</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((getState().isAvailable() ||</span><br><span class="line">                    LifecycleState.STARTING_PREP.equals(getState())) &amp;&amp;</span><br><span class="line">                    startChildren) &#123;</span><br><span class="line">                child.start();  <span class="comment">//并且会启动此时加入的子容器,  content的加入后 就是在此时启动的,根据触发条件来看,只有该父容器处于有效 或者准备阶段会启动父容器, mxl解析创建的时候是不会的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.error(<span class="string">"ContainerBase.addChild: start: "</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"ContainerBase.addChild: start: "</span> + e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            fireContainerEvent(ADD_CHILD_EVENT, child); <span class="comment">//会触发监听器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//移除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeChild</span><span class="params">(Container child)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.getState().isAvailable()) &#123;</span><br><span class="line">                child.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.error(<span class="string">"ContainerBase.removeChild: stop: "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// child.destroy() may have already been called which would have</span></span><br><span class="line">            <span class="comment">// triggered this call. If that is the case, no need to destroy the</span></span><br><span class="line">            <span class="comment">// child again.</span></span><br><span class="line">            <span class="keyword">if</span> (!LifecycleState.DESTROYING.equals(child.getState())) &#123;</span><br><span class="line">                child.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.error(<span class="string">"ContainerBase.removeChild: destroy: "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (children.get(child.getName()) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            children.remove(child.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fireContainerEvent(REMOVE_CHILD_EVENT, child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//触发</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fireContainerEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (listeners.size() &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        ContainerEvent event = <span class="keyword">new</span> ContainerEvent(<span class="keyword">this</span>, type, data);  <span class="comment">//ContainerEvent 和lifeEvent都是EventObject子类,它不记录容器状态</span></span><br><span class="line">        <span class="comment">// Note for each uses an iterator internally so this is safe</span></span><br><span class="line">        <span class="keyword">for</span> (ContainerListener listener : listeners) &#123;</span><br><span class="line">            listener.containerEvent(event); <span class="comment">//触发监听器</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="tomcat关键部分及各部分作用"><a class="header-anchor" href="#tomcat关键部分及各部分作用">¶</a>tomcat关键部分及各部分作用</h4><h5 id="1-server-xml-该配置文件实际非常详实的说明了tomcat的架构"><a class="header-anchor" href="#1-server-xml-该配置文件实际非常详实的说明了tomcat的架构">¶</a>1. server.xml 该配置文件实际非常详实的说明了tomcat的架构</h5><h5 id="2-类加载器"><a class="header-anchor" href="#2-类加载器">¶</a>2. 类加载器</h5><img src="/2018/10/06/tomcat/classLoader.png" class=""><h5 id="3-Server继承图"><a class="header-anchor" href="#3-Server继承图">¶</a>3. Server继承图</h5><img src="/2018/10/06/tomcat/Server.png" class=""><ul><li>init阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();  <span class="comment">//将该对象加入到jmxServer中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register global String cache</span></span><br><span class="line">        <span class="comment">// Note although the cache is global, if there are multiple Servers</span></span><br><span class="line">        <span class="comment">// present in the JVM (may happen when embedding) then the same cache</span></span><br><span class="line">        <span class="comment">// will be registered under multiple names</span></span><br><span class="line">        onameStringCache = register(<span class="keyword">new</span> StringCache(), <span class="string">"type=StringCache"</span>);  <span class="comment">//将StringCache加入</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register the MBeanFactory</span></span><br><span class="line">        MBeanFactory factory = <span class="keyword">new</span> MBeanFactory();</span><br><span class="line">        factory.setContainer(<span class="keyword">this</span>);</span><br><span class="line">        onameMBeanFactory = register(factory, <span class="string">"type=MBeanFactory"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register the naming resources</span></span><br><span class="line">        globalNamingResources.init(); <span class="comment">// 此处完成了对于资源的处理,要理解就要看看</span></span><br><span class="line">globalNamingResources在digsiter的初始化</span><br><span class="line">        <span class="comment">// Populate the extension validator with JARs from common and shared</span></span><br><span class="line">        <span class="comment">// class loaders</span></span><br><span class="line">        <span class="keyword">if</span> (getCatalina() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassLoader cl = getCatalina().getParentClassLoader();</span><br><span class="line">            <span class="comment">// Walk the class loader hierarchy. Stop at the system class loader.</span></span><br><span class="line">            <span class="comment">// This will add the shared (if present) and common class loaders</span></span><br><span class="line">            <span class="keyword">while</span> (cl != <span class="keyword">null</span> &amp;&amp; cl != ClassLoader.getSystemClassLoader()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cl <span class="keyword">instanceof</span> URLClassLoader) &#123;</span><br><span class="line">                    URL[] urls = ((URLClassLoader) cl).getURLs();</span><br><span class="line">                    <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (url.getProtocol().equals(<span class="string">"file"</span>)) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                File f = <span class="keyword">new</span> File (url.toURI());</span><br><span class="line">                                <span class="keyword">if</span> (f.isFile() &amp;&amp;</span><br><span class="line">                                        f.getName().endsWith(<span class="string">".jar"</span>)) &#123;</span><br><span class="line">                                    ExtensionValidator.addSystemResource(f);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">                                <span class="comment">// Ignore</span></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                                <span class="comment">// Ignore</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cl = cl.getParent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Initialize our defined Services</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">            services[i].init();  <span class="comment">//改变状态 加入jmx</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//globalNamingResources init时触发情况,将server.xml GlobalNamingResources标签中的所有Resource envs resourceLinks 加入到jmx中</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set this before we register currently known naming resources to avoid</span></span><br><span class="line">        <span class="comment">// timing issues. Duplication registration is not an issue.</span></span><br><span class="line">        resourceRequireExplicitRegistration = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ContextResource cr : resources.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MBeanUtils.createMBean(cr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"namingResources.mbeanCreateFail"</span>, cr.getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ContextEnvironment ce : envs.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MBeanUtils.createMBean(ce);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"namingResources.mbeanCreateFail"</span>, ce.getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ContextResourceLink crl : resourceLinks.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MBeanUtils.createMBean(crl);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.warn(sm.getString(</span><br><span class="line">                        <span class="string">"namingResources.mbeanCreateFail"</span>, crl.getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>start阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"><span class="comment">//首先lifeBase将该部件state由INITIALIZED-&gt;STARTING_PREP(调用对应监听器),再由server</span></span><br><span class="line">        fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>); <span class="comment">//仅仅触发了NamingContentListenter的CONFIGURE_START_EVENT阶段</span></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        globalNamingResources.start(); <span class="comment">//触发STARTING_PREP时候globalNamingResources的监听器,默认没有</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our defined Services</span></span><br><span class="line">        <span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">                services[i].start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-Service继承图"><a class="header-anchor" href="#4-Service继承图">¶</a>4. Service继承图</h5><img src="/2018/10/06/tomcat/Service.png" class=""> <figure class="highlight java"><figcaption><span>Service init</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认没有监听器</span></span><br><span class="line">- init阶段</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();  <span class="comment">//加入到jmx</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">            engine.init();  <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize any Executors   ,关于Executor 实际上就是线程池,而线程底层只想runnable还是通过</span></span><br><span class="line">        <span class="comment">//Thread,tomcat实现了一个StandardThreadExecutor,该对象时xml解析时创建的,默认xml这部分被注释了,同样属于生命周期组件 </span></span><br><span class="line">        <span class="comment">//拥有ThreadPoolExecutor,该对象继承于jdk中的ThreadPoolExecutor,这是线程池之一</span></span><br><span class="line">        <span class="keyword">for</span> (Executor executor : findExecutors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> JmxEnabled) &#123;</span><br><span class="line">                ((JmxEnabled) executor).setDomain(getDomain());</span><br><span class="line">            &#125;</span><br><span class="line">            executor.init();  <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize mapper listener</span></span><br><span class="line">        mapperListener.init();  <span class="comment">//加入jmx,这个监听器不会在Engine组件的生命周期被激活</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize our defined Connectors</span></span><br><span class="line">        <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Connector connector : connectors) &#123;</span><br><span class="line">                connector.init();  <span class="comment">//加入jmx</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>start阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(log.isInfoEnabled())</span><br><span class="line">        log.info(sm.getString(<span class="string">"standardService.start.name"</span>, <span class="keyword">this</span>.name));  <span class="comment">//明显的service没有在start前要执行的监听器</span></span><br><span class="line">    setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Container first  engine也是容器子类</span></span><br><span class="line">    <span class="keyword">if</span> (engine != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (engine) &#123;</span><br><span class="line">            engine.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (executors) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Executor executor: executors) &#123; <span class="comment">//默认不存在</span></span><br><span class="line">            executor.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapperListener.start();  <span class="comment">//mapper就是对于url的映射,当容器engine及其子容器启动后,mapper作为life监听器和container监听器加入到各个子容器</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Start our defined Connectors second</span></span><br><span class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Connector connector: connectors) &#123;</span><br><span class="line">            <span class="comment">// If it has already failed, don't try and start it</span></span><br><span class="line">            <span class="keyword">if</span> (connector.getState() != LifecycleState.FAILED) &#123;</span><br><span class="line">                connector.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-Engine继承图"><a class="header-anchor" href="#5-Engine继承图">¶</a>5. Engine继承图</h5><img src="/2018/10/06/tomcat/Engine.png" class=""><ul><li>init阶段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Engine init时的逻辑</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="comment">// Ensure that a Realm is present before any attempt is made to start</span></span><br><span class="line">        <span class="comment">// one. This will create the default NullRealm if necessary.</span></span><br><span class="line">        getRealm();</span><br><span class="line">        <span class="keyword">super</span>.initInternal();  <span class="comment">//父类 : ContainerBase--&gt;LifecycleMBeanBase</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关于域的获取,realm是一个has a的一个成员变量</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Realm <span class="title">getRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//当自身不存在realm,则表示为NullRealm</span></span><br><span class="line">        Realm configured = <span class="keyword">super</span>.getRealm();</span><br><span class="line">        <span class="comment">// If no set realm has been called - default to NullRealm</span></span><br><span class="line">        <span class="comment">// This can be overridden at engine, context and host level</span></span><br><span class="line">        <span class="keyword">if</span> (configured == <span class="keyword">null</span>) &#123;</span><br><span class="line">            configured = <span class="keyword">new</span> NullRealm();</span><br><span class="line">            <span class="keyword">this</span>.setRealm(configured);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> configured;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>补充关于StandardThreadExecutor</p><img src="/2018/10/06/tomcat/StandardThreadExecutor.png" class=""><ul><li>start阶段</li></ul><figure class="highlight java"><figcaption><span>Engine</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Log our server identification information</span></span><br><span class="line">       <span class="keyword">if</span>(log.isInfoEnabled())</span><br><span class="line">           log.info( <span class="string">"Starting Servlet Engine: "</span> + ServerInfo.getServerInfo());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Standard container startup</span></span><br><span class="line">       <span class="keyword">super</span>.startInternal();  <span class="comment">//engine是容器类们的父容器,通过此处进行containerBase::init,完成子类容器的加载,比较复杂</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>//子容器host的start触发</p><img src="/2018/10/06/tomcat/StandardHost.png" class=""><figure class="highlight java"><figcaption><span>Host</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这过程中触发了其初始化阶段,如继承图可易知加入jmx,启动后台线程池</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set error report valve  下边的逻辑只是给host.pipe加入了ReportValve这个阀</span></span><br><span class="line">        String errorValve = getErrorReportValveClass();</span><br><span class="line">        <span class="keyword">if</span> ((errorValve != <span class="keyword">null</span>) &amp;&amp; (!errorValve.equals(<span class="string">""</span>))) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">                Valve[] valves = getPipeline().getValves();</span><br><span class="line">                <span class="keyword">for</span> (Valve valve : valves) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (errorValve.equals(valve.getClass().getName())) &#123;</span><br><span class="line">                        found = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!found) &#123;</span><br><span class="line">                    Valve valve =</span><br><span class="line">                        (Valve) Class.forName(errorValve).getConstructor().newInstance();</span><br><span class="line">                    getPipeline().addValve(valve);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        <span class="string">"standardHost.invalidErrorReportValveClass"</span>,</span><br><span class="line">                        errorValve), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.startInternal(); <span class="comment">//执行本身容器逻辑,仅仅是开启了内部pipe.start</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="6-connector"><a class="header-anchor" href="#6-connector">¶</a>6. connector</h5><img src="/2018/10/06/tomcat/connector.png" class=""><figure class="highlight java"><figcaption><span>Connector</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">- init阶段</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Connector</span><span class="params">(String protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;</span><br><span class="line">                AprLifecycleListener.getUseAprConnector();  <span class="comment">//根据之前Server apr监听器的处理,判断是否能够开启apr io,默认情况是无法开启的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"HTTP/1.1"</span>.equals(protocol) || protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>;  <span class="comment">//对于http1.1连接器,tomcat 9版本使用nio</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"AJP/1.3"</span>.equals(protocol)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (aprConnector) &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpAprProtocol"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                protocolHandlerClassName = <span class="string">"org.apache.coyote.ajp.AjpNioProtocol"</span>;   <span class="comment">//对于ajp 使用ajpNio</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            protocolHandlerClassName = protocol;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Instantiate protocol handler</span></span><br><span class="line">        ProtocolHandler p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName); <span class="comment">//这里体现了类加载的作用之一,当tomcat发布出去后,lib包的加载能力取决于类加载器</span></span><br><span class="line">            p = (ProtocolHandler) clazz.getConstructor().newInstance();  <span class="comment">//加载不同ProtocolHandler,</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(</span><br><span class="line">                    <span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>), e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.protocolHandler = p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Default for Connector depends on this system property</span></span><br><span class="line">        setThrowOnFailure(Boolean.getBoolean(<span class="string">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/2018/10/06/tomcat/Http11NioProtocol.png" class=""><figure class="highlight java"><figcaption><span>ProtocolHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关于handler</span></span><br><span class="line"><span class="comment">//创建时 创建了 endpoint  以及ConnectionHandler</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Http11NioProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> NioEndpoint());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11JsseProtocol</span><span class="params">(AbstractJsseEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//明显这里的endpoint很重要</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractHttp11Protocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(endpoint);</span><br><span class="line">        setConnectionTimeout(Constants.DEFAULT_CONNECTION_TIMEOUT);</span><br><span class="line">        ConnectionHandler&lt;S&gt; cHandler = <span class="keyword">new</span> ConnectionHandler&lt;&gt;(<span class="keyword">this</span>); </span><br><span class="line">        setHandler(cHandler);  <span class="comment">//设置ConnectionHandler</span></span><br><span class="line">        getEndpoint().setHandler(cHandler);  <span class="comment">//endpoint.setHandler</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractProtocol</span><span class="params">(AbstractEndpoint&lt;S,?&gt; endpoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endpoint = endpoint; <span class="comment">//endpoint</span></span><br><span class="line">        setConnectionLinger(Constants.DEFAULT_CONNECTION_LINGER);</span><br><span class="line">        setTcpNoDelay(Constants.DEFAULT_TCP_NO_DELAY);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>初始化(Connector)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();  <span class="comment">//加入jmx</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (protocolHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"coyoteConnector.protocolHandlerInstantiationFailed"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize adapter</span></span><br><span class="line">        adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);  <span class="comment">//这个adapter貌似是处理servlet的</span></span><br><span class="line">        protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure parseBodyMethodsSet has a default</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == parseBodyMethodsSet) &#123;</span><br><span class="line">            setParseBodyMethods(getParseBodyMethods()); <span class="comment">//当post请求解析body</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(<span class="string">"coyoteConnector.protocolHandlerNoApr"</span>,</span><br><span class="line">                    getProtocolHandlerClassName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;</span><br><span class="line">                protocolHandler <span class="keyword">instanceof</span> AbstractHttp11JsseProtocol) &#123;</span><br><span class="line">            AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =</span><br><span class="line">                    (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;</span><br><span class="line">            <span class="keyword">if</span> (jsseProtocolHandler.isSSLEnabled() &amp;&amp;</span><br><span class="line">                    jsseProtocolHandler.getSslImplementationName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// OpenSSL is compatible with the JSSE configuration, so use it if APR is available</span></span><br><span class="line">                jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            protocolHandler.init();  <span class="comment">//protocolHandler的初始化</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"coyoteConnector.protocolHandlerInitializationFailed"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>protocolHandler的初始化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AbstractHttp11Protocol</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Upgrade protocols have to be configured first since the endpoint</span></span><br><span class="line">        <span class="comment">// init (triggered via super.init() below) uses this list to configure</span></span><br><span class="line">        <span class="comment">// the list of ALPN protocols to advertise</span></span><br><span class="line">        <span class="keyword">for</span> (UpgradeProtocol upgradeProtocol : upgradeProtocols) &#123;</span><br><span class="line">            configureUpgradeProtocol(upgradeProtocol);  <span class="comment">//如果连接器没有配置upgradeProtocol  改良的协议,那么此处无效</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//AbstractProtocol</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">            getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.init"</span>, getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Component not pre-registered so register it</span></span><br><span class="line">            oname = createObjectName();</span><br><span class="line">            <span class="keyword">if</span> (oname != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);  <span class="comment">//本身加入jmx</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.domain != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tpOname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":type=ThreadPool,name="</span> + getName());</span><br><span class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(endpoint, tpOname, <span class="keyword">null</span>);  <span class="comment">//将endpoint加入 这个玩意是个重点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                getLog().error(sm.getString( <span class="string">"abstractProtocolHandler.mbeanRegistrationFailed"</span>,</span><br><span class="line">                        tpOname, getName()), e);</span><br><span class="line">            &#125;</span><br><span class="line">            rgOname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":type=GlobalRequestProcessor,name="</span> + getName());</span><br><span class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(</span><br><span class="line">                    getHandler().getGlobal(), rgOname, <span class="keyword">null</span>);    <span class="comment">//ConnectorHandler.global 加入jmx</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (SSLHostConfig sslHostConfig : getEndpoint().findSslHostConfigs()) &#123;   <span class="comment">//默认此处应该没有数据</span></span><br><span class="line">                ObjectName sslOname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":type=SSLHostConfig,ThreadPool="</span> +</span><br><span class="line">                        getName() + <span class="string">",name="</span> + ObjectName.quote(sslHostConfig.getHostName()));</span><br><span class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(sslHostConfig, sslOname, <span class="keyword">null</span>);</span><br><span class="line">                sslOnames.add(sslOname);</span><br><span class="line">                <span class="keyword">for</span> (SSLHostConfigCertificate sslHostConfigCert : sslHostConfig.getCertificates()) &#123;</span><br><span class="line">                    ObjectName sslCertOname = <span class="keyword">new</span> ObjectName(domain +</span><br><span class="line">                            <span class="string">":type=SSLHostConfigCertificate,ThreadPool="</span> + getName() +</span><br><span class="line">                            <span class="string">",Host="</span> + ObjectName.quote(sslHostConfig.getHostName()) +</span><br><span class="line">                            <span class="string">",name="</span> + sslHostConfigCert.getType());</span><br><span class="line">                    Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(</span><br><span class="line">                            sslHostConfigCert, sslCertOname, <span class="keyword">null</span>);</span><br><span class="line">                    sslCertOnames.add(sslCertOname);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String endpointName = getName();</span><br><span class="line">        endpoint.setName(endpointName.substring(<span class="number">1</span>, endpointName.length()-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        endpoint.init(); <span class="comment">//endpoint的初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//AbstractEndpoint</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindOnInit) &#123;</span><br><span class="line">            bind();</span><br><span class="line">            bindState = BindState.BOUND_ON_INIT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这里我看的http11 所以是NioEndpoint</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initServerSocket();  <span class="comment">//初始化socket,使用的nio的api,要看一下</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize thread count defaults for acceptor, poller</span></span><br><span class="line">        <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></span><br><span class="line">            acceptorThreadCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//minimum one poller thread</span></span><br><span class="line">            pollerThreadCount = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setStopLatch(<span class="keyword">new</span> CountDownLatch(pollerThreadCount)); <span class="comment">//coutDownLatch.wait会计算内部cout,若&gt;0则该线程继续await</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">        initialiseSsl();   <span class="comment">//初始化ssl</span></span><br><span class="line"></span><br><span class="line">        selectorPool.open();  <span class="comment">//nioApi selector 关于复用器</span></span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initServerSocket</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        serverSock = ServerSocketChannel.open();  <span class="comment">//打开nioServerSocket</span></span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));  <span class="comment">//地址</span></span><br><span class="line">        serverSock.socket().bind(addr,getAcceptCount()); <span class="comment">//绑定</span></span><br><span class="line">        serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior  //并且tomcat中这个serverSock默认blocking</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//NioSelectorPool.java  selectorPool(NioEndPoint的成员)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        enabled = <span class="keyword">true</span>;</span><br><span class="line">        getSharedSelector();</span><br><span class="line">        <span class="keyword">if</span> (SHARED) &#123;</span><br><span class="line">            blockingSelector = <span class="keyword">new</span> NioBlockingSelector();</span><br><span class="line">            blockingSelector.open(getSharedSelector());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Selector <span class="title">getSharedSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (SHARED &amp;&amp; SHARED_SELECTOR == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> ( NioSelectorPool<span class="class">.<span class="keyword">class</span> ) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> ( SHARED_SELECTOR == <span class="keyword">null</span> )  &#123;</span><br><span class="line">                    SHARED_SELECTOR = Selector.open(); <span class="comment">//创建一个选择器</span></span><br><span class="line">                    log.info(<span class="string">"Using a shared selector for servlet write/read"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  SHARED_SELECTOR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//NioBlockingSelect.java 无继承的类</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Selector selector)</span> </span>&#123;</span><br><span class="line">        sharedSelector = selector;  <span class="comment">//设置seletcor</span></span><br><span class="line">        poller = <span class="keyword">new</span> BlockPoller(); <span class="comment">//这个类关键,为该类静态内部类</span></span><br><span class="line">        poller.selector = sharedSelector;</span><br><span class="line">        poller.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        poller.setName(<span class="string">"NioBlockingSelector.BlockPoller-"</span>+(++threadCounter));</span><br><span class="line">        poller.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>BlockPoller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法时BlockPoller外部类BioBlockingSelector,只有阻塞情况使用以下逻辑</span></span><br><span class="line"><span class="comment">//该函数是连接器真正向外写数据的代码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer buf, NioChannel socket, <span class="keyword">long</span> writeTimeout)</span>  <span class="comment">//阻塞方式写出逻辑</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());  <span class="comment">//获取此处这个channel对应的key</span></span><br><span class="line">        <span class="keyword">if</span> ( key == <span class="keyword">null</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Key no longer registered"</span>);</span><br><span class="line">        KeyReference reference = keyReferenceStack.pop();</span><br><span class="line">        <span class="keyword">if</span> (reference == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reference = <span class="keyword">new</span> KeyReference();</span><br><span class="line">        &#125;</span><br><span class="line">        NioSocketWrapper att = (NioSocketWrapper) key.attachment();</span><br><span class="line">        <span class="keyword">int</span> written = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> timedout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> keycount = <span class="number">1</span>; <span class="comment">//assume we can write</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis(); <span class="comment">//start the timeout timer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ( (!timedout) &amp;&amp; buf.hasRemaining()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keycount &gt; <span class="number">0</span>) &#123; <span class="comment">//only write if we were registered for a write</span></span><br><span class="line">                    <span class="keyword">int</span> cnt = socket.write(buf); <span class="comment">//write the data   我记得这个socket默认是非阻塞写出</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt == -<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br><span class="line">                    written += cnt;</span><br><span class="line">                    <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>) &#123; <span class="comment">//有数据写出则继续写</span></span><br><span class="line">                        time = System.currentTimeMillis(); <span class="comment">//reset our timeout timer</span></span><br><span class="line">                        <span class="keyword">continue</span>; <span class="comment">//we successfully wrote, try again without a selector</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( att.getWriteLatch()==<span class="keyword">null</span> || att.getWriteLatch().getCount()==<span class="number">0</span>) att.startWriteLatch(<span class="number">1</span>); <span class="comment">//设置countDown</span></span><br><span class="line">                    poller.add(att,SelectionKey.OP_WRITE,reference); <span class="comment">//加入写事件,创建一个addEvent,addEvent线程逻辑就是注册写操作到selector中</span></span><br><span class="line">                    <span class="keyword">if</span> (writeTimeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        att.awaitWriteLatch(Long.MAX_VALUE,TimeUnit.MILLISECONDS);  <span class="comment">//countDown停留到Long.MAX_VALUE毫秒,等待就是BlockPoller中的线程结束</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        att.awaitWriteLatch(writeTimeout,TimeUnit.MILLISECONDS);<span class="comment">//停留最大writeTimeout时间</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ignore) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( att.getWriteLatch()!=<span class="keyword">null</span> &amp;&amp; att.getWriteLatch().getCount()&gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//we got interrupted, but we haven't received notification from the poller.</span></span><br><span class="line">                    keycount = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//latch countdown has happened</span></span><br><span class="line">                    keycount = <span class="number">1</span>;</span><br><span class="line">                    att.resetWriteLatch();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (writeTimeout &gt; <span class="number">0</span> &amp;&amp; (keycount == <span class="number">0</span>))</span><br><span class="line">                    timedout = (System.currentTimeMillis() - time) &gt;= writeTimeout;</span><br><span class="line">            &#125; <span class="comment">//while</span></span><br><span class="line">            <span class="keyword">if</span> (timedout)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SocketTimeoutException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            poller.remove(att,SelectionKey.OP_WRITE);</span><br><span class="line">            <span class="keyword">if</span> (timedout &amp;&amp; reference.key!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                poller.cancelKey(reference.key);</span><br><span class="line">            &#125;</span><br><span class="line">            reference.key = <span class="keyword">null</span>;</span><br><span class="line">            keyReferenceStack.push(reference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> written;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//读取逻辑    </span></span><br><span class="line"><span class="comment">//代码逻辑和写相同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer buf, NioChannel socket, <span class="keyword">long</span> readTimeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line">        <span class="keyword">if</span> ( key == <span class="keyword">null</span> ) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Key no longer registered"</span>);</span><br><span class="line">        KeyReference reference = keyReferenceStack.pop();</span><br><span class="line">        <span class="keyword">if</span> (reference == <span class="keyword">null</span>) &#123;</span><br><span class="line">            reference = <span class="keyword">new</span> KeyReference();</span><br><span class="line">        &#125;</span><br><span class="line">        NioSocketWrapper att = (NioSocketWrapper) key.attachment();</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> timedout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> keycount = <span class="number">1</span>; <span class="comment">//assume we can read</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis(); <span class="comment">//start the timeout timer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(!timedout) &#123;</span><br><span class="line">                <span class="keyword">if</span> (keycount &gt; <span class="number">0</span>) &#123; <span class="comment">//only read if we were registered for a read</span></span><br><span class="line">                    read = socket.read(buf);</span><br><span class="line">                    <span class="keyword">if</span> (read != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( att.getReadLatch()==<span class="keyword">null</span> || att.getReadLatch().getCount()==<span class="number">0</span>) att.startReadLatch(<span class="number">1</span>);</span><br><span class="line">                    poller.add(att,SelectionKey.OP_READ, reference);</span><br><span class="line">                    <span class="keyword">if</span> (readTimeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        att.awaitReadLatch(Long.MAX_VALUE, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        att.awaitReadLatch(readTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException ignore) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( att.getReadLatch()!=<span class="keyword">null</span> &amp;&amp; att.getReadLatch().getCount()&gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//we got interrupted, but we haven't received notification from the poller.</span></span><br><span class="line">                    keycount = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//latch countdown has happened</span></span><br><span class="line">                    keycount = <span class="number">1</span>;</span><br><span class="line">                    att.resetReadLatch();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (readTimeout &gt;= <span class="number">0</span> &amp;&amp; (keycount == <span class="number">0</span>))</span><br><span class="line">                    timedout = (System.currentTimeMillis() - time) &gt;= readTimeout;</span><br><span class="line">            &#125; <span class="comment">//while</span></span><br><span class="line">            <span class="keyword">if</span> (timedout)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SocketTimeoutException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            poller.remove(att,SelectionKey.OP_READ);</span><br><span class="line">            <span class="keyword">if</span> (timedout &amp;&amp; reference.key!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                poller.cancelKey(reference.key);</span><br><span class="line">            &#125;</span><br><span class="line">            reference.key = <span class="keyword">null</span>;</span><br><span class="line">            keyReferenceStack.push(reference);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> read;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//该类是NioBlockingSelecotr内部,NioSelectorPool持有NioBlockingSelecotr对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实际上此类的作用用来处理当进行读写操作时,选择器对读写channel的管理NioBlockingSelecotr这套逻辑,可以选择不使用,而使用</span></span><br><span class="line"><span class="comment">//NioSelectorPool的读写逻辑,就没有selector</span></span><br><span class="line"><span class="comment">//逻辑就是当读写channel进行一次操作后加入selector中,等待下一次读写,默认情况是通过</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockPoller</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (run) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    events();  <span class="comment">//每次循环将所有有的事件取出并执行,事件轮询</span></span><br><span class="line">                    <span class="keyword">int</span> keyCount = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> i = wakeupCounter.get();</span><br><span class="line">                        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)  <span class="comment">//根据这个原子性int值,决定立即select还是超时1s</span></span><br><span class="line">                            keyCount = selector.selectNow();</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            wakeupCounter.set(-<span class="number">1</span>);</span><br><span class="line">                            keyCount = selector.select(<span class="number">1000</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        wakeupCounter.set(<span class="number">0</span>);  <span class="comment">//当select返回counter设为0</span></span><br><span class="line">                        <span class="keyword">if</span> (!run) <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">catch</span> ( NullPointerException x ) &#123;</span><br><span class="line">                        <span class="comment">//sun bug 5076772 on windows JDK 1.5</span></span><br><span class="line">                        <span class="keyword">if</span> (selector==<span class="keyword">null</span>) <span class="keyword">throw</span> x;</span><br><span class="line">                        <span class="keyword">if</span> ( log.isDebugEnabled() ) log.debug(<span class="string">"Possibly encountered sun bug 5076772 on windows JDK 1.5"</span>,x);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> ( CancelledKeyException x ) &#123;</span><br><span class="line">                        <span class="comment">//sun bug 5076772 on windows JDK 1.5</span></span><br><span class="line">                        <span class="keyword">if</span> ( log.isDebugEnabled() ) log.debug(<span class="string">"Possibly encountered sun bug 5076772 on windows JDK 1.5"</span>,x);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        ExceptionUtils.handleThrowable(x);</span><br><span class="line">                        log.error(<span class="string">""</span>,x);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().iterator() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Walk through the collection of ready keys and dispatch</span></span><br><span class="line">                    <span class="comment">// any active event.</span></span><br><span class="line">                    <span class="keyword">while</span> (run &amp;&amp; iterator != <span class="keyword">null</span> &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">                        SelectionKey sk = iterator.next();</span><br><span class="line">                        NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();  <span class="comment">//返回与该key附加的对象</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            iterator.remove();</span><br><span class="line">                            sk.interestOps(sk.interestOps() &amp; (~sk.readyOps()));</span><br><span class="line">                            <span class="keyword">if</span> ( sk.isReadable() ) &#123;</span><br><span class="line">                                countDown(attachment.getReadLatch());  <span class="comment">//这里就是一个countdown逻辑,代码到了这里说明此key是readkey,减少count,上边的read代码的await可以执行,继续进行read逻辑</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (sk.isWritable()) &#123;</span><br><span class="line">                                countDown(attachment.getWriteLatch());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">catch</span> (CancelledKeyException ckx) &#123;</span><br><span class="line">                            sk.cancel();</span><br><span class="line">                            countDown(attachment.getReadLatch());</span><br><span class="line">                            countDown(attachment.getWriteLatch());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="comment">//while</span></span><br><span class="line">                &#125;<span class="keyword">catch</span> ( Throwable t ) &#123;</span><br><span class="line">                    log.error(<span class="string">""</span>,t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            events.clear();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.selectNow();<span class="comment">//cancel all remaining keys</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>( Exception ignore ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled())log.debug(<span class="string">""</span>,ignore);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.close();<span class="comment">//Close the connector</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>( Exception ignore ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled())log.debug(<span class="string">""</span>,ignore);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">(CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> ( latch == <span class="keyword">null</span> ) <span class="keyword">return</span>;</span><br><span class="line">            latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下边三个类都是poller的私有子类,为了完成注册,取消</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableAdd</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> SocketChannel ch;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> NioSocketWrapper key;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ops;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> KeyReference ref;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">RunnableAdd</span><span class="params">(SocketChannel ch, NioSocketWrapper key, <span class="keyword">int</span> ops, KeyReference ref)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.ch = ch;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.ops = ops;</span><br><span class="line">                <span class="keyword">this</span>.ref = ref;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SelectionKey sk = ch.keyFor(selector);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sk == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        sk = ch.register(selector, ops, key);  <span class="comment">//附加key就是此处加上的</span></span><br><span class="line">                        ref.key = sk;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sk.isValid()) &#123;</span><br><span class="line">                        cancel(sk, key, ops);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sk.interestOps(sk.interestOps() | ops);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancelledKeyException cx) &#123;</span><br><span class="line">                    cancel(sk, key, ops);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClosedChannelException cx) &#123;</span><br><span class="line">                    cancel(sk, key, ops);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableRemove</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> SocketChannel ch;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> NioSocketWrapper key;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ops;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">RunnableRemove</span><span class="params">(SocketChannel ch, NioSocketWrapper key, <span class="keyword">int</span> ops)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.ch = ch;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">                <span class="keyword">this</span>.ops = ops;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                SelectionKey sk = ch.keyFor(selector);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sk == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (SelectionKey.OP_WRITE==(ops&amp;SelectionKey.OP_WRITE)) countDown(key.getWriteLatch());</span><br><span class="line">                        <span class="keyword">if</span> (SelectionKey.OP_READ==(ops&amp;SelectionKey.OP_READ))countDown(key.getReadLatch());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sk.isValid()) &#123;</span><br><span class="line">                            sk.interestOps(sk.interestOps() &amp; (~ops));</span><br><span class="line">                            <span class="keyword">if</span> (SelectionKey.OP_WRITE==(ops&amp;SelectionKey.OP_WRITE)) countDown(key.getWriteLatch());</span><br><span class="line">                            <span class="keyword">if</span> (SelectionKey.OP_READ==(ops&amp;SelectionKey.OP_READ))countDown(key.getReadLatch());</span><br><span class="line">                            <span class="keyword">if</span> (sk.interestOps()==<span class="number">0</span>) &#123;</span><br><span class="line">                                sk.cancel();</span><br><span class="line">                                sk.attach(<span class="keyword">null</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            sk.cancel();</span><br><span class="line">                            sk.attach(<span class="keyword">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (CancelledKeyException cx) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sk!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                        sk.cancel();</span><br><span class="line">                        sk.attach(<span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableCancel</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> SelectionKey key;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">RunnableCancel</span><span class="params">(SelectionKey key)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.key = key;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                key.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;   </span><br></pre></td></tr></table></figure><ul><li>start阶段</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//AbstarctProtocol,connector在start_pre状态下没有监听器</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getLog().isInfoEnabled()) &#123;</span><br><span class="line">            getLog().info(sm.getString(<span class="string">"abstractProtocolHandler.start"</span>, getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        endpoint.start(); <span class="comment">//真正的重点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start async timeout thread</span></span><br><span class="line">        asyncTimeout = <span class="keyword">new</span> AsyncTimeout();</span><br><span class="line">        Thread timeoutThread = <span class="keyword">new</span> Thread(asyncTimeout, getNameInternal() + <span class="string">"-AsyncTimeout"</span>);</span><br><span class="line">        <span class="keyword">int</span> priority = endpoint.getThreadPriority();</span><br><span class="line">        <span class="keyword">if</span> (priority &lt; Thread.MIN_PRIORITY || priority &gt; Thread.MAX_PRIORITY) &#123;</span><br><span class="line">            priority = Thread.NORM_PRIORITY;</span><br><span class="line">        &#125;</span><br><span class="line">        timeoutThread.setPriority(priority);</span><br><span class="line">        timeoutThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        timeoutThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//NioEndPoint </span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">            running = <span class="keyword">true</span>;</span><br><span class="line">            paused = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//           SynchronizedStack 是tomcat实现的简单stack,动态数组,操作都是同步函数</span></span><br><span class="line">            processorCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,  <span class="comment">//默认值都是128</span></span><br><span class="line">                    socketProperties.getProcessorCache());  <span class="comment">//处理器最大500</span></span><br><span class="line">            eventCache = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                            socketProperties.getEventCache()); <span class="comment">//事件最大500</span></span><br><span class="line">            nioChannels = <span class="keyword">new</span> SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,</span><br><span class="line">                    socketProperties.getBufferPool()); <span class="comment">//通道最大500</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Create worker collection</span></span><br><span class="line">            <span class="keyword">if</span> ( getExecutor() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">                createExecutor();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            initializeConnectionLatch();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start poller threads</span></span><br><span class="line">            pollers = <span class="keyword">new</span> Poller[getPollerThreadCount()]; <span class="comment">//创建并启动轮询线程,代码放在机制部分,太长了</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;pollers.length; i++) &#123;</span><br><span class="line">                pollers[i] = <span class="keyword">new</span> Poller();</span><br><span class="line">                Thread pollerThread = <span class="keyword">new</span> Thread(pollers[i], getName() + <span class="string">"-ClientPoller-"</span>+i);</span><br><span class="line">                pollerThread.setPriority(threadPriority);</span><br><span class="line">                pollerThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">                pollerThread.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            startAcceptorThreads();<span class="comment">//启动接受器线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建线程池对象ThreadPoolExecutor这也是tomcat实现的</span></span><br><span class="line">    <span class="comment">//如果按照一般线程池来理解,那么这个结构就是不停执行的线程从任务队列中不断取task的过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">        TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">        TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</span><br><span class="line">        executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">        taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="7-Context"><a class="header-anchor" href="#7-Context">¶</a>7.Context</h5><p>Context的标准实现为StandardContext, 代表着一个web项目,在HostConfig监听器创建</p><h4 id="各部分作用"><a class="header-anchor" href="#各部分作用">¶</a>各部分作用</h4><ol><li>LifecycleMBeanBase</li></ol><figure class="highlight java"><figcaption><span>initInternal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"><span class="comment">//该函数的作用就是将当前对象加入到jmx中</span></span><br><span class="line"><span class="comment">//并且该类仅仅实现了init阶段</span></span><br><span class="line">        <span class="comment">// If oname is not null then registration has already happened via</span></span><br><span class="line">        <span class="comment">// preRegister().</span></span><br><span class="line">        <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mserver = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">            oname = register(<span class="keyword">this</span>, getObjectNameKeyProperties());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="监听器"><a class="header-anchor" href="#监听器">¶</a>监听器</h4><p>LifecycleListener子类,在life组件各个生命周期根据事件触发</p><h5 id="VersionLoggerListener"><a class="header-anchor" href="#VersionLoggerListener">¶</a>VersionLoggerListener</h5> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印日志,在Server.init触发 条件</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line">  BEFORE_INIT_EVENT</span><br><span class="line">       <span class="keyword">if</span> (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) &#123;</span><br><span class="line">           log();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="AprLifecycleListener"><a class="header-anchor" href="#AprLifecycleListener">¶</a>AprLifecycleListener</h5><figure class="highlight java"><figcaption><span>apr</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发时间: 由Server.init触发,当正确配置,并且本地有jni库的情况,就会加载apr模式,并且后边会创建apr io</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123; Lifecycle.BEFORE_INIT_EVENT</span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                init(); <span class="comment">//加载tcn本地库 当不能加载时 aprAvailable保持false</span></span><br><span class="line">                <span class="keyword">for</span> (String msg : initInfoLogMessages) &#123;</span><br><span class="line">                    log.info(msg);</span><br><span class="line">                &#125;</span><br><span class="line">                initInfoLogMessages.clear();</span><br><span class="line">                <span class="keyword">if</span> (aprAvailable) &#123;  <span class="comment">//只有init中加载了库,才会导致此处有效,也影响了protocolHandler的创建</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initializeSSL();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                        t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class="line">                        ExceptionUtils.handleThrowable(t);</span><br><span class="line">                        log.error(sm.getString(<span class="string">"aprListener.sslInit"</span>), t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Failure to initialize FIPS mode is fatal</span></span><br><span class="line">                <span class="keyword">if</span> (!(<span class="keyword">null</span> == FIPSMode || <span class="string">"off"</span>.equalsIgnoreCase(FIPSMode)) &amp;&amp; !isFIPSModeActive()) &#123;</span><br><span class="line">                    Error e = <span class="keyword">new</span> Error(</span><br><span class="line">                            sm.getString(<span class="string">"aprListener.initializeFIPSFailed"</span>));</span><br><span class="line">                    <span class="comment">// Log here, because thrown error might be not logged</span></span><br><span class="line">                    log.fatal(e.getMessage(), e);</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Lifecycle.AFTER_DESTROY_EVENT.equals(event.getType())) &#123;  <span class="comment">//destroy 时触发</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!aprAvailable) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;   <span class="comment">//一般不是apr模式,就没有事情发生</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    terminateAPR();  <span class="comment">//这里是Library的native函数调用,也就是说library貌似就是控制tcn native的</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    t = ExceptionUtils.unwrapInvocationTargetException(t);</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    log.info(sm.getString(<span class="string">"aprListener.aprDestroy"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//这里 init  和terminateAPR 都是调用Library这个类的</span></span><br></pre></td></tr></table></figure><h5 id="JreMemoryLeakPreventionListener"><a class="header-anchor" href="#JreMemoryLeakPreventionListener">¶</a>JreMemoryLeakPreventionListener</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器是用来防止某些jre类的加载导致对应类加载器无法被回收的情况</span></span><br><span class="line"><span class="comment">//首先tomcat的类加载器结构为 comm  server shaded 以及webAppclassLoader</span></span><br><span class="line"><span class="comment">//1.内存泄漏的原因:  由于某个对象引用链不断开,这里说的就是webAppClassLoader ||由于锁文件的导致,具体发生在urlConnection的缓冲机制</span></span><br><span class="line"><span class="comment">//2.在tomcat加载某些类 如:DriverManager 会由于该对象加载之后在java程序结束前都是以单例存在,而任意对象加载后会引用其类加载器对象,这就导致了加载器webAppClassLoader无法被回收</span></span><br><span class="line"><span class="comment">// 如:Disposer类被加载后会启动一个循环线程,也将导致webAppClassLoader无法被回收</span></span><br><span class="line"><span class="comment">//因此tomcat的解决方式是,在使用webAppClassLoader前使用系统类加载器将这些类加载一次,后边使用就不会发生这些事情,使用的时机就是Server.init触发的监听器</span></span><br><span class="line">  <span class="comment">//这里激活函数我没有全部截取</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialise these classes when Tomcat starts</span></span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.BEFORE_INIT_EVENT.equals(event.getType())) &#123;</span><br><span class="line"></span><br><span class="line">            ClassLoader loader = Thread.currentThread().getContextClassLoader(); </span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Use the system classloader as the victim for all this</span></span><br><span class="line">                <span class="comment">// ClassLoader pinning we're about to do.</span></span><br><span class="line">                Thread.currentThread().setContextClassLoader(</span><br><span class="line">                        ClassLoader.getSystemClassLoader());   <span class="comment">//设置系统类加载器为上下文加载器</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * First call to this loads all drivers in the current class</span></span><br><span class="line"><span class="comment">                 * loader</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (driverManagerProtection) &#123;</span><br><span class="line">                    DriverManager.getDrivers(); <span class="comment">//加载DriverManager</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Trigger the creation of the AWT (AWT-Windows, AWT-XAWT,</span></span><br><span class="line">                <span class="comment">// etc.) thread.</span></span><br><span class="line">                <span class="comment">// Note this issue is fixed in Java 8 update 05 onwards.</span></span><br><span class="line">                <span class="keyword">if</span> (awtThreadProtection &amp;&amp; !JreCompat.isJre9Available()) &#123;</span><br><span class="line">                    java.awt.Toolkit.getDefaultToolkit();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Several components end up calling</span></span><br><span class="line"><span class="comment">                 * sun.misc.GC.requestLatency(long) which creates a daemon</span></span><br><span class="line"><span class="comment">                 * thread without setting the TCCL.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * Those libraries / components known to trigger memory leaks</span></span><br><span class="line"><span class="comment">                 * due to eventual calls to requestLatency(long) are:</span></span><br><span class="line"><span class="comment">                 * - javax.management.remote.rmi.RMIConnectorServer.start()</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * Note: Long.MAX_VALUE is a special case that causes the thread</span></span><br><span class="line"><span class="comment">                 *       to terminate</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * Fixed in Java 9 onwards (from early access build 130)</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (gcDaemonProtection &amp;&amp; !JreCompat.isJre9Available()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Class&lt;?&gt; clazz = Class.forName(<span class="string">"sun.misc.GC"</span>);</span><br><span class="line">                        Method method = clazz.getDeclaredMethod(</span><br><span class="line">                                <span class="string">"requestLatency"</span>,</span><br><span class="line">                                <span class="keyword">new</span> Class[] &#123;<span class="keyword">long</span><span class="class">.<span class="keyword">class</span>&#125;)</span>;</span><br><span class="line">                        method.invoke(<span class="keyword">null</span>, Long.valueOf(Long.MAX_VALUE - <span class="number">1</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (JreVendor.IS_ORACLE_JVM) &#123;</span><br><span class="line">                            log.error(sm.getString(</span><br><span class="line">                                    <span class="string">"jreLeakListener.gcDaemonFail"</span>), e);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            log.debug(sm.getString(</span><br><span class="line">                                    <span class="string">"jreLeakListener.gcDaemonFail"</span>), e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SecurityException | NoSuchMethodException | IllegalArgumentException |</span><br><span class="line">                            IllegalAccessException e) &#123;</span><br><span class="line">                        log.error(sm.getString(<span class="string">"jreLeakListener.gcDaemonFail"</span>),</span><br><span class="line">                                e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                        ExceptionUtils.handleThrowable(e.getCause());</span><br><span class="line">                        log.error(sm.getString(<span class="string">"jreLeakListener.gcDaemonFail"</span>),</span><br><span class="line">                                e);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">  <span class="keyword">if</span> (tokenPollerProtection &amp;&amp; !JreCompat.isJre9Available()) &#123;</span><br><span class="line">                    java.security.Security.getProviders();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Several components end up opening JarURLConnections without</span></span><br><span class="line"><span class="comment">                 * first disabling caching. This effectively locks the file.</span></span><br><span class="line"><span class="comment">                 * Whilst more noticeable and harder to ignore on Windows, it</span></span><br><span class="line"><span class="comment">                 * affects all operating systems.</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * Those libraries/components known to trigger this issue</span></span><br><span class="line"><span class="comment">                 * include:</span></span><br><span class="line"><span class="comment">                 * - log4j versions 1.2.15 and earlier</span></span><br><span class="line"><span class="comment">                 * - javax.xml.bind.JAXBContext.newInstance()</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * https://bugs.openjdk.java.net/browse/JDK-8163449</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set the default URL caching policy to not to cache</span></span><br><span class="line">                <span class="keyword">if</span> (urlCacheProtection) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// Doesn't matter that this JAR doesn't exist - just as</span></span><br><span class="line">                        <span class="comment">// long as the URL is well-formed</span></span><br><span class="line">                        URL url = <span class="keyword">new</span> URL(<span class="string">"jar:file://dummy.jar!/"</span>);</span><br><span class="line">                        URLConnection uConn = url.openConnection();</span><br><span class="line">                        uConn.setDefaultUseCaches(<span class="keyword">false</span>); <span class="comment">//取消缓冲机制</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">                        log.error(sm.getString(</span><br><span class="line">                                <span class="string">"jreLeakListener.jarUrlConnCacheFail"</span>), e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        log.error(sm.getString(</span><br><span class="line">                                <span class="string">"jreLeakListener.jarUrlConnCacheFail"</span>), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="GlobalResourcesLifecycleListener"><a class="header-anchor" href="#GlobalResourcesLifecycleListener">¶</a>GlobalResourcesLifecycleListener</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发时机 start 和stop</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            component = event.getLifecycle();</span><br><span class="line">            createMBeans();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Lifecycle.STOP_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            destroyMBeans();</span><br><span class="line">            component = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createMBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Look up our global naming context</span></span><br><span class="line">        Context context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            context = (Context) (<span class="keyword">new</span> InitialContext()).lookup(<span class="string">"java:/"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            log.error(<span class="string">"No global naming context defined for server"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Recurse through the defined global JNDI resources context</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createMBeans(<span class="string">""</span>, context);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Exception processing Global JNDI Resources"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="ThreadLocalLeakPreventionListener"><a class="header-anchor" href="#ThreadLocalLeakPreventionListener">¶</a>ThreadLocalLeakPreventionListener</h5><figure class="highlight java"><figcaption><span>ThreadLocalLeakPreventionListener</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器作用是处理由ThreadLocal 引起的内存泄漏问题</span></span><br><span class="line"><span class="comment">//原因: 当连接器获取req后,会创建执行器Process线程,参照EndPoint源码,此处如果是通过线程池创建的,那么当该线程一直继续进行后续处理,获取到web Context后,如果此线程中使用了ThreadLocal&lt;AA&gt;,当该context重新创建后,会通过重新创建</span></span><br><span class="line"><span class="comment">//一个 webAppClassLoader 来加载,而由于线程池的实现是将线程对象不断缓冲的模式,因此之前的Threadlocal引用,导致了之前webApploader不能释放</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalLeakPreventionListener</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ContainerListener</span> </span>&#123; <span class="comment">//触发清理时机在任意context的销毁阶段</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123; <span class="comment">//该监听器开始位于Server中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Lifecycle lifecycle = event.getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (Lifecycle.AFTER_START_EVENT.equals(event.getType()) &amp;&amp;</span><br><span class="line">                    lifecycle <span class="keyword">instanceof</span> Server) &#123;</span><br><span class="line">                <span class="comment">// when the server starts, we register ourself as listener for</span></span><br><span class="line">                <span class="comment">// all context</span></span><br><span class="line">                <span class="comment">// as well as container event listener so that we know when new</span></span><br><span class="line">                <span class="comment">// Context are deployed</span></span><br><span class="line">                Server server = (Server) lifecycle;</span><br><span class="line">                registerListenersForServer(server);  <span class="comment">//当server.start后,说明context已经部署,一层层的加入监听器</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Lifecycle.BEFORE_STOP_EVENT.equals(event.getType()) &amp;&amp;</span><br><span class="line">                    lifecycle <span class="keyword">instanceof</span> Server) &#123;</span><br><span class="line">                <span class="comment">// Server is shutting down, so thread pools will be shut down so</span></span><br><span class="line">                <span class="comment">// there is no need to clean the threads</span></span><br><span class="line">                serverStopping = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Lifecycle.AFTER_STOP_EVENT.equals(event.getType()) &amp;&amp;</span><br><span class="line">                    lifecycle <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                stopIdleThreads((Context) lifecycle); <span class="comment">//当context.stop后进行处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            String msg =</span><br><span class="line">                sm.getString(</span><br><span class="line">                    <span class="string">"threadLocalLeakPreventionListener.lifecycleEvent.error"</span>,</span><br><span class="line">                    event);</span><br><span class="line">            log.error(msg, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerEvent</span><span class="params">(ContainerEvent event)</span> </span>&#123; <span class="comment">//当添加子容器,或移除,进行监听器注册/去除</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String type = event.getType();</span><br><span class="line">            <span class="keyword">if</span> (Container.ADD_CHILD_EVENT.equals(type)) &#123;</span><br><span class="line">                processContainerAddChild(event.getContainer(),</span><br><span class="line">                    (Container) event.getData());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Container.REMOVE_CHILD_EVENT.equals(type)) &#123;</span><br><span class="line">                processContainerRemoveChild(event.getContainer(),</span><br><span class="line">                    (Container) event.getData());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            String msg =</span><br><span class="line">                sm.getString(</span><br><span class="line">                    <span class="string">"threadLocalLeakPreventionListener.containerEvent.error"</span>,</span><br><span class="line">                    event);</span><br><span class="line">            log.error(msg, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerListenersForServer</span><span class="params">(Server server)</span> </span>&#123; <span class="comment">//逐层注册</span></span><br><span class="line">        <span class="keyword">for</span> (Service service : server.findServices()) &#123;</span><br><span class="line">            Engine engine = service.getContainer();</span><br><span class="line">            engine.addContainerListener(<span class="keyword">this</span>);</span><br><span class="line">            registerListenersForEngine(engine);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerListenersForEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Container hostContainer : engine.findChildren()) &#123;</span><br><span class="line">            Host host = (Host) hostContainer;</span><br><span class="line">            host.addContainerListener(<span class="keyword">this</span>);</span><br><span class="line">            registerListenersForHost(host);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerListenersForHost</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Container contextContainer : host.findChildren()) &#123;</span><br><span class="line">            Context context = (Context) contextContainer;</span><br><span class="line">            registerContextListener(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerContextListener</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        context.addLifecycleListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processContainerAddChild</span><span class="params">(Container parent, Container child)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            log.debug(<span class="string">"Process addChild[parent="</span> + parent + <span class="string">",child="</span> + child +</span><br><span class="line">                <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">            registerContextListener((Context) child);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Engine) &#123;</span><br><span class="line">            registerListenersForEngine((Engine) child);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Host) &#123;</span><br><span class="line">            registerListenersForHost((Host) child);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processContainerRemoveChild</span><span class="params">(Container parent,</span></span></span><br><span class="line"><span class="function"><span class="params">        Container child)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            log.debug(<span class="string">"Process removeChild[parent="</span> + parent + <span class="string">",child="</span> +</span><br><span class="line">                child + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">            Context context = (Context) child;</span><br><span class="line">            context.removeLifecycleListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Host || child <span class="keyword">instanceof</span> Engine) &#123;</span><br><span class="line">            child.removeContainerListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Updates each ThreadPoolExecutor with the current time, which is the time</span></span><br><span class="line"><span class="comment">     * when a context is being stopped.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     *            the context being stopped, used to discover all the Connectors</span></span><br><span class="line"><span class="comment">     *            of its parent Service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopIdleThreads</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (serverStopping) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(context <span class="keyword">instanceof</span> StandardContext) ||</span><br><span class="line">            !((StandardContext) context).getRenewThreadsWhenStoppingContext()) &#123;</span><br><span class="line">            log.debug(<span class="string">"Not renewing threads when the context is stopping. "</span></span><br><span class="line">                + <span class="string">"It is not configured to do it."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Engine engine = (Engine) context.getParent().getParent();</span><br><span class="line">        Service service = engine.getService();</span><br><span class="line">        Connector[] connectors = service.findConnectors();</span><br><span class="line">        <span class="keyword">if</span> (connectors != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Connector connector : connectors) &#123;</span><br><span class="line">                ProtocolHandler handler = connector.getProtocolHandler();</span><br><span class="line">                Executor executor = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    executor = handler.getExecutor();  <span class="comment">//这个线程池实际上就是Endpoint中的线程池,该线程池用来创建执行器线程来处理请求</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">                    ThreadPoolExecutor threadPoolExecutor =</span><br><span class="line">                        (ThreadPoolExecutor) executor;</span><br><span class="line">                    threadPoolExecutor.contextStopping(); <span class="comment">//处理线程池,处理的方式就是阻塞线程池,并且停止线程池中线程,就能使的引用链断开</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> StandardThreadExecutor) &#123;</span><br><span class="line">                    StandardThreadExecutor stdThreadExecutor =</span><br><span class="line">                        (StandardThreadExecutor) executor;</span><br><span class="line">                    stdThreadExecutor.contextStopping();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="NamingContextListener"><a class="header-anchor" href="#NamingContextListener">¶</a>NamingContextListener</h5><figure class="highlight java"><figcaption><span>NamingContextListener</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器作用用于作为生命监听器和容器监听器</span></span><br><span class="line"><span class="comment">//1.作为生命监听器处理Server和Context中的naming资源,向jndi中注册,以及当生命组件destory时进行jndi解除,关于tomcat中jdni的实现部分在机制部分说明</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingContextListener</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span>, <span class="title">ContainerListener</span>, <span class="title">PropertyChangeListener</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        container = event.getLifecycle();</span><br><span class="line">        <span class="comment">//当Server 或者 context 分别获取内部的namingResouces,以及token(用来标识使用的Object对象)</span></span><br><span class="line">        <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context)</span><br><span class="line">        &#123;</span><br><span class="line">            namingResources = ((Context) container).getNamingResources();</span><br><span class="line">            token = ((Context) container).getNamingToken();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Server)</span><br><span class="line">        &#123;</span><br><span class="line">            namingResources = ((Server) container).getGlobalNamingResources();</span><br><span class="line">            token = ((Server) container).getNamingToken();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Lifecycle.CONFIGURE_START_EVENT.equals(event.getType()))</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (initialized)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Hashtable&lt;String, Object&gt; contextEnv = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">                namingContext = <span class="keyword">new</span> NamingContext(contextEnv, getName()); <span class="comment">//第一次创建上线文, 环境map为空,context对应的路径名为"/",就是表示根节点</span></span><br><span class="line">                <span class="comment">//ContextAccessController| ContextBindings这两个类中的变量都是map,并且都是static,这两个类是用来做标识给jndi系统使用的</span></span><br><span class="line">                ContextAccessController.setSecurityToken(getName(), token); <span class="comment">//使用验证map,</span></span><br><span class="line">                ContextAccessController.setSecurityToken(container, token);</span><br><span class="line">                <span class="comment">//Hashtable&lt;Object,Context&gt; objectBindings(container,namingContext) ,token是用来检查SecurityToken的</span></span><br><span class="line">                ContextBindings.bindContext(container, namingContext, token); <span class="comment">//验证 container,token存在,put container,namingContext</span></span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">                &#123;</span><br><span class="line">                    log.debug(<span class="string">"Bound "</span> + container);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Configure write when read-only behaviour</span></span><br><span class="line">                namingContext.setExceptionOnFailedWrite(getExceptionOnFailedWrite());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Setting the context in read/write mode</span></span><br><span class="line">                ContextAccessController.setWritable(getName(), token);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    createNamingContext(); <span class="comment">//进行jndi的初始化以及bind,目前看来加入的新的子context 或者ref都是存在于上层context中</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"naming.namingContextCreationFailed"</span>, e));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                namingResources.addPropertyChangeListener(<span class="keyword">this</span>);  <span class="comment">//添加改变监听器</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Binding the naming context to the class loader</span></span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Setting the context in read only mode</span></span><br><span class="line">                    ContextAccessController.setReadOnly(getName());</span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//验证container,token  put(ClassLoader,container-&gt;context) put(ClassLoader,container)</span></span><br><span class="line">                        <span class="comment">// 将类加载器webAppClassLoader和context以及对应tomcat context联系</span></span><br><span class="line">                        ContextBindings.bindClassLoader(container, token, ((Context) container).getLoader().getClassLoader());  <span class="comment">//完成不同context的隔离工作</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        log.error(sm.getString(<span class="string">"naming.bindFailed"</span>, e));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Server)</span><br><span class="line">                &#123;</span><br><span class="line">                    org.apache.naming.factory.ResourceLinkFactory.setGlobalContext(namingContext); <span class="comment">//ResourceLink设置全局context,应该是该tomcat context访问全局资源使用的</span></span><br><span class="line">                    <span class="keyword">try</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ContextBindings.bindClassLoader(container, token, <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">                        <span class="comment">//测试</span></span><br><span class="line">                        <span class="comment">// env map 使用该给NamingManager创建工厂使用的变量,tomcat在系统初始化的时候将:</span></span><br><span class="line">                        <span class="comment">// Context.INITIAL_CONTEXT_FACTORY=org.apache.naming.java.javaURLContextFactory</span></span><br><span class="line">                        <span class="comment">// Context.URL_PKG_PREFIXES=org.apache.naming 放到了system.props中,当这两个变量被InitialContext对象创建时调用init(),被NamingManager使用</span></span><br><span class="line">                        <span class="comment">// 将defaultFactory设置了</span></span><br><span class="line">                        InitialContext initialContext = <span class="keyword">new</span> InitialContext();</span><br><span class="line">                        initialContext.lookup(<span class="string">"java:UserDatabase"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">                    &#123;</span><br><span class="line">                        log.error(sm.getString(<span class="string">"naming.bindFailed"</span>, e));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (container <span class="keyword">instanceof</span> StandardServer)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ((StandardServer) container).setGlobalNamingContext(namingContext);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Regardless of success, so that we can do cleanup on configure_stop</span></span><br><span class="line">                initialized = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Lifecycle.CONFIGURE_STOP_EVENT.equals(event.getType()))  <span class="comment">//卸载</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!initialized)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Setting the context in read/write mode</span></span><br><span class="line">                ContextAccessController.setWritable(getName(), token);</span><br><span class="line">                ContextBindings.unbindContext(container, token);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context)</span><br><span class="line">                &#123;</span><br><span class="line">                    ContextBindings.unbindClassLoader(container, token, ((Context) container).getLoader().getClassLoader());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Server)</span><br><span class="line">                &#123;</span><br><span class="line">                    namingResources.removePropertyChangeListener(<span class="keyword">this</span>);</span><br><span class="line">                    ContextBindings.unbindClassLoader(container, token, <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ContextAccessController.unsetSecurityToken(getName(), token);</span><br><span class="line">                ContextAccessController.unsetSecurityToken(container, token);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// unregister mbeans.</span></span><br><span class="line">                <span class="keyword">if</span> (!objectNames.isEmpty())</span><br><span class="line">                &#123;</span><br><span class="line">                    Collection&lt;ObjectName&gt; names = objectNames.values();</span><br><span class="line">                    Registry registry = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">for</span> (ObjectName objectName : names)</span><br><span class="line">                    &#123;</span><br><span class="line">                        registry.unregisterComponent(objectName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                javax.naming.Context global = getGlobalNamingContext();</span><br><span class="line">                <span class="keyword">if</span> (global != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ResourceLinkFactory.deregisterGlobalResourceAccess(global);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                objectNames.clear();</span><br><span class="line"></span><br><span class="line">                namingContext = <span class="keyword">null</span>;</span><br><span class="line">                envCtx = <span class="keyword">null</span>;</span><br><span class="line">                compCtx = <span class="keyword">null</span>;</span><br><span class="line">                initialized = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create and initialize the JNDI naming context.</span></span><br><span class="line"><span class="comment">     * tomcat jdni 的过程:</span></span><br><span class="line"><span class="comment">     * 都在server.xml中配置,也就是作为 Server全局资源并且在任意context中配置ref进行使用|或者作为Context中局部资源</span></span><br><span class="line"><span class="comment">     * 1.创建nameRersouce</span></span><br><span class="line"><span class="comment">     *  Server中namingResource创建于构造函数, context namingResource创建参考</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.apache.catalina.startup.SetNextNamingRule#end(String, String) 导致在server.xml中配置的context内部namingResource的加载</span></span><br><span class="line"><span class="comment">     * 2.通过namingContextListener作为生命周期监听器调用该函数,将nameRersouce中资源进行注册</span></span><br><span class="line"><span class="comment">     *  Server的监听器在构造创建 ,context的在startInternal创建,并激活</span></span><br><span class="line"><span class="comment">     * --------</span></span><br><span class="line"><span class="comment">     * 至少在tomcat9中不存在在context.xml中配置任意web项目,具体源码参照Hostconfig解析xml过程</span></span><br><span class="line"><span class="comment">     * tomcat9支持在web.xml中配置局部资源,解析过程参见context的部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createNamingContext</span><span class="params">()</span>  <span class="comment">//该函数是Server /Context 这两种全局和局部jndi进行bind的入口,该函数具体对不同资源进行注册,特殊的有ref类型</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NamingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating the comp subcontext</span></span><br><span class="line">        <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Server)</span><br><span class="line">        &#123;</span><br><span class="line">            compCtx = namingContext;</span><br><span class="line">            envCtx = namingContext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            compCtx = namingContext.createSubcontext(<span class="string">"comp"</span>);</span><br><span class="line">            envCtx = compCtx.createSubcontext(<span class="string">"env"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">        &#123;</span><br><span class="line">            log.debug(<span class="string">"Creating JNDI naming context"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (namingResources == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            namingResources = <span class="keyword">new</span> NamingResourcesImpl();</span><br><span class="line">            namingResources.setContainer(container);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resource links</span></span><br><span class="line">        ContextResourceLink[] resourceLinks = namingResources.findResourceLinks();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceLinks.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addResourceLink(resourceLinks[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resources</span></span><br><span class="line">        ContextResource[] resources = namingResources.findResources();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resources.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addResource(resources[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resources Env</span></span><br><span class="line">        ContextResourceEnvRef[] resourceEnvRefs = namingResources.findResourceEnvRefs();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; resourceEnvRefs.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addResourceEnvRef(resourceEnvRefs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Environment entries</span></span><br><span class="line">        ContextEnvironment[] contextEnvironments = namingResources.findEnvironments();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; contextEnvironments.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addEnvironment(contextEnvironments[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// EJB references</span></span><br><span class="line">        ContextEjb[] ejbs = namingResources.findEjbs();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ejbs.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addEjb(ejbs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// WebServices references</span></span><br><span class="line">        ContextService[] services = namingResources.findServices();</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; services.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            addService(services[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Binding a User Transaction reference</span></span><br><span class="line">        <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Reference ref = <span class="keyword">new</span> TransactionRef();</span><br><span class="line">                compCtx.bind(<span class="string">"UserTransaction"</span>, ref);</span><br><span class="line">                ContextTransaction transaction = namingResources.getTransaction();</span><br><span class="line">                <span class="keyword">if</span> (transaction != <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Iterator&lt;String&gt; params = transaction.listProperties();</span><br><span class="line">                    <span class="keyword">while</span> (params.hasNext())</span><br><span class="line">                    &#123;</span><br><span class="line">                        String paramName = params.next();</span><br><span class="line">                        String paramValue = (String) transaction.getProperty(paramName);</span><br><span class="line">                        StringRefAddr refAddr = <span class="keyword">new</span> StringRefAddr(paramName, paramValue);</span><br><span class="line">                        ref.add(refAddr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NameAlreadyBoundException e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Ignore because UserTransaction was obviously</span></span><br><span class="line">                <span class="comment">// added via ResourceLink</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">            &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"naming.bindFailed"</span>, e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Binding the resources directory context</span></span><br><span class="line">        <span class="keyword">if</span> (container <span class="keyword">instanceof</span> Context)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                compCtx.bind(<span class="string">"Resources"</span>, ((Context) container).getResources());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">            &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"naming.bindFailed"</span>, e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以添加ContextResource 为例:</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResource</span><span class="params">(ContextResource resource)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a reference to the resource.  创建reference</span></span><br><span class="line">        Reference ref = <span class="keyword">new</span> ResourceRef(resource.getType(), resource.getDescription(), resource.getScope(), resource.getAuth(), resource.getSingleton());</span><br><span class="line">        <span class="comment">// Adding the additional parameters, if any 添加额外的内容,也就是存在于map中而不是直接成员变量的属性</span></span><br><span class="line">        Iterator&lt;String&gt; params = resource.listProperties();</span><br><span class="line">        <span class="keyword">while</span> (params.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            String paramName = params.next();</span><br><span class="line">            String paramValue = (String) resource.getProperty(paramName);</span><br><span class="line">            StringRefAddr refAddr = <span class="keyword">new</span> StringRefAddr(paramName, paramValue);</span><br><span class="line">            ref.add(refAddr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            &#123;</span><br><span class="line">                log.debug(<span class="string">"  Adding resource ref "</span> + resource.getName() + <span class="string">"  "</span> + ref);</span><br><span class="line">            &#125;</span><br><span class="line">            createSubcontexts(envCtx, resource.getName());  <span class="comment">//创建子树上下文节点</span></span><br><span class="line">            envCtx.bind(resource.getName(), ref);  <span class="comment">//真正绑定资源对象到树结构上,至此完成资源在jdni中的绑定</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">        &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"naming.bindFailed"</span>, e));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"javax.sql.DataSource"</span>.equals(ref.getClassName()) &amp;&amp; resource.getSingleton())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                ObjectName on = createObjectName(resource);</span><br><span class="line">                Object actualResource = envCtx.lookup(resource.getName());</span><br><span class="line">                Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(actualResource, on, <span class="keyword">null</span>);</span><br><span class="line">                objectNames.put(resource.getName(), on);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                log.warn(sm.getString(<span class="string">"naming.jmxRegistrationFailed"</span>, e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="MapperListener"><a class="header-anchor" href="#MapperListener">¶</a>MapperListener</h5><p>该监听器默认为Service成员,Service.startInternal() Service.initInternal()  都会触发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器用于向mapper中田间context信息</span></span><br><span class="line"><span class="comment">//此监听器为 contrainerListener&amp;&amp;LifeListener&amp;&amp;LifeMbean 子类</span></span><br><span class="line"><span class="comment">//该监听器实体对象处于Service中,但是并不是Service的监听器,也属于生命组件和容器组件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MapperListener</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">        <span class="keyword">this</span>.mapper = service.getMapper();  <span class="comment">//mapper是service的属性</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        Engine engine = service.getContainer();</span><br><span class="line">        <span class="keyword">if</span> (engine == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        findDefaultHost();</span><br><span class="line"></span><br><span class="line">        addListeners(engine); <span class="comment">//递归将该监听器作为lifeListern和contianerlistern加如engine以及其子类中</span></span><br><span class="line"></span><br><span class="line">        Container[] conHosts = engine.findChildren();  <span class="comment">//engine的直接子容器,实际就是host</span></span><br><span class="line">        <span class="keyword">for</span> (Container conHost : conHosts) &#123;</span><br><span class="line">            Host host = (Host) conHost;</span><br><span class="line">            <span class="keyword">if</span> (!LifecycleState.NEW.equals(host.getState())) &#123;</span><br><span class="line">                <span class="comment">// Registering the host will register the context and wrappers</span></span><br><span class="line">                registerHost(host); <span class="comment">//注册host</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerHost</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] aliases = host.findAliases();</span><br><span class="line">        mapper.addHost(host.getName(), aliases, host);</span><br><span class="line">        <span class="keyword">for</span> (Container container : host.findChildren()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (container.getState().isAvailable()) &#123;</span><br><span class="line">                registerContext((Context) container);  <span class="comment">//对于host的子容器都是context,进行context在mapper的注册</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"mapperListener.registerHost"</span>,</span><br><span class="line">                    host.getName(), domain, service));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String contextPath = context.getPath();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/"</span>.equals(contextPath)) &#123;</span><br><span class="line">            contextPath = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Host host = (Host)context.getParent();</span><br><span class="line"></span><br><span class="line">        WebResourceRoot resources = context.getResources();</span><br><span class="line">        String[] welcomeFiles = context.findWelcomeFiles();</span><br><span class="line">        List&lt;WrapperMappingInfo&gt; wrappers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Container container : context.findChildren()) &#123;</span><br><span class="line">            prepareWrapperMappingInfo(context, (Wrapper) container, wrappers);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">                log.debug(sm.getString(<span class="string">"mapperListener.registerWrapper"</span>,</span><br><span class="line">                        container.getName(), contextPath, service));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mapper.addContextVersion(host.getName(), host, contextPath,    <span class="comment">//添加信息,在CoyotesAdaptor处理res和rep的过程,识别url和映射就是通过mapper做的</span></span><br><span class="line">                context.getWebappVersion(), context, welcomeFiles, resources,</span><br><span class="line">                wrappers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"mapperListener.registerContext"</span>,</span><br><span class="line">                    contextPath, service));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="Hostconfig"><a class="header-anchor" href="#Hostconfig">¶</a>Hostconfig</h5><figure class="highlight java"><figcaption><span>HostConfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器加入时机在xml解析host的时候,该监听器触发的时机是Host被start的时候</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Identify the host we are associated with</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            host = (Host) event.getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (host <span class="keyword">instanceof</span> StandardHost) &#123;</span><br><span class="line">                setCopyXML(((StandardHost) host).isCopyXML());</span><br><span class="line">                setDeployXML(((StandardHost) host).isDeployXML());</span><br><span class="line">                setUnpackWARs(((StandardHost) host).isUnpackWARs());</span><br><span class="line">                setContextClass(((StandardHost) host).getContextClass());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"hostConfig.cce"</span>, event.getLifecycle()), e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Process the event that has occurred 在host不同情况下触发不同函数</span></span><br><span class="line">        <span class="keyword">if</span> (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;  <span class="comment">//这种事件发生暂时没见过</span></span><br><span class="line">            check();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123; <span class="comment">//host.state=beforeStart</span></span><br><span class="line">            beforeStart();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.START_EVENT)) &#123;  <span class="comment">//触发的时机就是Host变成startiing状态,也就是其子类容器已经初始化过的情况</span></span><br><span class="line">            start();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeStart</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (host.getCreateDirs()) &#123; <span class="comment">//判断是否创建文件</span></span><br><span class="line">            File[] dirs = <span class="keyword">new</span> File[] &#123;host.getAppBaseFile(),host.getConfigBaseFile()&#125;;  <span class="comment">//实际就是webapp路径和localhost路径</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;dirs.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!dirs[i].mkdirs() &amp;&amp; !dirs[i].isDirectory()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"hostConfig.createDirs"</span>,dirs[i]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled())</span><br><span class="line">            log.debug(sm.getString(<span class="string">"hostConfig.start"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectName hostON = host.getObjectName();</span><br><span class="line">            oname = <span class="keyword">new</span> ObjectName</span><br><span class="line">                (hostON.getDomain() + <span class="string">":type=Deployer,host="</span> + host.getName());</span><br><span class="line">            Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent</span><br><span class="line">                (<span class="keyword">this</span>, oname, <span class="keyword">this</span>.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"hostConfig.jmx.register"</span>, oname), e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!host.getAppBaseFile().isDirectory()) &#123;</span><br><span class="line">            log.error(sm.getString(<span class="string">"hostConfig.appBase"</span>, host.getName(),</span><br><span class="line">                    host.getAppBaseFile().getPath()));</span><br><span class="line">            host.setDeployOnStartup(<span class="keyword">false</span>);</span><br><span class="line">            host.setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (host.getDeployOnStartup())</span><br><span class="line">            deployApps();  <span class="comment">//部署app</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        File appBase = host.getAppBaseFile();</span><br><span class="line">        File configBase = host.getConfigBaseFile();<span class="comment">//表示 %CATALINA)HOMT%/conf/[EngineName](catalnia)/[HostName](localhost) 目录,如果没有配置则没用</span></span><br><span class="line">        String[] filteredAppPaths = filterAppPaths(appBase.list());<span class="comment">//表示webapps文件夹下一级目录</span></span><br><span class="line">        <span class="comment">// Deploy XML descriptors from configBase</span></span><br><span class="line">        deployDescriptors(configBase, configBase.list());  <span class="comment">//根据localhost有xml进行一部分配置</span></span><br><span class="line">        <span class="comment">// Deploy WARs</span></span><br><span class="line">        deployWARs(appBase, filteredAppPaths);   <span class="comment">//遍历webapp下文件,进行war的部署</span></span><br><span class="line">        <span class="comment">// Deploy expanded folders</span></span><br><span class="line">        deployDirectories(appBase, filteredAppPaths); <span class="comment">//根据文件夹进行部署</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//上边三个判断逻辑都是这样的,复合条件则通过container中的startStopExe进行线程处理</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployDirectories</span><span class="params">(File appBase, String[] files)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (files == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        ExecutorService es = host.getStartStopExecutor();</span><br><span class="line">        List&lt;Future&lt;?&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (files[i].equalsIgnoreCase(<span class="string">"META-INF"</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (files[i].equalsIgnoreCase(<span class="string">"WEB-INF"</span>))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            File dir = <span class="keyword">new</span> File(appBase, files[i]);</span><br><span class="line">            <span class="keyword">if</span> (dir.isDirectory()) &#123;</span><br><span class="line">                ContextName cn = <span class="keyword">new</span> ContextName(files[i], <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isServiced(cn.getName()) || deploymentExists(cn.getName()))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                results.add(es.submit(<span class="keyword">new</span> DeployDirectory(<span class="keyword">this</span>, cn, dir))); <span class="comment">//有三个这样线程类,负责调用HostConfig中的不同部署方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;?&gt; result : results) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(</span><br><span class="line">                        <span class="string">"hostConfig.deployDir.threaded.error"</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理线程</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DeployDirectory</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> HostConfig config;</span><br><span class="line">        <span class="keyword">private</span> ContextName cn;</span><br><span class="line">        <span class="keyword">private</span> File dir;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DeployDirectory</span><span class="params">(HostConfig config, ContextName cn, File dir)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.config = config;</span><br><span class="line">            <span class="keyword">this</span>.cn = cn;</span><br><span class="line">            <span class="keyword">this</span>.dir = dir;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            config.deployDirectory(cn, dir);  <span class="comment">//其他两个实际上也都是调用了hostConfig中其他对应函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其中部署非war的文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployDirectory</span><span class="params">(ContextName cn, File dir)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Deploy the application in this directory</span></span><br><span class="line">        <span class="keyword">if</span>( log.isInfoEnabled() ) &#123;</span><br><span class="line">            startTime = System.currentTimeMillis();</span><br><span class="line">            log.info(sm.getString(<span class="string">"hostConfig.deployDir"</span>,</span><br><span class="line">                    dir.getAbsolutePath()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//META-INFO/content.xml文件表示web项目,也就是说可以通过此处的xml文件进行配置content,如果没有该xml tomcat自行配置</span></span><br><span class="line">        <span class="comment">//例如: F:\apache-tomcat-9.0.0.M26-src\webapps\demo\META-INF/context.xml  对demo项目进行配置</span></span><br><span class="line">        File xml = <span class="keyword">new</span> File(dir, Constants.ApplicationContextXml);</span><br><span class="line">        File xmlCopy =</span><br><span class="line">                <span class="keyword">new</span> File(host.getConfigBaseFile(), cn.getBaseName() + <span class="string">".xml"</span>); <span class="comment">//复制一份到catalina/localhost/目录下</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b=xml.exists();</span><br><span class="line">        DeployedApplication deployedApp;</span><br><span class="line">        <span class="keyword">boolean</span> copyThisXml = isCopyXML();</span><br><span class="line">        <span class="keyword">boolean</span> deployThisXML = isDeployThisXML(dir, cn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (deployThisXML &amp;&amp; xml.exists()) &#123; <span class="comment">//当content存在解析创建content</span></span><br><span class="line">                <span class="keyword">synchronized</span> (digesterLock) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        context = (Context) digester.parse(xml); <span class="comment">//这个digester较为简单,说明content的结构也是简单的</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(sm.getString(</span><br><span class="line">                                <span class="string">"hostConfig.deployDescriptor.error"</span>,</span><br><span class="line">                                xml), e);</span><br><span class="line">                        context = <span class="keyword">new</span> FailedContext();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        digester.reset();</span><br><span class="line">                        <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            context = <span class="keyword">new</span> FailedContext();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (copyThisXml == <span class="keyword">false</span> &amp;&amp; context <span class="keyword">instanceof</span> StandardContext) &#123; <span class="comment">//拷贝xml</span></span><br><span class="line">                    <span class="comment">// Host is using default value. Context may override it.</span></span><br><span class="line">                    copyThisXml = ((StandardContext) context).getCopyXML();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (copyThisXml) &#123;</span><br><span class="line">                    Files.copy(xml.toPath(), xmlCopy.toPath());</span><br><span class="line">                    context.setConfigFile(xmlCopy.toURI().toURL());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    context.setConfigFile(xml.toURI().toURL());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">                <span class="comment">// Block deployment as META-INF/context.xml may contain security</span></span><br><span class="line">                <span class="comment">// configuration necessary for a secure deployment.</span></span><br><span class="line">                log.error(sm.getString(<span class="string">"hostConfig.deployDescriptor.blocked"</span>,</span><br><span class="line">                        cn.getPath(), xml, xmlCopy));</span><br><span class="line">                context = <span class="keyword">new</span> FailedContext();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context = (Context) Class.forName(contextClass).newInstance(); <span class="comment">//不存在xml时创建org.apache.catalina.core.StandardContext作为contentxt</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(host.getConfigClass()); <span class="comment">//创建contentConfig监听器</span></span><br><span class="line">            LifecycleListener listener =</span><br><span class="line">                (LifecycleListener) clazz.newInstance();</span><br><span class="line">            context.addLifecycleListener(listener);</span><br><span class="line">            <span class="comment">//此处表示这几个属性,即使在content.xml 配置了,此处还是会被改写成正确的,那么也就是说即使在content写了path doc都是没有用的</span></span><br><span class="line">            context.setName(cn.getName());</span><br><span class="line">            context.setWebappVersion(cn.getVersion());</span><br><span class="line"><span class="comment">//            if(!cn.getName().equalsIgnoreCase("/demo"))&#123;  //做个实验,如果此处更改,就能按照content.xml进行配置path 和docBase</span></span><br><span class="line">                context.setPath(cn.getPath());</span><br><span class="line">                context.setDocBase(cn.getBaseName());</span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            host.addChild(context);  <span class="comment">//host持有对应的content,此处还启动了content.start,这部分应该很重要</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            log.error(sm.getString(<span class="string">"hostConfig.deployDir.error"</span>,</span><br><span class="line">                    dir.getAbsolutePath()), t);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            deployedApp = <span class="keyword">new</span> DeployedApplication(cn.getName(),</span><br><span class="line">                    xml.exists() &amp;&amp; deployThisXML &amp;&amp; copyThisXml); <span class="comment">//创建DeployedApplication 表示部署应用</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fake re-deploy resource to detect if a WAR is added at a later</span></span><br><span class="line">            <span class="comment">// point</span></span><br><span class="line">            deployedApp.redeployResources.put(dir.getAbsolutePath() + <span class="string">".war"</span>,</span><br><span class="line">                    Long.valueOf(<span class="number">0</span>));</span><br><span class="line">            deployedApp.redeployResources.put(dir.getAbsolutePath(),</span><br><span class="line">                    Long.valueOf(dir.lastModified()));</span><br><span class="line">            <span class="keyword">if</span> (deployThisXML &amp;&amp; xml.exists()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (copyThisXml) &#123;</span><br><span class="line">                    deployedApp.redeployResources.put(</span><br><span class="line">                            xmlCopy.getAbsolutePath(),</span><br><span class="line">                            Long.valueOf(xmlCopy.lastModified()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    deployedApp.redeployResources.put(</span><br><span class="line">                            xml.getAbsolutePath(),</span><br><span class="line">                            Long.valueOf(xml.lastModified()));</span><br><span class="line">                    <span class="comment">// Fake re-deploy resource to detect if a context.xml file is</span></span><br><span class="line">                    <span class="comment">// added at a later point</span></span><br><span class="line">                    deployedApp.redeployResources.put(</span><br><span class="line">                            xmlCopy.getAbsolutePath(),</span><br><span class="line">                            Long.valueOf(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Fake re-deploy resource to detect if a context.xml file is</span></span><br><span class="line">                <span class="comment">// added at a later point</span></span><br><span class="line">                deployedApp.redeployResources.put(</span><br><span class="line">                        xmlCopy.getAbsolutePath(),</span><br><span class="line">                        Long.valueOf(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">if</span> (!xml.exists()) &#123;</span><br><span class="line">                    deployedApp.redeployResources.put(</span><br><span class="line">                            xml.getAbsolutePath(),</span><br><span class="line">                            Long.valueOf(<span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            addWatchedResources(deployedApp, dir.getAbsolutePath(), context);  <span class="comment">//监视这部分,当该部分改变时,重新加载content,此处源码我没有看</span></span><br><span class="line">            <span class="comment">// Add the global redeploy resources (which are never deleted) at</span></span><br><span class="line">            <span class="comment">// the end so they don't interfere with the deletion process</span></span><br><span class="line">            addGlobalRedeployResources(deployedApp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deployed.put(cn.getName(), deployedApp);  <span class="comment">//将deployedApp加入到hostConfig的一个hashMap中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( log.isInfoEnabled() ) &#123;</span><br><span class="line">            log.info(sm.getString(<span class="string">"hostConfig.deployDir.finished"</span>,</span><br><span class="line">                    dir.getAbsolutePath(), Long.valueOf(System.currentTimeMillis() - startTime)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于HostConfig内部的解析器,仅仅创建content,以及设置器属性,并不包含子属性,对比servelt.xml中content的解析</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Digester <span class="title">createDigester</span><span class="params">(String contextClassName)</span> </span>&#123;</span><br><span class="line">        Digester digester = <span class="keyword">new</span> Digester();</span><br><span class="line">        digester.setValidating(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// Add object creation rule</span></span><br><span class="line">        digester.addObjectCreate(<span class="string">"Context"</span>, contextClassName, <span class="string">"className"</span>);</span><br><span class="line">        <span class="comment">// Set the properties on that object (it doesn't matter if extra</span></span><br><span class="line">        <span class="comment">// properties are set)</span></span><br><span class="line">        digester.addSetProperties(<span class="string">"Context"</span>);</span><br><span class="line">        <span class="keyword">return</span> digester;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="相关机制"><a class="header-anchor" href="#相关机制">¶</a>相关机制</h3><h4 id="life"><a class="header-anchor" href="#life">¶</a>life</h4><p>此机制实际上是通过观察者模式实现,将属于lifecycle接口的子类分成不通的<code>生命周期</code>,来处理不同的监听器.<br>1.LifeBase子类属于事件源,state表示当前生命状态<br>2.lifeListen持有fire函数,根据不同event判断是否调用对应的处理函数<br>3.实际上tomcat中的事件类型就是通过字符串分别不过通过EventObject做了层封装,LifeState则是枚举类型</p><figure class="highlight java"><figcaption><span>LifecycleEvent</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line">  <span class="comment">//典型的java观察者模式中的EventObject</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lifecycle);</span><br><span class="line">        <span class="keyword">this</span>.type = type; <span class="comment">//使用type来分别事件类型,这个数量和lifecycle中string数量相同</span></span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Lifecycle) getSource();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>LifecycleState</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LifecycleState &#123;</span><br><span class="line"><span class="comment">//生命周期状态</span></span><br><span class="line">    NEW(<span class="keyword">false</span>, <span class="keyword">null</span>),</span><br><span class="line">    INITIALIZING(<span class="keyword">false</span>, Lifecycle.BEFORE_INIT_EVENT),</span><br><span class="line">    INITIALIZED(<span class="keyword">false</span>, Lifecycle.AFTER_INIT_EVENT),</span><br><span class="line">    STARTING_PREP(<span class="keyword">false</span>, Lifecycle.BEFORE_START_EVENT),</span><br><span class="line">    STARTING(<span class="keyword">true</span>, Lifecycle.START_EVENT),      <span class="comment">//只有调用start和start结束后组件有效,其他时期组件处于无效状态</span></span><br><span class="line">    STARTED(<span class="keyword">true</span>, Lifecycle.AFTER_START_EVENT),</span><br><span class="line">    STOPPING_PREP(<span class="keyword">true</span>, Lifecycle.BEFORE_STOP_EVENT),</span><br><span class="line">    STOPPING(<span class="keyword">false</span>, Lifecycle.STOP_EVENT),</span><br><span class="line">    STOPPED(<span class="keyword">false</span>, Lifecycle.AFTER_STOP_EVENT),</span><br><span class="line">    DESTROYING(<span class="keyword">false</span>, Lifecycle.BEFORE_DESTROY_EVENT),</span><br><span class="line">    DESTROYED(<span class="keyword">false</span>, Lifecycle.AFTER_DESTROY_EVENT),</span><br><span class="line">    FAILED(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> available;  <span class="comment">//此处的状态在enum定义后是无法改变的,也就是说该变量代表了组件当前的状态,表示其是否有效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lifecycleEvent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LifecycleState</span><span class="params">(<span class="keyword">boolean</span> available, String lifecycleEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.available = available;</span><br><span class="line">        <span class="keyword">this</span>.lifecycleEvent = lifecycleEvent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * May the public methods other than property getters/setters and lifecycle</span></span><br><span class="line"><span class="comment">     * methods be called for a component in this state? It returns</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;true&lt;/code&gt; for any component in any of the following states:</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTING&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STARTED&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;&#123;<span class="doctag">@link</span> #STOPPING_PREP&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the component is available for use,</span></span><br><span class="line"><span class="comment">     *         otherwise &lt;code&gt;false&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> available;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLifecycleEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lifecycleEvent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Lifecycle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The valid state transitions for components that support &#123;@link Lifecycle&#125;</span></span><br><span class="line"><span class="comment">* are:</span></span><br><span class="line"><span class="comment">* &lt;pre&gt;</span></span><br><span class="line"><span class="comment">*            start()</span></span><br><span class="line"><span class="comment">*  -----------------------------</span></span><br><span class="line"><span class="comment">*  |                           |</span></span><br><span class="line"><span class="comment">*  | init()                    |</span></span><br><span class="line"><span class="comment">* NEW -»-- INITIALIZING        |</span></span><br><span class="line"><span class="comment">* | |           |              |     ------------------«-----------------------</span></span><br><span class="line"><span class="comment">* | |           |auto          |     |                                        |</span></span><br><span class="line"><span class="comment">* | |          \|/    start() \|/   \|/     auto          auto         stop() |</span></span><br><span class="line"><span class="comment">* | |      INITIALIZED --»-- STARTING_PREP --»- STARTING --»- STARTED --»---  |</span></span><br><span class="line"><span class="comment">* | |         |                                                            |  |</span></span><br><span class="line"><span class="comment">* | |destroy()|                                                            |  |</span></span><br><span class="line"><span class="comment">* | --»-----«--    ------------------------«--------------------------------  ^</span></span><br><span class="line"><span class="comment">* |     |          |                                                          |</span></span><br><span class="line"><span class="comment">* |     |         \|/          auto                 auto              start() |</span></span><br><span class="line"><span class="comment">* |     |     STOPPING_PREP ----»---- STOPPING ------»----- STOPPED -----»-----</span></span><br><span class="line"><span class="comment">* |    \|/                               ^                     |  ^</span></span><br><span class="line"><span class="comment">* |     |               stop()           |                     |  |</span></span><br><span class="line"><span class="comment">* |     |       --------------------------                     |  |</span></span><br><span class="line"><span class="comment">* |     |       |                                              |  |</span></span><br><span class="line"><span class="comment">* |     |       |    destroy()                       destroy() |  |</span></span><br><span class="line"><span class="comment">* |     |    FAILED ----»------ DESTROYING ---«-----------------  |</span></span><br><span class="line"><span class="comment">* |     |                        ^     |                          |</span></span><br><span class="line"><span class="comment">* |     |     destroy()          |     |auto                      |</span></span><br><span class="line"><span class="comment">* |     --------»-----------------    \|/                         |</span></span><br><span class="line"><span class="comment">* |                                 DESTROYED                     |</span></span><br><span class="line"><span class="comment">* |                                                               |</span></span><br><span class="line"><span class="comment">* |                            stop()                             |</span></span><br><span class="line"><span class="comment">* ----»-----------------------------»------------------------------</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//一下就是event的字符串标识</span></span><br><span class="line">   * The LifecycleEvent type <span class="keyword">for</span> the <span class="string">"component before init"</span> event.</span><br><span class="line">    */</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_INIT_EVENT = <span class="string">"before_init"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component after init" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_INIT_EVENT = <span class="string">"after_init"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component start" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String START_EVENT = <span class="string">"start"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component before start" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_START_EVENT = <span class="string">"before_start"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component after start" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_START_EVENT = <span class="string">"after_start"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component stop" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOP_EVENT = <span class="string">"stop"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component before stop" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_STOP_EVENT = <span class="string">"before_stop"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component after stop" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_STOP_EVENT = <span class="string">"after_stop"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component after destroy" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_DESTROY_EVENT = <span class="string">"after_destroy"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "component before destroy" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_DESTROY_EVENT = <span class="string">"before_destroy"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "periodic" event.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERIODIC_EVENT = <span class="string">"periodic"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "configure_start" event. Used by those</span></span><br><span class="line"><span class="comment">    * components that use a separate component to perform configuration and</span></span><br><span class="line"><span class="comment">    * need to signal when configuration should be performed - usually after</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #BEFORE_START_EVENT&#125; and before &#123;<span class="doctag">@link</span> #START_EVENT&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_START_EVENT = <span class="string">"configure_start"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The LifecycleEvent type for the "configure_stop" event. Used by those</span></span><br><span class="line"><span class="comment">    * components that use a separate component to perform configuration and</span></span><br><span class="line"><span class="comment">    * need to signal when de-configuration should be performed - usually after</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #STOP_EVENT&#125; and before &#123;<span class="doctag">@link</span> #AFTER_STOP_EVENT&#125;.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_STOP_EVENT = <span class="string">"configure_stop"</span>;</span><br></pre></td></tr></table></figure><ul><li>关于life组件未必一定要通过.init start()这样的调用顺序</li></ul><figure class="highlight java"><figcaption><span>lifecyleBae</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||</span><br><span class="line">              LifecycleState.STARTED.equals(state)) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">              Exception e = <span class="keyword">new</span> LifecycleException();</span><br><span class="line">              log.debug(sm.getString(<span class="string">"lifecycleBase.alreadyStarted"</span>, toString()), e);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (log.isInfoEnabled()) &#123;</span><br><span class="line">              log.info(sm.getString(<span class="string">"lifecycleBase.alreadyStarted"</span>, toString()));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (state.equals(LifecycleState.NEW)) &#123;  <span class="comment">//若通过start进入生命周期也会检查,并且可以执行一次init</span></span><br><span class="line">          init();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state.equals(LifecycleState.FAILED)) &#123;</span><br><span class="line">          stop();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!state.equals(LifecycleState.INITIALIZED) &amp;&amp;</span><br><span class="line">              !state.equals(LifecycleState.STOPPED)) &#123;</span><br><span class="line">          invalidTransition(Lifecycle.BEFORE_START_EVENT);</span><br><span class="line">      &#125;</span><br><span class="line">  ...省略</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>life和对应监听器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tomcat 中 lifeCycle的子类属于 生命周期组件,不同时刻表示出不同的状态,由LifecycleState 类来表示</span></span><br><span class="line"><span class="comment">//1.通过 init start stop destory 来改变其状态</span></span><br><span class="line"><span class="comment">//2.由抽象类lifeBase 中setInternalState 来改变当前状态,并且在不同状态对应着不同事件,由LifecycleEvent</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line">   <span class="comment">//type 是lifeCycle中常量的子集,其数量和lifeState对应</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct a new LifecycleEvent with the specified parameters.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lifecycle Component on which this event occurred</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type Event type (required)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data Event data (if any)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(lifecycle);</span><br><span class="line">        <span class="keyword">this</span>.type = type; <span class="comment">//type表示事件的类型,监听器是根据该类型进行调用逻辑的</span></span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The event data associated with this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The event type this instance represents.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the event data of this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the Lifecycle on which this event occurred.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Lifecycle) getSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the event type of this event.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Realm-域"><a class="header-anchor" href="#Realm-域">¶</a>Realm 域</h4><p>关于realm顾名思义,暂时理解对于不同组件的分类</p><img src="/2018/10/06/tomcat/Realm.png" class="" title="大致分类"><img src="/2018/10/06/tomcat/realm1.png" class="" title="Realm的继承"><p>如上图<code>CombinedRealm</code>具有list成员可以含有多个realm对象</p><figure class="highlight java"><figcaption><span>RealmBase</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类是Mben成员所以其共有 init过程已知,不存在共有start</span></span><br><span class="line"><span class="comment">//以下是该抽象的逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal(); <span class="comment">//jmx</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We want logger as soon as possible</span></span><br><span class="line">        <span class="keyword">if</span> (container != <span class="keyword">null</span>) &#123; <span class="comment">//realm基本都是container所持有的</span></span><br><span class="line">            <span class="keyword">this</span>.containerLog = container.getLogger();<span class="comment">//记录</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x509UsernameRetriever = createUsernameRetriever(x509UsernameRetrieverClassName); <span class="comment">//不清楚</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prepare for the beginning of active use of the public methods of this</span></span><br><span class="line"><span class="comment">     * component and implement the requirements of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></span><br><span class="line"><span class="comment">     *  that prevents this component from being used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (credentialHandler == <span class="keyword">null</span>) &#123;  <span class="comment">//结束</span></span><br><span class="line">            credentialHandler = <span class="keyword">new</span> MessageDigestCredentialHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>UserDataRealm</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以此为例,combine的逻辑就是依次处理list中realm的start</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context context = getServer().getGlobalNamingContext(); <span class="comment">//从Naming中取得database这个Resource</span></span><br><span class="line">            database = (UserDatabase) context.lookup(resourceName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(e);</span><br><span class="line">            containerLog.error(sm.getString(<span class="string">"userDatabaseRealm.lookup"</span>,</span><br><span class="line">                                            resourceName),</span><br><span class="line">                               e);</span><br><span class="line">            database = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (database == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException</span><br><span class="line">                (sm.getString(<span class="string">"userDatabaseRealm.noDatabase"</span>, resourceName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.startInternal(); <span class="comment">//执行父类逻辑</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="pipeline"><a class="header-anchor" href="#pipeline">¶</a>pipeline</h4><p>管道模式是tomcat中对于请求逻辑处理的分布化的方式,通过不同容器组件持有不同pipe,逐层传递,每一个pipe调用内部Valve处理一部分数据逻辑</p><img src="/2018/10/06/tomcat/StandarPipeline.png" class="" title="继承图"><figure class="highlight java"><figcaption><span>StandardPipeline</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// coyoteAdapter进行res/rep处理-&gt;Engine.pipe-&gt;Host.pipe-&gt;Context.pipe-&gt;Wrapper.pipe 逐层处理逻辑</span></span><br><span class="line"><span class="comment">// 实际上pipe是拥有Valve的组件,每层容器调用自身pipe中Valve节点,由Valve节点完成真正的复杂逻辑工作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pipe是containerBase对象成员</span></span><br><span class="line"><span class="comment">//basic是对应容器构造函数中添加的</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如:</span></span><br><span class="line"><span class="comment">* public StandardHost() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        super();</span></span><br><span class="line"><span class="comment">        pipeline.setBasic(new StandardHostValve());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">protected Valve basic = null;</span></span><br><span class="line"><span class="comment">//当调用addValve时加入</span></span><br><span class="line"><span class="comment"> protected Valve first = null;</span></span><br><span class="line"><span class="comment"> //保持的关系是 first-&gt;Valve-&gt;Valve-.....-&gt;basic,也就是说basic在这个node结构的最后</span></span><br><span class="line"><span class="comment">//该函数使用在xml解析的过程中,创建新的Valve,加入到对应container的pipeline中</span></span><br><span class="line"><span class="comment">//pipeline </span></span><br><span class="line"><span class="comment">public void addValve(Valve valve) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Validate that we can add this Valve</span></span><br><span class="line"><span class="comment">        if (valve instanceof Contained)</span></span><br><span class="line"><span class="comment">            ((Contained) valve).setContainer(this.container);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Start the new component if necessary</span></span><br><span class="line"><span class="comment">        if (getState().isAvailable()) &#123;</span></span><br><span class="line"><span class="comment">            if (valve instanceof Lifecycle) &#123;</span></span><br><span class="line"><span class="comment">                try &#123;</span></span><br><span class="line"><span class="comment">                    ((Lifecycle) valve).start();</span></span><br><span class="line"><span class="comment">                &#125; catch (LifecycleException e) &#123;</span></span><br><span class="line"><span class="comment">                    log.error("StandardPipeline.addValve: start: ", e);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Add this Valve to the set associated with this Pipeline</span></span><br><span class="line"><span class="comment">        if (first == null) &#123;</span></span><br><span class="line"><span class="comment">            first = valve;</span></span><br><span class="line"><span class="comment">            valve.setNext(basic);</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">        //维持上述的节点关系</span></span><br><span class="line"><span class="comment">            Valve current = first;</span></span><br><span class="line"><span class="comment">            while (current != null) &#123;</span></span><br><span class="line"><span class="comment">                if (current.getNext() == basic) &#123;</span></span><br><span class="line"><span class="comment">                    current.setNext(valve);</span></span><br><span class="line"><span class="comment">                    valve.setNext(basic);</span></span><br><span class="line"><span class="comment">                    break;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                current = current.getNext();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        container.fireContainerEvent(Container.ADD_VALVE_EVENT, valve);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">      protected synchronized void startInternal() throws LifecycleException &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line"><span class="comment">        Valve current = first;</span></span><br><span class="line"><span class="comment">        if (current == null) &#123;</span></span><br><span class="line"><span class="comment">            current = basic;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //按照节点关系顺序执行对应的start,pipe的启动在对应容器start阶段</span></span><br><span class="line"><span class="comment">        while (current != null) &#123;</span></span><br><span class="line"><span class="comment">            if (current instanceof Lifecycle)</span></span><br><span class="line"><span class="comment">                ((Lifecycle) current).start();</span></span><br><span class="line"><span class="comment">            current = current.getNext();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        setState(LifecycleState.STARTING);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Valve"><a class="header-anchor" href="#Valve">¶</a>Valve</h4><img src="/2018/10/06/tomcat/StandardHostValve.png" class="" title="继承"><p>A <b>Valve</b> is a request processing component associated with a * particular Container.  A series of Valves are generally associated with * each other into a Pipeline.  The detailed contract for a Valve is included * in the description of the <code>invoke()</code> method below.</p>如注释所言,valve是容器执行请求的组件,valve与pipeline关联。<figure class="highlight java"><figcaption><span>Valve</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上层life各个阶段只改变状态</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line">        containerLog = getContainer().getLogger();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start this component and implement the requirements</span></span><br><span class="line"><span class="comment">     * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></span><br><span class="line"><span class="comment">     *  that prevents this component from being used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Stop this component and implement the requirements</span></span><br><span class="line"><span class="comment">     * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#stopInternal()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></span><br><span class="line"><span class="comment">     *  that prevents this component from being used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stopInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        setState(LifecycleState.STOPPING);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="tomcat部署"><a class="header-anchor" href="#tomcat部署">¶</a>tomcat部署</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String Package = <span class="string">"org.apache.catalina.startup"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ApplicationContextXml = <span class="string">"META-INF/context.xml"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ApplicationWebXml = <span class="string">"/WEB-INF/web.xml"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TomcatWebXml = <span class="string">"/WEB-INF/tomcat-web.xml"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DefaultContextXml = <span class="string">"conf/context.xml"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DefaultWebXml = <span class="string">"conf/web.xml"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HostContextXml = <span class="string">"context.xml.default"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HostWebXml = <span class="string">"web.xml.default"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WarTracker = <span class="string">"/META-INF/war-tracker"</span>;</span><br></pre></td></tr></table></figure><h4 id="NioEndPoint底层机制"><a class="header-anchor" href="#NioEndPoint底层机制">¶</a>NioEndPoint底层机制</h4><h5 id="连接请求到执行器处理"><a class="header-anchor" href="#连接请求到执行器处理">¶</a>连接请求到执行器处理</h5><ul><li>uml关系图</li></ul><img src="/2018/10/06/tomcat/NioEndPoint.jpg" class=""><ul><li>acceptor:用来接受新的连接,使用blocking方式接受,将新的连接通过注册到轮询事件队列中</li></ul><figure class="highlight java"><figcaption><span>acceptor</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该线程启动部分在connector.start</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Acceptor</span>&lt;<span class="title">U</span>&gt; <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Loop until we receive a shutdown command</span></span><br><span class="line">        <span class="keyword">while</span> (endpoint.isRunning()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Loop if endpoint is paused</span></span><br><span class="line">            <span class="keyword">while</span> (endpoint.isPaused() &amp;&amp; endpoint.isRunning()) &#123;</span><br><span class="line">                state = AcceptorState.PAUSED;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!endpoint.isRunning()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            state = AcceptorState.RUNNING;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//if we have reached max connections, wait</span></span><br><span class="line">                endpoint.countUpOrAwaitConnection();  <span class="comment">//管理连接数量,到达数量此处阻塞,就不会接受新的连接了</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Endpoint might have been paused while waiting for latch</span></span><br><span class="line">                <span class="comment">// If that is the case, don't accept new connections</span></span><br><span class="line">                <span class="keyword">if</span> (endpoint.isPaused()) &#123; <span class="comment">//point暂停时不要接受任何输入</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                U socket = <span class="keyword">null</span>; <span class="comment">//此处看NioEndPoint代码 SocketChannel</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Accept the next incoming connection from the server</span></span><br><span class="line">                    <span class="comment">// socket</span></span><br><span class="line">                    socket = endpoint.serverSocketAccept();  <span class="comment">//执行accept,那么看来对于接受外界socket还是要通过这种方式,并且此处是阻塞的,返回socketChanel</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ioe) &#123;</span><br><span class="line">                    <span class="comment">// We didn't get a socket</span></span><br><span class="line">                    endpoint.countDownConnection();</span><br><span class="line">                    <span class="keyword">if</span> (endpoint.isRunning()) &#123;</span><br><span class="line">                        <span class="comment">// Introduce delay if necessary</span></span><br><span class="line">                        errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">                        <span class="comment">// re-throw</span></span><br><span class="line">                        <span class="keyword">throw</span> ioe;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Successful accept, reset the error delay</span></span><br><span class="line">                errorDelay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Configure the socket</span></span><br><span class="line">                <span class="keyword">if</span> (endpoint.isRunning() &amp;&amp; !endpoint.isPaused()) &#123;</span><br><span class="line">                    <span class="comment">// setSocketOptions() will hand the socket off to</span></span><br><span class="line">                    <span class="comment">// an appropriate processor if successful</span></span><br><span class="line">                    <span class="keyword">if</span> (!endpoint.setSocketOptions(socket)) &#123; <span class="comment">//调用对应endpoint,将接受到的socket通过轮询poller加入到注册事件中</span></span><br><span class="line">                        endpoint.closeSocket(socket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    endpoint.destroySocket(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                String msg = sm.getString(<span class="string">"endpoint.accept.fail"</span>);</span><br><span class="line">                <span class="comment">// APR specific.</span></span><br><span class="line">                <span class="comment">// Could push this down but not sure it is worth the trouble.</span></span><br><span class="line">                <span class="keyword">if</span> (t <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">                    Error e = (Error) t;</span><br><span class="line">                    <span class="keyword">if</span> (e.getError() == <span class="number">233</span>) &#123;</span><br><span class="line">                        <span class="comment">// Not an error on HP-UX so log as a warning</span></span><br><span class="line">                        <span class="comment">// so it can be filtered out on that platform</span></span><br><span class="line">                        <span class="comment">// See bug 50273</span></span><br><span class="line">                        log.warn(msg, t);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.error(msg, t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        log.error(msg, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = AcceptorState.ENDED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NioEndPoint的实现</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">setSocketOptions</span><span class="params">(SocketChannel socket)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Process the connection</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//disable blocking, APR style, we are gonna be polling it</span></span><br><span class="line">            socket.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            Socket sock = socket.socket();</span><br><span class="line">            socketProperties.setProperties(sock);</span><br><span class="line"></span><br><span class="line">            NioChannel channel = nioChannels.pop(); <span class="comment">//从nio队列中取出,并进行封装</span></span><br><span class="line">            <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">                SocketBufferHandler bufhandler = <span class="keyword">new</span> SocketBufferHandler( <span class="comment">//构造buffer</span></span><br><span class="line">                        socketProperties.getAppReadBufSize(),</span><br><span class="line">                        socketProperties.getAppWriteBufSize(),</span><br><span class="line">                        socketProperties.getDirectBuffer());</span><br><span class="line">                <span class="keyword">if</span> (isSSLEnabled()) &#123;  <span class="comment">//分别处理是否是ssl</span></span><br><span class="line">                    channel = <span class="keyword">new</span> SecureNioChannel(socket, bufhandler, selectorPool, <span class="keyword">this</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    channel = <span class="keyword">new</span> NioChannel(socket, bufhandler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                channel.setIOChannel(socket);</span><br><span class="line">                channel.reset();</span><br><span class="line">            &#125;</span><br><span class="line">            getPoller0().register(channel); <span class="comment">//构造注册事件</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.error(<span class="string">""</span>,t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable tt) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(tt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Tell to close the socket</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>pollerEvent:轮询事件的种类, 1.注册 2.改变ops</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为nioEndPoint内部类,poller事件队列,描述该线程队列如何处理</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PollerEvent</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> NioChannel socket;  <span class="comment">//关联的Channel</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> interestOps;    <span class="comment">//该事件的操作类型</span></span><br><span class="line">        <span class="keyword">private</span> NioSocketWrapper socketWrapper; <span class="comment">//包装</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PollerEvent</span><span class="params">(NioChannel ch, NioSocketWrapper w, <span class="keyword">int</span> intOps)</span> </span>&#123;</span><br><span class="line">            reset(ch, w, intOps);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">(NioChannel ch, NioSocketWrapper w, <span class="keyword">int</span> intOps)</span> </span>&#123;</span><br><span class="line">            socket = ch;</span><br><span class="line">            interestOps = intOps;</span><br><span class="line">            socketWrapper = w;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            reset(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  key实际上只有这四种关心的操作</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> SelectionKey#OP_WRITE</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> SelectionKey#OP_READ</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> SelectionKey#OP_ACCEPT</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> SelectionKey#OP_CONNECT</span></span><br><span class="line"><span class="comment">         *   因此pollEvent事件线程执行的逻辑</span></span><br><span class="line"><span class="comment">         *    1.出现新的连接,将该channel注册到selector中</span></span><br><span class="line"><span class="comment">         *    2.由于key被取消,进行连接数的减少</span></span><br><span class="line"><span class="comment">         *    3.对某个channel对应的key,增加其interestOps</span></span><br><span class="line"><span class="comment">         *    4.socketWrapper=null,取消对应的key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (interestOps == OP_REGISTER) &#123;  <span class="comment">//注册事件</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.getIOChannel().register(</span><br><span class="line">                            socket.getPoller().getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">                    <span class="comment">//将该channel以read的方式注册到poller线程中的selector,也就是此key关心的是OP_READ</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception x) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">"endpoint.nio.registerFail"</span>), x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());  <span class="comment">//找到此channel对应的key</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// The key was cancelled (e.g. due to socket closure)</span></span><br><span class="line">                        <span class="comment">// and removed from the selector while it was being</span></span><br><span class="line">                        <span class="comment">// processed. Count down the connections at this point</span></span><br><span class="line">                        <span class="comment">// since it won't have been counted down when the socket</span></span><br><span class="line">                        <span class="comment">// closed. 此处表示该该key被取消,因此要减少一个连接数</span></span><br><span class="line">                        socket.socketWrapper.getEndpoint().countDownConnection(); <span class="comment">//连接数和limitLatch有关,此处调用countDownConnection减少一个</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">final</span> NioSocketWrapper socketWrapper = (NioSocketWrapper) key.attachment();</span><br><span class="line">                        <span class="keyword">if</span> (socketWrapper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">//we are registering the key to start with, reset the fairness counter.</span></span><br><span class="line">                            <span class="keyword">int</span> ops = key.interestOps() | interestOps;  <span class="comment">//增加该key关心的操作</span></span><br><span class="line">                            socketWrapper.interestOps(ops);</span><br><span class="line">                            key.interestOps(ops); <span class="comment">//改变key关心的操作类型</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            socket.getPoller().cancelledKey(key); <span class="comment">//取消该key</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (CancelledKeyException ckx) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socket.getPoller().cancelledKey(key);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ignore) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Poller event: socket ["</span> + socket + <span class="string">"], socketWrapper ["</span> + socketWrapper +</span><br><span class="line">                    <span class="string">"], interestOps ["</span> + interestOps + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>poller:轮询线程,当acceptor注册,对应nio改变ops,都会导致事件的添加,该线程不断处理事件队列中的线程对象,并且进行selecotr的阻塞,判断有无就绪的SocketChnanel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poller</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Selector selector; <span class="comment">//选择器</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SynchronizedQueue&lt;PollerEvent&gt; events =</span><br><span class="line">                <span class="keyword">new</span> SynchronizedQueue&lt;&gt;(); <span class="comment">//事件队列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> close = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> nextExpiration = <span class="number">0</span>;<span class="comment">//optimize expiration handling</span></span><br><span class="line">        <span class="comment">//具体的逻辑就是当有添加evnent时增加1,若==0,则唤醒</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">private</span> AtomicLong wakeupCounter = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>); <span class="comment">//用来唤醒selector.accpet部分辅助的量</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> keyCount = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEvent</span><span class="params">(PollerEvent event)</span> </span>&#123;</span><br><span class="line">            events.offer(event);</span><br><span class="line">            <span class="keyword">if</span> ( wakeupCounter.incrementAndGet() == <span class="number">0</span> ) selector.wakeup(); <span class="comment">//此处是唤醒selector,使得run代码向下循环,执行事件线程</span></span><br><span class="line">        &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">events</span><span class="params">()</span> </span>&#123; <span class="comment">//执行队列中事件,注意这个并发队列不是以前我看的没有内容线程暂停的,是tomcat自己实现的加了</span></span><br><span class="line">            <span class="comment">//synchronized的队列,代码易理解</span></span><br><span class="line">            <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            PollerEvent pe = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ( (pe = events.poll()) != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    pe.run();</span><br><span class="line">                    pe.reset();</span><br><span class="line">                    <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                        eventCache.push(pe);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> ( Throwable x ) &#123;</span><br><span class="line">                    log.error(<span class="string">""</span>,x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Loop until destroy() is called</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> hasEvents = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!close) &#123;</span><br><span class="line">                        hasEvents = events(); <span class="comment">//不停执行事件</span></span><br><span class="line">                        <span class="keyword">if</span> (wakeupCounter.getAndSet(-<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//获取当前值,并且置于-1,如果当前值&gt;0,那么说明有好几个事件加入了</span></span><br><span class="line">                            <span class="comment">// ,那么就要及时唤醒,进入下一次循环处理事件</span></span><br><span class="line">                            <span class="comment">//if we are here, means we have other stuff to do</span></span><br><span class="line">                            <span class="comment">//do a non blocking select</span></span><br><span class="line">                            keyCount = selector.selectNow();  <span class="comment">//返回的是就绪key 的数量</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//当且仅当-1才会进入这里,于此同时如果addEvent操作,就会唤醒,并count+1,且唤醒</span></span><br><span class="line">                            keyCount = selector.select(selectorTimeout);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//因为一次循环就会创建事件队列中所有的线程,因此此处置为0</span></span><br><span class="line">                        wakeupCounter.set(<span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (close) &#123;</span><br><span class="line">                        events();</span><br><span class="line">                        timeout(<span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            selector.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                            log.error(sm.getString(<span class="string">"endpoint.nio.selectorCloseFail"</span>), ioe);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(x);</span><br><span class="line">                    log.error(<span class="string">""</span>,x);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//either we timed out or we woke up, process events first</span></span><br><span class="line">                <span class="comment">//假设超时或者被主动唤醒,说明此处没有获得能使用键,执行事件,并且获取此时系统中有无事件线程</span></span><br><span class="line">                <span class="keyword">if</span> ( keyCount == <span class="number">0</span> ) hasEvents = (hasEvents | events());</span><br><span class="line">                <span class="comment">//当且仅当有readyKey才进行遍历</span></span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator =</span><br><span class="line">                    keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().iterator() : <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// Walk through the collection of ready keys and dispatch</span></span><br><span class="line">                <span class="comment">// any active event.</span></span><br><span class="line">                <span class="keyword">while</span> (iterator != <span class="keyword">null</span> &amp;&amp; iterator.hasNext()) &#123;  <span class="comment">//遍历</span></span><br><span class="line">                    SelectionKey sk = iterator.next();</span><br><span class="line">                    NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();</span><br><span class="line">                    <span class="comment">// Attachment may be null if another thread has called</span></span><br><span class="line">                    <span class="comment">// cancelledKey()</span></span><br><span class="line">                    <span class="keyword">if</span> (attachment == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                        processKey(sk, attachment);  <span class="comment">//执行</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//process timeouts</span></span><br><span class="line">                timeout(keyCount,hasEvents);</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">            getStopLatch().countDown(); <span class="comment">//减少latch,对应的await在stop中,实际上说明await调用只要在对应线程的创建线程中就可以,await在stop中</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processKey</span><span class="params">(SelectionKey sk, NioSocketWrapper attachment)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ( close ) &#123;</span><br><span class="line">                    cancelledKey(sk);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( sk.isValid() &amp;&amp; attachment != <span class="keyword">null</span> ) &#123;  <span class="comment">//真正获得连接后如何执行</span></span><br><span class="line">                    <span class="keyword">if</span> (sk.isReadable() || sk.isWritable() ) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ( attachment.getSendfileData() != <span class="keyword">null</span> ) &#123; <span class="comment">//如果有fileData,执行发送文件</span></span><br><span class="line">                            processSendfile(sk,attachment, <span class="keyword">false</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            unreg(sk, attachment, sk.readyOps());  <span class="comment">//取  ~sk.readyOps &amp;sk.interestOps  改为interestOps</span></span><br><span class="line">                            <span class="keyword">boolean</span> closeSocket = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="comment">// Read goes before write</span></span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * <span class="doctag">@see</span> AbstractEndpoint#processSocket(SocketWrapperBase, SocketEvent, boolean) 处理</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            <span class="keyword">if</span> (sk.isReadable()) &#123;  </span><br><span class="line">                                <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_READ, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                                    closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!closeSocket &amp;&amp; sk.isWritable()) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_WRITE, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                                    closeSocket = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (closeSocket) &#123;</span><br><span class="line">                                cancelledKey(sk);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//invalid key</span></span><br><span class="line">                    cancelledKey(sk);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> ( CancelledKeyException ckx ) &#123;</span><br><span class="line">                cancelledKey(sk);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                ExceptionUtils.handleThrowable(t);</span><br><span class="line">                log.error(<span class="string">""</span>,t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//AbstractEndpoint中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(SocketWrapperBase&lt;S&gt; socketWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">            SocketEvent event, <span class="keyword">boolean</span> dispatch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socketWrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SocketProcessorBase&lt;S&gt; sc = processorCache.pop();  <span class="comment">//SocketProcessorBase 执行器也用了队列缓冲</span></span><br><span class="line">            <span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sc = createSocketProcessor(socketWrapper, event);<span class="comment">//子类创建,这个sc就是下文中的SocketProcessor</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.reset(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            Executor executor = getExecutor();</span><br><span class="line">            <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) &#123; <span class="comment">//该执行器线程执行</span></span><br><span class="line">                executor.execute(sc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RejectedExecutionException ree) &#123;</span><br><span class="line">            getLog().warn(sm.getString(<span class="string">"endpoint.executor.fail"</span>, socketWrapper) , ree);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(t);</span><br><span class="line">            <span class="comment">// This means we got an OOM or similar creating a thread, or that</span></span><br><span class="line">            <span class="comment">// the pool and its queue are full</span></span><br><span class="line">            getLog().error(sm.getString(<span class="string">"endpoint.process.fail"</span>), t);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>SocketProcessor: NioEndpoint内部类,实际是一个线程类,用来调用对应的processor来进行处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketProcessor</span> <span class="keyword">extends</span> <span class="title">SocketProcessorBase</span>&lt;<span class="title">NioChannel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketProcessor</span><span class="params">(SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(socketWrapper, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NioChannel socket = socketWrapper.getSocket();</span><br><span class="line">        SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> handshake = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (socket.isHandshakeComplete()) &#123;<span class="comment">// 这几个判断都是针对于ssl进行的</span></span><br><span class="line">                        <span class="comment">// No TLS handshaking required. Let the handler</span></span><br><span class="line">                        <span class="comment">// process this socket / event combination.</span></span><br><span class="line">                        handshake = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event == SocketEvent.STOP || event == SocketEvent.DISCONNECT ||</span><br><span class="line">                            event == SocketEvent.ERROR) &#123;</span><br><span class="line">                        <span class="comment">// Unable to complete the TLS handshake. Treat it as</span></span><br><span class="line">                        <span class="comment">// if the handshake failed.</span></span><br><span class="line">                        handshake = -<span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        handshake = socket.handshake(key.isReadable(), key.isWritable());</span><br><span class="line">                        <span class="comment">// The handshake process reads/writes from/to the</span></span><br><span class="line">                        <span class="comment">// socket. status may therefore be OPEN_WRITE once</span></span><br><span class="line">                        <span class="comment">// the handshake completes. However, the handshake</span></span><br><span class="line">                        <span class="comment">// happens when the socket is opened so the status</span></span><br><span class="line">                        <span class="comment">// must always be OPEN_READ after it completes. It</span></span><br><span class="line">                        <span class="comment">// is OK to always set this as it is only used if</span></span><br><span class="line">                        <span class="comment">// the handshake completes.</span></span><br><span class="line">                        event = SocketEvent.OPEN_READ;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">                handshake = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (log.isDebugEnabled()) log.debug(<span class="string">"Error during SSL handshake"</span>,x);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (CancelledKeyException ckx) &#123;</span><br><span class="line">                handshake = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (handshake == <span class="number">0</span>) &#123;</span><br><span class="line">                SocketState state = SocketState.OPEN;</span><br><span class="line">                <span class="comment">// Process the request from this socket</span></span><br><span class="line">                <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    state = getHandler().process(socketWrapper, event);  <span class="comment">//执行对应的event逻辑</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (state == SocketState.CLOSED) &#123;</span><br><span class="line">                    close(socket, key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == -<span class="number">1</span> ) &#123;</span><br><span class="line">                close(socket, key);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == SelectionKey.OP_READ)&#123;</span><br><span class="line">                socketWrapper.registerReadInterest();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handshake == SelectionKey.OP_WRITE)&#123;</span><br><span class="line">                socketWrapper.registerWriteInterest();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancelledKeyException cx) &#123;</span><br><span class="line">            socket.getPoller().cancelledKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (VirtualMachineError vme) &#123;</span><br><span class="line">            ExceptionUtils.handleThrowable(vme);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            log.error(<span class="string">""</span>, t);</span><br><span class="line">            socket.getPoller().cancelledKey(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socketWrapper = <span class="keyword">null</span>;</span><br><span class="line">            event = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//return to cache</span></span><br><span class="line">            <span class="keyword">if</span> (running &amp;&amp; !paused) &#123;</span><br><span class="line">                processorCache.push(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>ConnectionHandler: 将请求连接就绪的socket进行处理,创建执行器,这部分已经进入了子线程</li></ul><figure class="highlight java"><figcaption><span>ConnectionHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> SocketState <span class="title">process</span><span class="params">(SocketWrapperBase&lt;S&gt; wrapper, SocketEvent status)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">               getLog().debug(sm.getString(<span class="string">"abstractConnectionHandler.process"</span>,</span><br><span class="line">                       wrapper.getSocket(), status));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (wrapper == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// Nothing to do. Socket has been closed.</span></span><br><span class="line">               <span class="keyword">return</span> SocketState.CLOSED;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           S socket = wrapper.getSocket();</span><br><span class="line"></span><br><span class="line">           Processor processor = connections.get(socket);</span><br><span class="line">           <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">               getLog().debug(sm.getString(<span class="string">"abstractConnectionHandler.connectionsGet"</span>,</span><br><span class="line">                       processor, socket));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (processor != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="comment">// Make sure an async timeout doesn't fire</span></span><br><span class="line">               getProtocol().removeWaitingProcessor(processor);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == SocketEvent.DISCONNECT || status == SocketEvent.ERROR) &#123;</span><br><span class="line">               <span class="comment">// Nothing to do. Endpoint requested a close and there is no</span></span><br><span class="line">               <span class="comment">// longer a processor associated with this socket.</span></span><br><span class="line">               <span class="keyword">return</span> SocketState.CLOSED;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           ContainerThreadMarker.set();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (processor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   String negotiatedProtocol = wrapper.getNegotiatedProtocol();</span><br><span class="line">                   <span class="keyword">if</span> (negotiatedProtocol != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       UpgradeProtocol upgradeProtocol =</span><br><span class="line">                               getProtocol().getNegotiatedProtocol(negotiatedProtocol);</span><br><span class="line">                       <span class="keyword">if</span> (upgradeProtocol != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           processor = upgradeProtocol.getProcessor(</span><br><span class="line">                                   wrapper, getProtocol().getAdapter());</span><br><span class="line">                       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (negotiatedProtocol.equals(<span class="string">"http/1.1"</span>)) &#123;</span><br><span class="line">                           <span class="comment">// Explicitly negotiated the default protocol.</span></span><br><span class="line">                           <span class="comment">// Obtain a processor below.</span></span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">                           <span class="comment">// OpenSSL 1.0.2's ALPN callback doesn't support</span></span><br><span class="line">                           <span class="comment">// failing the handshake with an error if no</span></span><br><span class="line">                           <span class="comment">// protocol can be negotiated. Therefore, we need to</span></span><br><span class="line">                           <span class="comment">// fail the connection here. Once this is fixed,</span></span><br><span class="line">                           <span class="comment">// replace the code below with the commented out</span></span><br><span class="line">                           <span class="comment">// block.</span></span><br><span class="line">                           <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                               getLog().debug(sm.getString(</span><br><span class="line">                                   <span class="string">"abstractConnectionHandler.negotiatedProcessor.fail"</span>,</span><br><span class="line">                                   negotiatedProtocol));</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">return</span> SocketState.CLOSED;</span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * To replace the code above once OpenSSL 1.1.0 is</span></span><br><span class="line"><span class="comment">                            * used.</span></span><br><span class="line"><span class="comment">                           // Failed to create processor. This is a bug.</span></span><br><span class="line"><span class="comment">                           throw new IllegalStateException(sm.getString(</span></span><br><span class="line"><span class="comment">                                   "abstractConnectionHandler.negotiatedProcessor.fail",</span></span><br><span class="line"><span class="comment">                                   negotiatedProtocol));</span></span><br><span class="line"><span class="comment">                           */</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                *  这几种执行器</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@see</span> org.apache.coyote.http11.Http11Processor</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@see</span> org.apache.coyote.ajp.AjpProcessor</span></span><br><span class="line"><span class="comment">                * <span class="doctag">@see</span> org.apache.coyote.http2.StreamProcessor</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">if</span> (processor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   processor = recycledProcessors.pop();</span><br><span class="line">                   <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                       getLog().debug(sm.getString(<span class="string">"abstractConnectionHandler.processorPop"</span>,</span><br><span class="line">                               processor));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (processor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   processor = getProtocol().createProcessor();  <span class="comment">////实际上这个processor 由对应的protocalHandler创建</span></span><br><span class="line">                   register(processor); <span class="comment">//加入到jmx</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               processor.setSslSupport(</span><br><span class="line">                       wrapper.getSslSupport(getProtocol().getClientCertProvider()));  <span class="comment">//还是对ssl有用,也就是 SecureNioChannel这样的信道</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">// Associate the processor with the connection</span></span><br><span class="line">               connections.put(socket, processor);  <span class="comment">//缓冲</span></span><br><span class="line"></span><br><span class="line">               SocketState state = SocketState.CLOSED;</span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   state = processor.process(wrapper, status);  <span class="comment">//真正tomcat对于连接进行处理的入口点</span></span><br><span class="line">                   <span class="comment">//之后的代码都是根据socketState进行的处理</span></span><br><span class="line"></span><br><span class="line">                   <span class="keyword">if</span> (state == SocketState.UPGRADING) &#123;</span><br><span class="line">                       <span class="comment">// Get the HTTP upgrade handler</span></span><br><span class="line">                       UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                       <span class="comment">// Retrieve leftover input</span></span><br><span class="line">                       ByteBuffer leftOverInput = processor.getLeftoverInput();</span><br><span class="line">                       <span class="keyword">if</span> (upgradeToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           <span class="comment">// Assume direct HTTP/2 connection</span></span><br><span class="line">                           UpgradeProtocol upgradeProtocol = getProtocol().getUpgradeProtocol(<span class="string">"h2c"</span>);</span><br><span class="line">                           <span class="keyword">if</span> (upgradeProtocol != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               processor = upgradeProtocol.getProcessor(</span><br><span class="line">                                       wrapper, getProtocol().getAdapter());</span><br><span class="line">                               wrapper.unRead(leftOverInput);</span><br><span class="line">                               <span class="comment">// Associate with the processor with the connection</span></span><br><span class="line">                               connections.put(socket, processor);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                                   getLog().debug(sm.getString(</span><br><span class="line">                                       <span class="string">"abstractConnectionHandler.negotiatedProcessor.fail"</span>,</span><br><span class="line">                                       <span class="string">"h2c"</span>));</span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">return</span> SocketState.CLOSED;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                           <span class="comment">// Release the Http11 processor to be re-used</span></span><br><span class="line">                           release(processor);</span><br><span class="line">                           <span class="comment">// Create the upgrade processor</span></span><br><span class="line">                           processor = getProtocol().createUpgradeProcessor(wrapper, upgradeToken);</span><br><span class="line">                           <span class="keyword">if</span> (getLog().isDebugEnabled()) &#123;</span><br><span class="line">                               getLog().debug(sm.getString(<span class="string">"abstractConnectionHandler.upgradeCreate"</span>,</span><br><span class="line">                                       processor, wrapper));</span><br><span class="line">                           &#125;</span><br><span class="line">                           wrapper.unRead(leftOverInput);</span><br><span class="line">                           <span class="comment">// Mark the connection as upgraded</span></span><br><span class="line">                           wrapper.setUpgraded(<span class="keyword">true</span>);</span><br><span class="line">                           <span class="comment">// Associate with the processor with the connection</span></span><br><span class="line">                           connections.put(socket, processor);</span><br><span class="line">                           <span class="comment">// Initialise the upgrade handler (which may trigger</span></span><br><span class="line">                           <span class="comment">// some IO using the new protocol which is why the lines</span></span><br><span class="line">                           <span class="comment">// above are necessary)</span></span><br><span class="line">                           <span class="comment">// This cast should be safe. If it fails the error</span></span><br><span class="line">                           <span class="comment">// handling for the surrounding try/catch will deal with</span></span><br><span class="line">                           <span class="comment">// it.</span></span><br><span class="line">                           <span class="keyword">if</span> (upgradeToken.getInstanceManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                               httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               ClassLoader oldCL = upgradeToken.getContextBind().bind(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                               <span class="keyword">try</span> &#123;</span><br><span class="line">                                   httpUpgradeHandler.init((WebConnection) processor);</span><br><span class="line">                               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                   upgradeToken.getContextBind().unbind(<span class="keyword">false</span>, oldCL);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">while</span> ( state == SocketState.UPGRADING);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (state == SocketState.LONG) &#123;</span><br><span class="line">                   <span class="comment">// In the middle of processing a request/response. Keep the</span></span><br><span class="line">                   <span class="comment">// socket associated with the processor. Exact requirements</span></span><br><span class="line">                   <span class="comment">// depend on type of long poll</span></span><br><span class="line">                   longPoll(wrapper, processor);</span><br><span class="line">                   <span class="keyword">if</span> (processor.isAsync()) &#123;</span><br><span class="line">                       getProtocol().addWaitingProcessor(processor);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SocketState.OPEN) &#123;</span><br><span class="line">                   <span class="comment">// In keep-alive but between requests. OK to recycle</span></span><br><span class="line">                   <span class="comment">// processor. Continue to poll for the next request.</span></span><br><span class="line">                   connections.remove(socket);</span><br><span class="line">                   release(processor);</span><br><span class="line">                   wrapper.registerReadInterest();</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SocketState.SENDFILE) &#123;</span><br><span class="line">                   <span class="comment">// Sendfile in progress. If it fails, the socket will be</span></span><br><span class="line">                   <span class="comment">// closed. If it works, the socket either be added to the</span></span><br><span class="line">                   <span class="comment">// poller (or equivalent) to await more data or processed</span></span><br><span class="line">                   <span class="comment">// if there are any pipe-lined requests remaining.</span></span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SocketState.UPGRADED) &#123;</span><br><span class="line">                   <span class="comment">// Don't add sockets back to the poller if this was a</span></span><br><span class="line">                   <span class="comment">// non-blocking write otherwise the poller may trigger</span></span><br><span class="line">                   <span class="comment">// multiple read events which may lead to thread starvation</span></span><br><span class="line">                   <span class="comment">// in the connector. The write() method will add this socket</span></span><br><span class="line">                   <span class="comment">// to the poller if necessary.</span></span><br><span class="line">                   <span class="keyword">if</span> (status != SocketEvent.OPEN_WRITE) &#123;</span><br><span class="line">                       longPoll(wrapper, processor);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == SocketState.SUSPENDED) &#123;</span><br><span class="line">                   <span class="comment">// Don't add sockets back to the poller.</span></span><br><span class="line">                   <span class="comment">// The resumeProcessing() method will add this socket</span></span><br><span class="line">                   <span class="comment">// to the poller.</span></span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// Connection closed. OK to recycle the processor. Upgrade</span></span><br><span class="line">                   <span class="comment">// processors are not recycled.</span></span><br><span class="line">                   connections.remove(socket);</span><br><span class="line">                   <span class="keyword">if</span> (processor.isUpgrade()) &#123;</span><br><span class="line">                       UpgradeToken upgradeToken = processor.getUpgradeToken();</span><br><span class="line">                       HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler();</span><br><span class="line">                       InstanceManager instanceManager = upgradeToken.getInstanceManager();</span><br><span class="line">                       <span class="keyword">if</span> (instanceManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                           httpUpgradeHandler.destroy();</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           ClassLoader oldCL = upgradeToken.getContextBind().bind(<span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               httpUpgradeHandler.destroy();</span><br><span class="line">                           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                               <span class="keyword">try</span> &#123;</span><br><span class="line">                                   instanceManager.destroyInstance(httpUpgradeHandler);</span><br><span class="line">                               &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                                   ExceptionUtils.handleThrowable(e);</span><br><span class="line">                                   getLog().error(sm.getString(<span class="string">"abstractConnectionHandler.error"</span>), e);</span><br><span class="line">                               &#125;</span><br><span class="line">                               upgradeToken.getContextBind().unbind(<span class="keyword">false</span>, oldCL);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       release(processor);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> state;</span><br><span class="line">           &#125; <span class="keyword">catch</span>(java.net.SocketException e) &#123;</span><br><span class="line">               <span class="comment">// SocketExceptions are normal</span></span><br><span class="line">               getLog().debug(sm.getString(</span><br><span class="line">                       <span class="string">"abstractConnectionHandler.socketexception.debug"</span>), e);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">               <span class="comment">// IOExceptions are normal</span></span><br><span class="line">               getLog().debug(sm.getString(</span><br><span class="line">                       <span class="string">"abstractConnectionHandler.ioexception.debug"</span>), e);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ProtocolException e) &#123;</span><br><span class="line">               <span class="comment">// Protocol exceptions normally mean the client sent invalid or</span></span><br><span class="line">               <span class="comment">// incomplete data.</span></span><br><span class="line">               getLog().debug(sm.getString(</span><br><span class="line">                       <span class="string">"abstractConnectionHandler.protocolexception.debug"</span>), e);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// Future developers: if you discover any other</span></span><br><span class="line">           <span class="comment">// rare-but-nonfatal exceptions, catch them here, and log as</span></span><br><span class="line">           <span class="comment">// above.</span></span><br><span class="line">           <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">               ExceptionUtils.handleThrowable(e);</span><br><span class="line">               <span class="comment">// any other exception or error is odd. Here we log it</span></span><br><span class="line">               <span class="comment">// with "ERROR" level, so it will show up even on</span></span><br><span class="line">               <span class="comment">// less-than-verbose logs.</span></span><br><span class="line">               getLog().error(sm.getString(<span class="string">"abstractConnectionHandler.error"</span>), e);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               ContainerThreadMarker.clear();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Make sure socket/processor is removed from the list of current</span></span><br><span class="line">           <span class="comment">// connections</span></span><br><span class="line">           connections.remove(socket);</span><br><span class="line">           release(processor);</span><br><span class="line">           <span class="keyword">return</span> SocketState.CLOSED;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="nio读写逻辑相关"><a class="header-anchor" href="#nio读写逻辑相关">¶</a>nio读写逻辑相关</h5><ul><li>uml</li></ul><img src="/2018/10/06/tomcat/NioChannel.jpg" class=""><ul><li>NioSocketWrapper:封装了nioChannel,实现了如何进行读写操作,要么通过nioApi直接读写,要么通过SelectorPool</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span>  <span class="title">NioSocketWrapper</span> <span class="keyword">extends</span> <span class="title">SocketWrapperBase</span>&lt;<span class="title">NioChannel</span>&gt; </span>&#123;</span><br><span class="line">       <span class="comment">//其父类封装了NioChannel/SocketBufferHandler相关的包装操作,实际进行读写的逻辑交给子类是实现,也就是NioSocketWrapper这种子类实现,实现有三种</span></span><br><span class="line">       <span class="comment">//也就是说父类提供公共接口由外部调用,由子类实现读写逻辑</span></span><br><span class="line">       <span class="comment">//fillReadBuffer和doWrite 实现从读取数据到buffer和将构造好的buffer写出去</span></span><br><span class="line">       <span class="comment">//父类提供写接口 为write函数,有许多重写</span></span><br><span class="line">       <span class="comment">//读接口因该是read</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//分别对应nio nio2 apr,这样的逻辑和c++ io相似,和java io包装的方式有些相反</span></span><br><span class="line">       <span class="comment">//这个类有许多跟CountDownLatch相关的</span></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> NioSelectorPool pool;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> Poller poller = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">int</span> interestOps = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">private</span> CountDownLatch readLatch = <span class="keyword">null</span>; <span class="comment">//读写latch,用于NioBlockSelector</span></span><br><span class="line">       <span class="keyword">private</span> CountDownLatch writeLatch = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">volatile</span> SendfileData sendfileData = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> lastRead = System.currentTimeMillis();</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> lastWrite = lastRead;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">NioSocketWrapper</span><span class="params">(NioChannel channel, NioEndpoint endpoint)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>(channel, endpoint);</span><br><span class="line">           pool = endpoint.getSelectorPool();</span><br><span class="line">           socketBufferHandler = channel.getBufHandler();</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//写逻辑</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doWrite</span><span class="params">(<span class="keyword">boolean</span> block, ByteBuffer from)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           <span class="keyword">long</span> writeTimeout = getWriteTimeout();  <span class="comment">//超时数</span></span><br><span class="line">           Selector selector = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               selector = pool.get();  <span class="comment">//获取selectorPoll的一个</span></span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">               <span class="comment">// Ignore</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               pool.write(from, getSocket(), selector, writeTimeout, block);</span><br><span class="line">               <span class="keyword">if</span> (block) &#123;</span><br><span class="line">                   <span class="comment">// Make sure we are flushed</span></span><br><span class="line">                   <span class="keyword">do</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (getSocket().flush(<span class="keyword">true</span>, selector, writeTimeout)) &#123;  <span class="comment">//非ssl此处没有用</span></span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               updateLastWrite();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (selector != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   pool.put(selector); <span class="comment">//并没有销毁selector</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// If there is data left in the buffer the socket will be registered for</span></span><br><span class="line">           <span class="comment">// write further up the stack. This is to ensure the socket is only</span></span><br><span class="line">           <span class="comment">// registered for write once as both container and user code can trigger</span></span><br><span class="line">           <span class="comment">// write registration.</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//读</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">boolean</span> block, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> nRead = populateReadBuffer(b, off, len); <span class="comment">//向buffer中取数据</span></span><br><span class="line">           <span class="keyword">if</span> (nRead &gt; <span class="number">0</span>) &#123; <span class="comment">////这个逻辑是内部的buffer已经有数据了,此时将buffer数据</span></span><br><span class="line">           <span class="comment">//放置到b中就可以了</span></span><br><span class="line">               <span class="keyword">return</span> nRead;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Since more bytes may have arrived since the buffer was last</span></span><br><span class="line"><span class="comment">                * filled, it is an option at this point to perform a</span></span><br><span class="line"><span class="comment">                * non-blocking read. However correctly handling the case if</span></span><br><span class="line"><span class="comment">                * that read returns end of stream adds complexity. Therefore,</span></span><br><span class="line"><span class="comment">                * at the moment, the preference is for simplicity.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Fill the read buffer as best we can.</span></span><br><span class="line">           nRead = fillReadBuffer(block);   <span class="comment">//这个函数是NioSocketWrapper实现的真正读取逻辑,也就是向buffer中添加</span></span><br><span class="line">           <span class="comment">//数据</span></span><br><span class="line">           updateLastRead();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Fill as much of the remaining byte array as possible with the</span></span><br><span class="line">           <span class="comment">// data that was just read</span></span><br><span class="line">           <span class="keyword">if</span> (nRead &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               socketBufferHandler.configureReadBufferForRead();</span><br><span class="line">               nRead = Math.min(nRead, len);</span><br><span class="line">               socketBufferHandler.getReadBuffer().get(b, off, nRead);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> nRead;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fillReadBuffer</span><span class="params">(<span class="keyword">boolean</span> block)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           socketBufferHandler.configureReadBufferForWrite();</span><br><span class="line">           <span class="keyword">return</span> fillReadBuffer(block, socketBufferHandler.getReadBuffer());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">fillReadBuffer</span><span class="params">(<span class="keyword">boolean</span> block, ByteBuffer to)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           <span class="keyword">int</span> nRead;</span><br><span class="line">           NioChannel channel = getSocket();</span><br><span class="line">           <span class="keyword">if</span> (block) &#123;</span><br><span class="line">               Selector selector = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   selector = pool.get(); <span class="comment">//block 读则调用</span></span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">                   <span class="comment">// Ignore</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   NioEndpoint.NioSocketWrapper att = (NioEndpoint.NioSocketWrapper) channel</span><br><span class="line">                           .getAttachment();</span><br><span class="line">                   <span class="keyword">if</span> (att == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Key must be cancelled."</span>);</span><br><span class="line">                   &#125;</span><br><span class="line">                   nRead = pool.read(to, channel, selector, att.getReadTimeout()); <span class="comment">//通过pool来处理</span></span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (selector != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       pool.put(selector);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               nRead = channel.read(to); <span class="comment">//非blocking读则调用该函数,此处代码就是真正的 channel.read(buffer)</span></span><br><span class="line">               <span class="keyword">if</span> (nRead == -<span class="number">1</span>) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> nRead;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ul><li>NioChannel:封装了实际的socketChannel,并且是endPoint|procol的泛型参数之一</li></ul><figure class="highlight java"><figcaption><span>NioChannel</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioChannel</span> <span class="keyword">implements</span> <span class="title">ByteChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> StringManager sm = StringManager.getManager(NioChannel<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBuffer emptyBuf = ByteBuffer.allocate(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> SocketChannel sc = <span class="keyword">null</span>; <span class="comment">//真正的socketChannel</span></span><br><span class="line">    <span class="keyword">protected</span> SocketWrapperBase&lt;NioChannel&gt; socketWrapper = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> SocketBufferHandler bufHandler; <span class="comment">//持有读写buffer和相关调整方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Poller poller;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NioChannel</span><span class="params">(SocketChannel channel, SocketBufferHandler bufHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sc = channel;</span><br><span class="line">        <span class="keyword">this</span>.bufHandler = bufHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bufHandler.free(); <span class="comment">//处理内部buffer</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="comment">//关闭sc</span></span><br><span class="line">        getIOChannel().socket().close();</span><br><span class="line">        getIOChannel().close();</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="comment">//实际进行读写操作</span></span><br><span class="line">        checkInterruptStatus();</span><br><span class="line">        <span class="keyword">return</span> sc.write(src);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sc.read(dst);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>SocketBufferHandler:持有读写buffer,并有调整方法</li></ul><figure class="highlight java"><figcaption><span>SocketBufferHandler</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> readBufferConfiguredForWrite = <span class="keyword">true</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> ByteBuffer readBuffer;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> writeBufferConfiguredForWrite = <span class="keyword">true</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">volatile</span> ByteBuffer writeBuffer;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> direct;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">SocketBufferHandler</span><span class="params">(<span class="keyword">int</span> readBufferSize, <span class="keyword">int</span> writeBufferSize,  //由连接器获取连接之后创建对应channel时创建,并被wrapper和channel持有</span></span></span><br><span class="line"><span class="function"><span class="params">         <span class="keyword">boolean</span> direct)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.direct = direct;</span><br><span class="line">     <span class="keyword">if</span> (direct) &#123;</span><br><span class="line">         readBuffer = ByteBuffer.allocateDirect(readBufferSize);</span><br><span class="line">         writeBuffer = ByteBuffer.allocateDirect(writeBufferSize);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         readBuffer = ByteBuffer.allocate(readBufferSize);</span><br><span class="line">         writeBuffer = ByteBuffer.allocate(writeBufferSize);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>NioSelectorPool:读写使用了selector多路复用,这里说的blocking应该指的是selecotr的blocking</li></ul><figure class="highlight java"><figcaption><span>NioSelectorPool</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类实现处理读写channel缓冲逻辑,其中NioBlockingSelector部分逻辑在connector部分写了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NioSelectorPool</span> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> ConcurrentLinkedQueue&lt;Selector&gt; selectors =</span><br><span class="line">            <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;(); <span class="comment">//不使用block的选择器缓冲</span></span><br><span class="line">  <span class="keyword">protected</span> NioBlockingSelector blockingSelector; <span class="comment">//blocking使用的选择器      </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//写逻辑,这里有部分代码没看,就是tomcat从Servlet,还是什么组件进行的写回操作</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(ByteBuffer buf, NioChannel socket, Selector selector,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">long</span> writeTimeout, <span class="keyword">boolean</span> block)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( SHARED &amp;&amp; block ) &#123;</span><br><span class="line">            <span class="keyword">return</span> blockingSelector.write(buf,socket,writeTimeout);  <span class="comment">//只有阻塞并且SHARED=true,调用逻辑在connector部分写了</span></span><br><span class="line">        &#125;</span><br><span class="line">        SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> written = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> timedout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> keycount = <span class="number">1</span>; <span class="comment">//assume we can write</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis(); <span class="comment">//start the timeout timer  //下边代码实际相似</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ( (!timedout) &amp;&amp; buf.hasRemaining() ) &#123;  <span class="comment">//Remain =limit-position</span></span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ( keycount &gt; <span class="number">0</span> ) &#123; <span class="comment">//only write if we were registered for a write</span></span><br><span class="line">                    cnt = socket.write(buf); <span class="comment">//write the data</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt == -<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> EOFException();</span><br><span class="line"></span><br><span class="line">                    written += cnt;  <span class="comment">//写出的数量</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        time = System.currentTimeMillis(); <span class="comment">//reset our timeout timer</span></span><br><span class="line">                        <span class="keyword">continue</span>; <span class="comment">//we successfully wrote, try again without a selector//可以理解为如果能写出数据,那就说明此时写channel是可用的</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (cnt==<span class="number">0</span> &amp;&amp; (!block)) <span class="keyword">break</span>; <span class="comment">//don't block  如果=0且非阻塞则跳出</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//只有当这一次没有写出,并且还是阻塞,才执行以下逻辑,意思就是如果没有写出数据,并且服务器允许对此次写进行等待,那么执行以下逻辑</span></span><br><span class="line">                <span class="keyword">if</span> ( selector != <span class="keyword">null</span> ) &#123;</span><br><span class="line">                    <span class="comment">//register OP_WRITE to the selector</span></span><br><span class="line">                    <span class="keyword">if</span> (key==<span class="keyword">null</span>) key = socket.getIOChannel().register(selector, SelectionKey.OP_WRITE); <span class="comment">//注册</span></span><br><span class="line">                    <span class="keyword">else</span> key.interestOps(SelectionKey.OP_WRITE);</span><br><span class="line">                    <span class="keyword">if</span> (writeTimeout==<span class="number">0</span>) &#123;</span><br><span class="line">                        timedout = buf.hasRemaining();<span class="comment">//假设返回true[1]-&gt;[2]  这个逻辑是只能进行一次写操作,如果没写完就超时异常</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writeTimeout&lt;<span class="number">0</span>) &#123; <span class="comment">//阻塞逻辑</span></span><br><span class="line">                        keycount = selector.select(); <span class="comment">//这个逻辑说明一直进行写操作,必须等到buffer写完,否则一直继续循环</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        keycount = selector.select(writeTimeout);<span class="comment">//[3]-&gt;[4]</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//[2]:抛出异常  [4]:判断写代码用的时间是否&gt;writeTimeout 最大超时时间,大于就抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (writeTimeout &gt; <span class="number">0</span> &amp;&amp; (selector == <span class="keyword">null</span> || keycount == <span class="number">0</span>) ) timedout = (System.currentTimeMillis()-time)&gt;=writeTimeout;</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line">            <span class="keyword">if</span> ( timedout ) <span class="keyword">throw</span> <span class="keyword">new</span> SocketTimeoutException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="keyword">if</span> (selector != <span class="keyword">null</span>) selector.selectNow();<span class="comment">//removes the key from this selector</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> written;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//读取的逻辑   </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer buf, NioChannel socket, Selector selector, <span class="keyword">long</span> readTimeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> read(buf,socket,selector,readTimeout,<span class="keyword">true</span>);  <span class="comment">//idea的提示功能来进行这种读取的代码调用就这一种,也就是  //说如果是这种调用,那么必定是阻塞式除非使用反射</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer buf, NioChannel socket, Selector selector, <span class="keyword">long</span> readTimeout, <span class="keyword">boolean</span> block)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ( SHARED &amp;&amp; block ) &#123;</span><br><span class="line">            <span class="keyword">return</span> blockingSelector.read(buf,socket,readTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        SelectionKey key = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> timedout = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> keycount = <span class="number">1</span>; <span class="comment">//assume we can write</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis(); <span class="comment">//start the timeout timer</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ( (!timedout) ) &#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ( keycount &gt; <span class="number">0</span> ) &#123; <span class="comment">//only read if we were registered for a read</span></span><br><span class="line">                    cnt = socket.read(buf);</span><br><span class="line">                    <span class="keyword">if</span> (cnt == -<span class="number">1</span>) &#123; <span class="comment">//某一次读取-1</span></span><br><span class="line">                        <span class="keyword">if</span> (read == <span class="number">0</span>) &#123;<span class="comment">//说明第一次读取到-1</span></span><br><span class="line">                            read = -<span class="number">1</span>; <span class="comment">//返回值说明此处读取到末尾</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    read += cnt;</span><br><span class="line">                    <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>) <span class="keyword">continue</span>; <span class="comment">//read some more  //继续读取</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt==<span class="number">0</span> &amp;&amp; (read&gt;<span class="number">0</span> || (!block) ) ) <span class="keyword">break</span>; <span class="comment">//we are done reading  非阻塞或者此次读取为0并且已经不是第一次跳出</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( selector != <span class="keyword">null</span> ) &#123;<span class="comment">//perform a blocking read    不使用SHARED的阻塞方式,超时逻辑和write相同</span></span><br><span class="line">                    <span class="comment">//register OP_WRITE to the selector</span></span><br><span class="line">                    <span class="keyword">if</span> (key==<span class="keyword">null</span>) key = socket.getIOChannel().register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    <span class="keyword">else</span> key.interestOps(SelectionKey.OP_READ);</span><br><span class="line">                    <span class="keyword">if</span> (readTimeout==<span class="number">0</span>) &#123;</span><br><span class="line">                        timedout = (read==<span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readTimeout&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                        keycount = selector.select();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        keycount = selector.select(readTimeout);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (readTimeout &gt; <span class="number">0</span> &amp;&amp; (selector == <span class="keyword">null</span> || keycount == <span class="number">0</span>) ) timedout = (System.currentTimeMillis()-time)&gt;=readTimeout;</span><br><span class="line">            &#125;<span class="comment">//while</span></span><br><span class="line">            <span class="keyword">if</span> ( timedout ) <span class="keyword">throw</span> <span class="keyword">new</span> SocketTimeoutException();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</span><br><span class="line">                key.cancel();</span><br><span class="line">                <span class="keyword">if</span> (selector != <span class="keyword">null</span>) selector.selectNow();<span class="comment">//removes the key from this selector</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> read;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="processor-和adaptor"><a class="header-anchor" href="#processor-和adaptor">¶</a>processor 和adaptor</h4><h5 id="Http11Processor-一般处理http请求的process"><a class="header-anchor" href="#Http11Processor-一般处理http请求的process">¶</a>Http11Processor 一般处理http请求的process</h5><ul><li>继承图<br><img src="http://pmftd1xvt.bkt.clouddn.com/Http11Processor.png" alt=""></li></ul><figure class="highlight java"><figcaption><span>Http11Processor::构造器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Http11Processor</span><span class="params">(AbstractHttp11Protocol&lt;?&gt; protocol)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line"></span><br><span class="line">        userDataHelper = <span class="keyword">new</span> UserDataHelper(log);</span><br><span class="line"></span><br><span class="line">        inputBuffer = <span class="keyword">new</span> Http11InputBuffer(request, protocol.getMaxHttpHeaderSize());</span><br><span class="line">        request.setInputBuffer(inputBuffer);</span><br><span class="line"></span><br><span class="line">        outputBuffer = <span class="keyword">new</span> Http11OutputBuffer(response, protocol.getMaxHttpHeaderSize());</span><br><span class="line">        response.setOutputBuffer(outputBuffer);</span><br><span class="line">         <span class="comment">//... 设置in/outBuffer</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> Request(), <span class="keyword">new</span> Response()); <span class="comment">//实例化req和res对象</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>关于in/outBuffer<br><img src="http://pmftd1xvt.bkt.clouddn.com/Http11InputBuffer.png" alt=""></li></ul><h4 id="mapper"><a class="header-anchor" href="#mapper">¶</a>mapper</h4><ul><li>mapper 的构造初始填充<br>mapper 创建于service,连接使用都是公用的mapper,填充由mapperListener导致,发生在content构造之后<br>首先理解关于路由的过程 tomcat将url 分为三部分 如: localhost:8080/demo/index.hmlt<br>localhost 为host<br>demo 为content<br>index.html Wrapper<br>tomcat 按照多级映射 mapper包含host[] -&gt;context[] -&gt;wrapper[]</li></ul><figure class="highlight java"><figcaption><span>Mapper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型</span></span><br><span class="line"> <span class="comment">// ------------------------------------------------- MapElement Inner Class</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapElement</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> T object;  <span class="comment">//这个T就是应该存放的对象</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MapElement</span><span class="params">(String name, T object)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.object = object;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedHost</span> <span class="keyword">extends</span> <span class="title">MapElement</span>&lt;<span class="title">Host</span>&gt; </span>&#123;  <span class="comment">//host映射,它持有ContextList 只不过是对数组的封装</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> ContextList contextList;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Link to the "real" MappedHost, shared by all aliases.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> MappedHost realHost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Links to all registered aliases, for easy enumeration. This field</span></span><br><span class="line"><span class="comment">         * is available only in the "real" MappedHost. In an alias this field</span></span><br><span class="line"><span class="comment">         * is &lt;code&gt;null&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;MappedHost&gt; aliases;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Constructor used for the primary Host</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> name The name of the virtual host</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> host The host</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MappedHost</span><span class="params">(String name, Host host)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name, host);</span><br><span class="line">            realHost = <span class="keyword">this</span>;</span><br><span class="line">            contextList = <span class="keyword">new</span> ContextList();</span><br><span class="line">            aliases = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextList</span> </span>&#123;  ContextList实现</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> MappedContext[] contexts;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> nesting;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ContextList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(<span class="keyword">new</span> MappedContext[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">ContextList</span><span class="params">(MappedContext[] contexts, <span class="keyword">int</span> nesting)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.contexts = contexts;</span><br><span class="line">            <span class="keyword">this</span>.nesting = nesting;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ContextList <span class="title">addContext</span><span class="params">(MappedContext mappedContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">int</span> slashCount)</span> </span>&#123;</span><br><span class="line">            MappedContext[] newContexts = <span class="keyword">new</span> MappedContext[contexts.length + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (insertMap(contexts, newContexts, mappedContext)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ContextList(newContexts, Math.max(nesting,</span><br><span class="line">                        slashCount));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ContextList <span class="title">removeContext</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">            MappedContext[] newContexts = <span class="keyword">new</span> MappedContext[contexts.length - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (removeMap(contexts, newContexts, path)) &#123;</span><br><span class="line">                <span class="keyword">int</span> newNesting = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (MappedContext context : newContexts) &#123;</span><br><span class="line">                    newNesting = Math.max(newNesting, slashCount(context.name));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ContextList(newContexts, newNesting);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedContext</span> <span class="keyword">extends</span> <span class="title">MapElement</span>&lt;<span class="title">Void</span>&gt; </span>&#123; <span class="comment">//context映射,内部含有ContextVersion对象,该对象是对MappedWrapper的封装</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">volatile</span> ContextVersion[] versions;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MappedContext</span><span class="params">(String name, ContextVersion firstVersion)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.versions = <span class="keyword">new</span> ContextVersion[] &#123; firstVersion &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextVersion</span> <span class="keyword">extends</span> <span class="title">MapElement</span>&lt;<span class="title">Context</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String path;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> slashCount;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> WebResourceRoot resources;</span><br><span class="line">        <span class="keyword">public</span> String[] welcomeResources;</span><br><span class="line">        <span class="keyword">public</span> MappedWrapper defaultWrapper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">public</span> MappedWrapper[] exactWrappers = <span class="keyword">new</span> MappedWrapper[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">public</span> MappedWrapper[] wildcardWrappers = <span class="keyword">new</span> MappedWrapper[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">public</span> MappedWrapper[] extensionWrappers = <span class="keyword">new</span> MappedWrapper[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> nesting = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> paused;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ContextVersion</span><span class="params">(String version, String path, <span class="keyword">int</span> slashCount,</span></span></span><br><span class="line"><span class="function"><span class="params">                Context context, WebResourceRoot resources,</span></span></span><br><span class="line"><span class="function"><span class="params">                String[] welcomeResources)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(version, context);</span><br><span class="line">            <span class="keyword">this</span>.path = path;</span><br><span class="line">            <span class="keyword">this</span>.slashCount = slashCount;</span><br><span class="line">            <span class="keyword">this</span>.resources = resources;</span><br><span class="line">            <span class="keyword">this</span>.welcomeResources = welcomeResources;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPaused</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> paused;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markPaused</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            paused = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedWrapper</span> <span class="keyword">extends</span> <span class="title">MapElement</span>&lt;<span class="title">Wrapper</span>&gt; </span>&#123; <span class="comment">//wrapper是最小容器</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jspWildCard;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> resourceOnly;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MappedWrapper</span><span class="params">(String name, Wrapper wrapper, <span class="keyword">boolean</span> jspWildCard,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">boolean</span> resourceOnly)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name, wrapper);</span><br><span class="line">            <span class="keyword">this</span>.jspWildCard = jspWildCard;</span><br><span class="line">            <span class="keyword">this</span>.resourceOnly = resourceOnly;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------</span><br><span class="line">mapper 通过url 映射到正确的Wrap过程</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">internalMap</span><span class="params">(CharChunk host, CharChunk uri,</span></span></span><br><span class="line"><span class="function"><span class="params">            String version, MappingData mappingData)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//mapper中查找使用了二分法</span></span><br><span class="line">        <span class="comment">//[0]: 确保host不为空</span></span><br><span class="line">        <span class="keyword">if</span> (mappingData.host != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// The legacy code (dating down at least to Tomcat 4.1) just</span></span><br><span class="line">            <span class="comment">// skipped all mapping work in this case. That behaviour has a risk</span></span><br><span class="line">            <span class="comment">// of returning an inconsistent result.</span></span><br><span class="line">            <span class="comment">// I do not see a valid use case for it.</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        uri.setLimit(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Virtual host mapping [1]: 虚拟主机映射</span></span><br><span class="line">        MappedHost[] hosts = <span class="keyword">this</span>.hosts;</span><br><span class="line">        MappedHost mappedHost = exactFindIgnoreCase(hosts, host); <span class="comment">//根据host寻找</span></span><br><span class="line">        <span class="keyword">if</span> (mappedHost == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Note: Internally, the Mapper does not use the leading * on a</span></span><br><span class="line">            <span class="comment">//       wildcard host. This is to allow this shortcut.</span></span><br><span class="line">            <span class="keyword">int</span> firstDot = host.indexOf(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">if</span> (firstDot &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> offset = host.getOffset();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    host.setOffset(firstDot + offset);</span><br><span class="line">                    mappedHost = exactFindIgnoreCase(hosts, host);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// Make absolutely sure this gets reset</span></span><br><span class="line">                    host.setOffset(offset);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mappedHost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mappedHost = defaultHost;</span><br><span class="line">                <span class="keyword">if</span> (mappedHost == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mappingData.host = mappedHost.object;   <span class="comment">//设置host,该host就是StandardHost</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Context mapping [2]:获取context映射</span></span><br><span class="line">        ContextList contextList = mappedHost.contextList; <span class="comment">// 获取对应host中的contextList映射</span></span><br><span class="line">        MappedContext[] contexts = contextList.contexts;  <span class="comment">// 该host对应的所有contextMapper 数组</span></span><br><span class="line">        <span class="keyword">int</span> pos = find(contexts, uri);  <span class="comment">//根据uri 寻找</span></span><br><span class="line">        <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lastSlash = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> uriEnd = uri.getEnd();</span><br><span class="line">        <span class="keyword">int</span> length = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line">        MappedContext context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            context = contexts[pos];</span><br><span class="line">            <span class="keyword">if</span> (uri.startsWith(context.name)) &#123;</span><br><span class="line">                length = context.name.length();</span><br><span class="line">                <span class="keyword">if</span> (uri.getLength() == length) &#123;</span><br><span class="line">                    found = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (uri.startsWithIgnoreCase(<span class="string">"/"</span>, length)) &#123;</span><br><span class="line">                    found = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (lastSlash == -<span class="number">1</span>) &#123;</span><br><span class="line">                lastSlash = nthSlash(uri, contextList.nesting + <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                lastSlash = lastSlash(uri);</span><br><span class="line">            &#125;</span><br><span class="line">            uri.setEnd(lastSlash);</span><br><span class="line">            pos = find(contexts, uri); <span class="comment">//根据uri寻找对应的contentMap</span></span><br><span class="line">        &#125;</span><br><span class="line">        uri.setEnd(uriEnd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            <span class="keyword">if</span> (contexts[<span class="number">0</span>].name.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">                context = contexts[<span class="number">0</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                context = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到了context</span></span><br><span class="line">        mappingData.contextPath.setString(context.name); <span class="comment">//设置根据context name设置</span></span><br><span class="line">        <span class="comment">//[3]:获取版本映射</span></span><br><span class="line">        ContextVersion contextVersion = <span class="keyword">null</span>;  <span class="comment">//[]要找到的</span></span><br><span class="line">        ContextVersion[] contextVersions = context.versions;  <span class="comment">//获取关于warp的映射数组,tomcat9 貌似对于一个context做了一个版本区别,按理此处不该是数组,</span></span><br><span class="line">        <span class="comment">//明显是通过不同数组代表不同的版本,默认使用的话应该是1</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> versionCount = contextVersions.length;</span><br><span class="line">        <span class="keyword">if</span> (versionCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            Context[] contextObjects = <span class="keyword">new</span> Context[contextVersions.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; contextObjects.length; i++) &#123;</span><br><span class="line">                contextObjects[i] = contextVersions[i].object;</span><br><span class="line">            &#125;</span><br><span class="line">            mappingData.contexts = contextObjects;</span><br><span class="line">            <span class="keyword">if</span> (version != <span class="keyword">null</span>) &#123;</span><br><span class="line">                contextVersion = exactFind(contextVersions, version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (contextVersion == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Return the latest version</span></span><br><span class="line">            <span class="comment">// The versions array is known to contain at least one element</span></span><br><span class="line">            contextVersion = contextVersions[versionCount - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        mappingData.context = contextVersion.object; <span class="comment">//设置context</span></span><br><span class="line">        mappingData.contextSlashCount = contextVersion.slashCount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Wrapper mapping [4]:按照正确的版本寻找对应的 Wrapper</span></span><br><span class="line">        <span class="keyword">if</span> (!contextVersion.isPaused()) &#123;</span><br><span class="line">            internalMapWrapper(contextVersion, uri, mappingData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tomcat中jdni"><a class="header-anchor" href="#tomcat中jdni">¶</a>tomcat中jdni</h4><p>为了容易理解,我在各部分尽量加上uml或能够说明的图,我也发现单纯看代码比较麻烦</p><ul><li>jdni的实现逻辑:以name路径,找到对应的对象;以路径存储对象;存储类型分为直接对象,和对象信息,后者在取出时按照信息进行实例化</li></ul><img src="/2018/10/06/tomcat/JDNI1.png" class=""><p>spi 则是jdni具体实现,所有操作都要围绕NamingManager操作,用户入口接口一般时initialContext</p><ul><li>jdni模型</li></ul><p>jdni的组织结构是一个树结构,Context类型表示上下文,资源节点必须存在于context节点中,一个Context存在任意子节点,节点类型可以为Context或者资源,任意节点都有name,充当路径,根节点一般为&quot;&quot;<br>如: tomcat中  lookup(“java:UserDatabase”) 表示以根节点&quot;&quot;开始寻找UserDatabase表示的资源</p><ul><li>jdni相关类<br>NamingManager 属于一个静态类,是jdni的核心,基本操作都是调用该类进行中转发起的<br>ObjectFacotry 寻找对象后创建对象的类,但并不代表实际创建对象的操作是该类处理的,在org.apache.naming包下实现了部分子类,用以处理不同的jndi类型,该工厂决定了对象按照Refence如何创建<br>initialContext 用于用户接口 lookup 和bind 函数分别用于获取和存储对象<br>StateFactory 用于绑定时如何处理的工厂,tomcat貌似没有实现这种子类</li></ul><figure class="highlight java"><figcaption><span>JNDI</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;  <span class="comment">//该接口是jdk上下文接口,这里只提及一个常量</span></span><br><span class="line"><span class="comment">//jndi 使用hashTable作为供namingManager使用的环境变量 </span></span><br><span class="line"><span class="keyword">public</span> Hashtable&lt;?,?&gt; getEnvironment() <span class="keyword">throws</span> NamingException;</span><br><span class="line">String INITIAL_CONTEXT_FACTORY = <span class="string">"java.naming.factory.initial"</span>;  <span class="comment">//key,value 此处value表示一个factory的类位置,供namingManager初始化 initFactory使用,此处tomcat也使用了该变量,用于指定initFactory,放到了system.pero中</span></span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitialContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InitialContext</span><span class="params">()</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        init(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        myProps = (Hashtable&lt;Object,Object&gt;)</span><br><span class="line">                ResourceManager.getInitialEnvironment(environment); <span class="comment">//此处代码最终会在system.pero中寻找和Context中常量匹配的key,value 当作env</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (myProps.get(Context.INITIAL_CONTEXT_FACTORY) != <span class="keyword">null</span>) &#123; <span class="comment">//如果设置了,则进行初始化context</span></span><br><span class="line">            <span class="comment">// user has specified initial context factory; try to get it</span></span><br><span class="line">            getDefaultInitCtx();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Context <span class="title">getDefaultInitCtx</span><span class="params">()</span> <span class="keyword">throws</span> NamingException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!gotDefault) &#123;</span><br><span class="line">            defaultInitCtx = NamingManager.getInitialContext(myProps); <span class="comment">//NamingManager通过env获得initFactory,然后通过Fac创建出initContext</span></span><br><span class="line">            gotDefault = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (defaultInitCtx == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoInitialContextException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultInitCtx;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//lookup和bind</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(Name name)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getURLOrDefaultInitCtx(name).lookup(name);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Name name, Object obj)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        getURLOrDefaultInitCtx(name).bind(name, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Context <span class="title">getURLOrDefaultInitCtx</span><span class="params">(Name name)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (NamingManager.hasInitialContextFactoryBuilder()) &#123;  <span class="comment">//当设置FactoryBuilder,则通过builder获取fac,再获取initContext</span></span><br><span class="line">            <span class="keyword">return</span> getDefaultInitCtx();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            String first = name.get(<span class="number">0</span>);</span><br><span class="line">            String scheme = getURLScheme(first);</span><br><span class="line">            <span class="keyword">if</span> (scheme != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Context ctx = NamingManager.getURLContext(scheme, myProps); <span class="comment">//否则说明要通过urlFactory来获取initContext,tomcat就采取的这种方式,实际上tomcat也创建了initContext,但是它没有用,而非要使用url路径来返回一个新的context</span></span><br><span class="line">                <span class="keyword">if</span> (ctx != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ctx;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getDefaultInitCtx();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心NamingManager</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingManager</span></span>&#123;</span><br><span class="line"><span class="comment">//获取initContext的方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getInitialContext</span><span class="params">(Hashtable&lt;?,?&gt; env)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        InitialContextFactory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        InitialContextFactoryBuilder builder = getInitialContextFactoryBuilder(); 尝试通过builder获取</span><br><span class="line">        <span class="keyword">if</span> (builder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No builder installed, use property</span></span><br><span class="line">            <span class="comment">// Get initial context factory class name</span></span><br><span class="line"></span><br><span class="line">            String className = env != <span class="keyword">null</span> ?</span><br><span class="line">                (String)env.get(Context.INITIAL_CONTEXT_FACTORY) : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">                NoInitialContextException ne = <span class="keyword">new</span> NoInitialContextException(</span><br><span class="line">                    <span class="string">"Need to specify class name in environment or system "</span> +</span><br><span class="line">                    <span class="string">"property, or in an application resource file: "</span> +</span><br><span class="line">                    Context.INITIAL_CONTEXT_FACTORY);</span><br><span class="line">                <span class="keyword">throw</span> ne;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ServiceLoader&lt;InitialContextFactory&gt; loader =</span><br><span class="line">                    ServiceLoader.load(InitialContextFactory<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            Iterator&lt;InitialContextFactory&gt; iterator = loader.iterator();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    InitialContextFactory f = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (f.getClass().getName().equals(className)) &#123;</span><br><span class="line">                        factory = f;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServiceConfigurationError e) &#123;</span><br><span class="line">                NoInitialContextException ne =</span><br><span class="line">                        <span class="keyword">new</span> NoInitialContextException(</span><br><span class="line">                                <span class="string">"Cannot load initial context factory "</span></span><br><span class="line">                                        + <span class="string">"'"</span> + className + <span class="string">"'"</span>);</span><br><span class="line">                ne.setRootCause(e);</span><br><span class="line">                <span class="keyword">throw</span> ne;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">                    Object o = helper.loadClass(className).newInstance();  <span class="comment">//通过INITIAL_CONTEXT_FACTORY 对应的class位置,反射出factory</span></span><br><span class="line">                    factory = (InitialContextFactory) o;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    NoInitialContextException ne =</span><br><span class="line">                            <span class="keyword">new</span> NoInitialContextException(</span><br><span class="line">                                    <span class="string">"Cannot instantiate class: "</span> + className);</span><br><span class="line">                    ne.setRootCause(e);</span><br><span class="line">                    <span class="keyword">throw</span> ne;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            factory = builder.createInitialContextFactory(env);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factory.getInitialContext(env); <span class="comment">//通过factory创建initContext</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//试图使用url来创建</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getURLContext</span><span class="params">(String scheme,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Hashtable&lt;?,?&gt; environment)</span>  <span class="keyword">throws</span> NamingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// pass in 'null' to indicate creation of generic context for scheme</span></span><br><span class="line">        <span class="comment">// (i.e. not specific to a URL).</span></span><br><span class="line"></span><br><span class="line">            Object answer = getURLObject(scheme, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, environment);</span><br><span class="line">            <span class="keyword">if</span> (answer <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">                <span class="keyword">return</span> (Context)answer;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">getURLObject</span><span class="params">(String scheme, Object urlInfo,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// e.g. "ftpURLContextFactory"</span></span><br><span class="line">        ObjectFactory factory = (ObjectFactory)ResourceManager.getFactory(</span><br><span class="line">            Context.URL_PKG_PREFIXES, environment, nameCtx,</span><br><span class="line">            <span class="string">"."</span> + scheme + <span class="string">"."</span> + scheme + <span class="string">"URLContextFactory"</span>, defaultPkgPrefix);  <span class="comment">//创建url工厂</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Found object factory</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> factory.getObjectInstance(urlInfo, name, nameCtx, environment);  <span class="comment">//通过url工厂返回context</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            NamingException ne = <span class="keyword">new</span> NamingException();</span><br><span class="line">            ne.setRootCause(e);</span><br><span class="line">            <span class="keyword">throw</span> ne;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化对象的接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getObjectInstance</span><span class="params">(Object refInfo, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">                          Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectFactory factory;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use builder if installed</span></span><br><span class="line">        ObjectFactoryBuilder builder = getObjectFactoryBuilder(); <span class="comment">//有builder使用builder创建fac</span></span><br><span class="line">        <span class="keyword">if</span> (builder != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// builder must return non-null factory</span></span><br><span class="line">            factory = builder.createObjectFactory(refInfo, environment);</span><br><span class="line">            <span class="keyword">return</span> factory.getObjectInstance(refInfo, name, nameCtx,</span><br><span class="line">                environment);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use reference if possible  否则使用Reference中的factoryClass来创建工厂</span></span><br><span class="line">        Reference ref = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            ref = (Reference) refInfo;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (refInfo <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">            ref = ((Referenceable)(refInfo)).getReference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object answer;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String f = ref.getFactoryClassName();</span><br><span class="line">            <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// if reference identifies a factory, use exclusively</span></span><br><span class="line"></span><br><span class="line">                factory = getObjectFactoryFromReference(ref, f); <span class="comment">//获取工厂</span></span><br><span class="line">                <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> factory.getObjectInstance(ref, name, nameCtx, <span class="comment">//通过工厂创建对象</span></span><br><span class="line">                                                     environment);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// No factory found, so return original refInfo.</span></span><br><span class="line">                <span class="comment">// Will reach this point if factory class is not in</span></span><br><span class="line">                <span class="comment">// class path and reference does not contain a URL for it</span></span><br><span class="line">                <span class="keyword">return</span> refInfo;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// if reference has no factory, check for addresses</span></span><br><span class="line">                <span class="comment">// containing URLs</span></span><br><span class="line"></span><br><span class="line">                answer = processURLAddrs(ref, name, nameCtx, environment);</span><br><span class="line">                <span class="keyword">if</span> (answer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> answer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// try using any specified factories</span></span><br><span class="line">        answer =</span><br><span class="line">            createObjectFromFactories(refInfo, name, nameCtx, environment);</span><br><span class="line">        <span class="keyword">return</span> (answer != <span class="keyword">null</span>) ? answer : refInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大概流程:</span></span><br><span class="line">  initialContext创建-&gt;根据env创建initContext-&gt;lookup-&gt;NamingManager判断并返回一个Context-&gt;由该context进行lookup-&gt;根据此类型信息中的factory进行创建</span><br></pre></td></tr></table></figure><ul><li>tomcat</li></ul><figure class="highlight java"><figcaption><span>tomcat实现</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该context作为节点存放资源和context</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingContext</span> <span class="keyword">implements</span> <span class="title">Context</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Hashtable&lt;String, Object&gt; env; <span class="comment">//环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> HashMap&lt;String, NamingEntry&gt; bindings;<span class="comment">//实际上绑定的资源就在此处,实际上绑定较为简单,lookup存在创建对象的复杂性</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Object <span class="title">lookup</span><span class="params">(Name name, <span class="keyword">boolean</span> resolveLinks)</span> <span class="keyword">throws</span> NamingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Removing empty parts</span></span><br><span class="line">        <span class="keyword">while</span> ((!name.isEmpty()) &amp;&amp; (name.get(<span class="number">0</span>).length() == <span class="number">0</span>)) name = name.getSuffix(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (name.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// If name is empty, a newly allocated naming context is returned</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NamingContext(env, <span class="keyword">this</span>.name, bindings);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NamingEntry entry = bindings.get(name.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (entry == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NameNotFoundException(sm.getString(<span class="string">"namingContext.nameNotBound"</span>, name, name.get(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.size() &gt; <span class="number">1</span>)  <span class="comment">//这说明寻找的位置必定是 /xx/xxx/xxxx 这种,说明存在子context,此时的this是作为当前根节点,</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// If the size of the name is greater that 1, then we go through a</span></span><br><span class="line">            <span class="comment">// number of subcontexts.</span></span><br><span class="line">            <span class="keyword">if</span> (entry.type != NamingEntry.CONTEXT)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NamingException(sm.getString(<span class="string">"namingContext.contextExpected"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ((Context) entry.value).lookup(name.getSuffix(<span class="number">1</span>)); <span class="comment">//从相对位置1开始继续寻找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>  <span class="comment">//否则说明该context节点就是包含资源的context,从此处map寻找就可以</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((resolveLinks) &amp;&amp; (entry.type == NamingEntry.LINK_REF)) <span class="comment">//这是tomcat为了实现局部和全局资源而做的,在局部context(指的是tomcat context)ref就是这么实现的</span></span><br><span class="line">            &#123;</span><br><span class="line">                String link = ((LinkRef) entry.value).getLinkName();</span><br><span class="line">                <span class="keyword">if</span> (link.startsWith(<span class="string">"."</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// Link relative to this context</span></span><br><span class="line">                    <span class="keyword">return</span> lookup(link.substring(<span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> InitialContext(env).lookup(link);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (entry.type == NamingEntry.REFERENCE)  <span class="comment">//REFERENCE 就是jndi推荐存放的数据类型</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Object obj = NamingManager.getObjectInstance(entry.value, name, <span class="keyword">this</span>, env);  <span class="comment">//按照jndi的流程进行创建</span></span><br><span class="line">                    <span class="keyword">if</span> (entry.value <span class="keyword">instanceof</span> ResourceRef) <span class="comment">//ResourceRef类型存放着大量信息</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> singleton = Boolean.parseBoolean((String) ((ResourceRef) entry.value).get(<span class="string">"singleton"</span>).getContent());</span><br><span class="line">                        <span class="keyword">if</span> (singleton) <span class="comment">//假设是单例模式,就改变entry信息</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            entry.type = NamingEntry.ENTRY;</span><br><span class="line">                            entry.value = obj;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (NamingException e)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception e)</span><br><span class="line">                &#123;</span><br><span class="line">                    log.warn(sm.getString(<span class="string">"namingContext.failResolvingReference"</span>), e);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NamingException(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> entry.value; <span class="comment">//这中情况说明是单例,上次已经创建了一次,这一次返回就好了</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Name name, Object obj, <span class="keyword">boolean</span> rebind)</span> <span class="keyword">throws</span> NamingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!checkWritable())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((!name.isEmpty()) &amp;&amp; (name.get(<span class="number">0</span>).length() == <span class="number">0</span>)) name = name.getSuffix(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (name.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NamingException(sm.getString(<span class="string">"namingContext.invalidName"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NamingEntry entry = bindings.get(name.get(<span class="number">0</span>));  <span class="comment">//获取当前路径的当前根节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.size() &gt; <span class="number">1</span>)<span class="comment">//说明当前路径为 /xx/xxx/xxxx..</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="keyword">null</span>)  <span class="comment">//说明xx按理说是一个context,但是对于this来说并没有把它当作子context存放,也就是说tomcat的NamingContext.bind方法不支持直接创建子context</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NameNotFoundException(sm.getString(<span class="string">"namingContext.nameNotBound"</span>, name, name.get(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (entry.type == NamingEntry.CONTEXT)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (rebind)</span><br><span class="line">                &#123;</span><br><span class="line">                    ((Context) entry.value).rebind(name.getSuffix(<span class="number">1</span>), obj);  <span class="comment">//重新调用bind函数,实际就是树结构的向下节点查询</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ((Context) entry.value).bind(name.getSuffix(<span class="number">1</span>), obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NamingException(sm.getString(<span class="string">"namingContext.contextExpected"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//说明到了最后一层context节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ((!rebind) &amp;&amp; (entry != <span class="keyword">null</span>)) <span class="comment">//说明this节点存放着name对应的数据,但是并不进行rebind,因此alreadyBound异常</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NameAlreadyBoundException(sm.getString(<span class="string">"namingContext.alreadyBound"</span>, name.get(<span class="number">0</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Getting the type of the object and wrapping it within a new</span></span><br><span class="line">                <span class="comment">// NamingEntry</span></span><br><span class="line">                Object toBind = NamingManager.getStateToBind(obj, name, <span class="keyword">this</span>, env);  <span class="comment">//调用状态工厂进行处理,但是tomcat并没有实现状态工厂,而是每次存储都是符合逻辑的数据</span></span><br><span class="line">                <span class="keyword">if</span> (toBind <span class="keyword">instanceof</span> Context)</span><br><span class="line">                &#123;</span><br><span class="line">                    entry = <span class="keyword">new</span> NamingEntry(name.get(<span class="number">0</span>), toBind, NamingEntry.CONTEXT);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (toBind <span class="keyword">instanceof</span> LinkRef)</span><br><span class="line">                &#123;</span><br><span class="line">                    entry = <span class="keyword">new</span> NamingEntry(name.get(<span class="number">0</span>), toBind, NamingEntry.LINK_REF);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (toBind <span class="keyword">instanceof</span> Reference)</span><br><span class="line">                &#123;</span><br><span class="line">                    entry = <span class="keyword">new</span> NamingEntry(name.get(<span class="number">0</span>), toBind, NamingEntry.REFERENCE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (toBind <span class="keyword">instanceof</span> Referenceable)</span><br><span class="line">                &#123;</span><br><span class="line">                    toBind = ((Referenceable) toBind).getReference();</span><br><span class="line">                    entry = <span class="keyword">new</span> NamingEntry(name.get(<span class="number">0</span>), toBind, NamingEntry.REFERENCE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    entry = <span class="keyword">new</span> NamingEntry(name.get(<span class="number">0</span>), toBind, NamingEntry.ENTRY);</span><br><span class="line">                &#125;</span><br><span class="line">                bindings.put(name.get(<span class="number">0</span>), entry); <span class="comment">// 真正进行的绑定操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//tomcat实现的url工厂,用于返回context来进行look操作和bind操作,实际上该类只返回selectorContext</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">javaURLContextFactory</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ObjectFactory</span>, <span class="title">InitialContextFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((ContextBindings.isThreadBound()) ||  <span class="comment">//判断当前线程或者类加载器是否被ContextBindings存储,这是实现隔离机制的方式</span></span><br><span class="line">            (ContextBindings.isClassLoaderBound())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SelectorContext((Hashtable&lt;String,Object&gt;)environment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a new (writable) initial context.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Context <span class="title">getInitialContext</span><span class="params">(Hashtable&lt;?,?&gt; environment)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ContextBindings.isThreadBound() ||</span><br><span class="line">            (ContextBindings.isClassLoaderBound())) &#123; <span class="comment">//当前线程满足条件,返回SelectorContext</span></span><br><span class="line">            <span class="comment">// Redirect the request to the bound initial context </span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SelectorContext(</span><br><span class="line">                    (Hashtable&lt;String,Object&gt;)environment, <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If the thread is not bound, return a shared writable context</span></span><br><span class="line">        <span class="keyword">if</span> (initialContext == <span class="keyword">null</span>) &#123; <span class="comment">//如果不满足,那么就会以initialContext做为上下文的根处理,并且是会被共享的</span></span><br><span class="line">            <span class="keyword">synchronized</span>(javaURLContextFactory<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (initialContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    initialContext = <span class="keyword">new</span> NamingContext(</span><br><span class="line">                            (Hashtable&lt;String,Object&gt;)environment, MAIN);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> initialContext;  <span class="comment">//对于没有的被绑定的线程,都会使用该context作为起始点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//该类也是static类,使用了大量的map进行保持线程,类加载器:context的映射,Server和Context就是通过类加载器区分的context,从而实现了全局和局部资源</span></span><br><span class="line"><span class="comment">//绑定的过程发生在NamingContextListener.lifeEvnet过程中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextBindings</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------------------------------------------------------- Variables</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bindings object - naming context. Keyed by object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;Object,Context&gt; objectBindings = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bindings thread - naming context. Keyed by thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;Thread,Context&gt; threadBindings = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bindings thread - object. Keyed by thread.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;Thread,Object&gt; threadObjectBindings = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bindings class loader - naming context. Keyed by class loader.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;ClassLoader,Context&gt; clBindings = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bindings class loader - object. Keyed by class loader.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;ClassLoader,Object&gt; clObjectBindings = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorContext</span> <span class="keyword">implements</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">lookup</span><span class="params">(Name name)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"selectorContext.methodUsingName"</span>, <span class="string">"lookup"</span>,</span><br><span class="line">                    name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip the URL header</span></span><br><span class="line">        <span class="comment">// Find the appropriate NamingContext according to the current bindings</span></span><br><span class="line">        <span class="comment">// Execute the lookup on that context</span></span><br><span class="line">        <span class="keyword">return</span> getBoundContext().lookup(parseName(name)); <span class="comment">//通过ContextBindings获取对应范围的NamingContext,再使用context.lookup 取得实际对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(Name name, Object obj)</span> <span class="comment">//同理</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        getBoundContext().bind(parseName(name), obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//tomcat中实现的一部分object工厂源码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Object factory for resource links.&lt;/p&gt;  处理ResouceLink的关键</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Remy Maucherat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceLinkFactory</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Context globalContext = <span class="keyword">null</span>; <span class="comment">//该类持有全局context的引用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span></span><br><span class="line"><span class="function"><span class="params">            Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> ResourceLinkRef)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we process this request?</span></span><br><span class="line">        Reference ref = (Reference) obj;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the global ref addr</span></span><br><span class="line">        String globalName = <span class="keyword">null</span>;</span><br><span class="line">        RefAddr refAddr = ref.get(ResourceLinkRef.GLOBALNAME);  <span class="comment">//获取global标签到全局context.lookUp就能获取到全局资源</span></span><br><span class="line">        <span class="keyword">if</span> (refAddr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            globalName = refAddr.getContent().toString();</span><br><span class="line">            <span class="comment">// Confirm that the current web application is currently configured</span></span><br><span class="line">            <span class="comment">// to access the specified global resource</span></span><br><span class="line">            <span class="keyword">if</span> (!validateGlobalResourceAccess(globalName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Object result = <span class="keyword">null</span>;</span><br><span class="line">            result = globalContext.lookup(globalName);</span><br><span class="line">            <span class="comment">// Check the expected type</span></span><br><span class="line">            String expectedClassName = ref.getClassName();</span><br><span class="line">            <span class="keyword">if</span> (expectedClassName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                        sm.getString(<span class="string">"resourceLinkFactory.nullType"</span>, name, globalName));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; expectedClazz = Class.forName(</span><br><span class="line">                        expectedClassName, <span class="keyword">true</span>, Thread.currentThread().getContextClassLoader());</span><br><span class="line">                <span class="keyword">if</span> (!expectedClazz.isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">"resourceLinkFactory.wrongType"</span>,</span><br><span class="line">                            name, globalName, expectedClassName, result.getClass().getName()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(sm.getString(<span class="string">"resourceLinkFactory.unknownType"</span>,</span><br><span class="line">                        name, globalName, expectedClassName), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Object factory for resource links for shared data sources.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * 用来处理: javax.sql.DataSource数据类型,我这里是一个错误例子 ,正确的server.xml例子见后文</span></span><br><span class="line"><span class="comment">  &lt;GlobalNamingResources&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Editable user database that can also be used by</span></span><br><span class="line"><span class="comment"> UserDatabaseRealm to authenticate users</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;Resource name="UserDatabase" auth="Container"</span></span><br><span class="line"><span class="comment">  type="org.apache.catalina.UserDatabase"  //此处是UserDatabase</span></span><br><span class="line"><span class="comment">  description="User database that can be updated and saved"</span></span><br><span class="line"><span class="comment">  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"</span></span><br><span class="line"><span class="comment">  pathname="conf/tomcat-users.xml"/&gt;</span></span><br><span class="line"><span class="comment">&lt;/GlobalNamingResources&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;ResourceLink</span></span><br><span class="line"><span class="comment">                            name="UserData"</span></span><br><span class="line"><span class="comment">                            global="UserDatabase"</span></span><br><span class="line"><span class="comment">                            type="org.apache.catalina.UserDatabase" </span></span><br><span class="line"><span class="comment">                            factory="org.apache.naming.factory.DataSourceLinkFactory"&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/ResourceLink&gt;</span></span><br><span class="line"><span class="comment">该工厂创建的对象必须要有userName 和password两个属性,否则错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceLinkFactory</span> <span class="keyword">extends</span> <span class="title">ResourceLinkFactory</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> NamingException </span>&#123; <span class="comment">//该函数由selector.lookup传递过来</span></span><br><span class="line">        Object result = <span class="keyword">super</span>.getObjectInstance(obj, name, nameCtx, environment); <span class="comment">//获取全局资源</span></span><br><span class="line">        <span class="comment">// Can we process this request?</span></span><br><span class="line">        <span class="keyword">if</span> (result!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            Reference ref = (Reference) obj;</span><br><span class="line">            RefAddr userAttr = ref.get(<span class="string">"username"</span>); <span class="comment">//根据userName和password标签处理</span></span><br><span class="line">            RefAddr passAttr = ref.get(<span class="string">"password"</span>); </span><br><span class="line">            <span class="keyword">if</span> (userAttr.getContent()!=<span class="keyword">null</span> &amp;&amp; passAttr.getContent()!=<span class="keyword">null</span>) &#123; <span class="comment">//很明显,当userName和password两个标签为null,此处异常</span></span><br><span class="line">                result = wrapDataSource(result,userAttr.getContent().toString(), passAttr.getContent().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这里使用了proxy,以前写自定义数据源的时候用过,主要是DataSourceHandler.invoke的实现</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> Object <span class="title">wrapDataSource</span><span class="params">(Object datasource, String username, String password)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; proxyClass = Proxy.getProxyClass(datasource.getClass().getClassLoader(), datasource.getClass().getInterfaces());</span><br><span class="line">            Constructor&lt;?&gt; proxyConstructor = proxyClass.getConstructor(<span class="keyword">new</span> Class[] &#123; InvocationHandler<span class="class">.<span class="keyword">class</span> &#125;)</span>;</span><br><span class="line">            DataSourceHandler handler = <span class="keyword">new</span> DataSourceHandler((DataSource)datasource, username, password);</span><br><span class="line">            <span class="keyword">return</span> proxyConstructor.newInstance(handler);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">                Throwable cause = x.getCause();</span><br><span class="line">                <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> ThreadDeath) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (ThreadDeath) cause;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> VirtualMachineError) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (VirtualMachineError) cause;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cause <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                    x = (Exception) cause;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (x <span class="keyword">instanceof</span> NamingException) <span class="keyword">throw</span> (NamingException)x;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                NamingException nx = <span class="keyword">new</span> NamingException(x.getMessage());</span><br><span class="line">                nx.initCause(x);</span><br><span class="line">                <span class="keyword">throw</span> nx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//扩展:</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> DataSource ds;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String username;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String password;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Method getConnection;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DataSourceHandler</span><span class="params">(DataSource ds, String username, String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ds = ds;</span><br><span class="line">            <span class="keyword">this</span>.username = username;</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">            getConnection = ds.getClass().getMethod(<span class="string">"getConnection"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"getConnection"</span>.equals(method.getName()) &amp;&amp; (args==<span class="keyword">null</span> || args.length==<span class="number">0</span>)) &#123; <span class="comment">//当调用getConection</span></span><br><span class="line">                args = <span class="keyword">new</span> String[] &#123;username,password&#125;;</span><br><span class="line">                method = getConnection; <span class="comment">//将设置为ds的getConnection(user,word)这个函数 </span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"unwrap"</span>.equals(method.getName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> unwrap((Class&lt;?&gt;)args[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> method.invoke(ds,args); <span class="comment">//调用代理函数</span></span><br><span class="line">            &#125;<span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException</span><br><span class="line">                        &amp;&amp; t.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> t.getCause();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="comment">//其他工厂等用到的时候再看</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>tomcat9 关于context的naming资源在web.xml中jndi的解析<br>在tomcat web.xml配置的信息和在Server.xml 中<Context> 配置的资源一样都是属于局部Context的,注意Tomcat默认给的Server.xml中UserData的type和实际使用的类型不一样,因此默认的那么创建要通过factory这个属性<br>在context中的资源必须通过 &quot;java:comp/env/…&quot;的路径进行寻找,因为在NamingContextListener处理context类型的时候创建了了两个子上下文</li></ul><figure class="highlight xml"><figcaption><span>web.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//1.解析web.xml的过程是contextConfig监听器做的,并且发生在context.startInternal,该life监听器激活的顺序大于context.NamingContextListener</span><br><span class="line">//2.当解析web.xml会构建一个WebXml类,存放了关于所有web.xml的信息,在contextConfig某一步过程中将解析到到的关于naming标签创建的Resouce子类加入到context.namingResource中,并随着namingContextListener的激活,注册到对应的jndi中</span><br><span class="line">//3.web.xml解析的resource就属于局部jdni并不是引用,不过应该可以解析引用的</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>contextConfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该监听器进行context加载时复杂的处理,这里截取关于naming的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 构建WebXml 对象,使用degister,并且栈顶第一个元素就是WebXml</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextConfig</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span></span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">void</span> <span class="title">webConfig</span>()</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">WebXmlParser webXmlParser = <span class="keyword">new</span> WebXmlParser(context.getXmlNamespaceAware(), context.getXmlValidation(), context.getXmlBlockExternal());</span><br><span class="line"></span><br><span class="line">        Set&lt;WebXml&gt; defaults = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        defaults.add(getDefaultWebXmlFragment(webXmlParser));</span><br><span class="line"></span><br><span class="line">        Set&lt;WebXml&gt; tomcatWebXml = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        tomcatWebXml.add(getTomcatWebXmlFragment(webXmlParser));</span><br><span class="line"></span><br><span class="line">        WebXml webXml = createWebXml();  <span class="comment">//创建WebXml对象</span></span><br><span class="line">   <span class="comment">// Parse context level web.xml</span></span><br><span class="line">        InputSource contextWebXml = getContextWebXmlSource();</span><br><span class="line">        <span class="keyword">if</span> (!webXmlParser.parseWebXml(contextWebXml, webXml, <span class="keyword">false</span>)) <span class="comment">//解析,这里将WebXml push进了栈顶</span></span><br><span class="line">        &#123;</span><br><span class="line">            ok = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">.............</span><br><span class="line"><span class="comment">// Step 9. Apply merged web.xml to Context</span></span><br><span class="line">            <span class="keyword">if</span> (ok)</span><br><span class="line">            &#123;</span><br><span class="line">                configureContext(webXml); <span class="comment">//将webXml中关于naming的资源加入到对应context的namingResource中</span></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理解析出来的WebXml中数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureContext</span><span class="params">(WebXml webxml)</span></span>&#123;  <span class="comment">//此处不仅仅处理naming资源</span></span><br><span class="line"> <span class="comment">//解析web.xml中配置的naming资源,并加入到context的namingResources中</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet())</span><br><span class="line">        &#123;</span><br><span class="line">            context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        context.setDenyUncoveredHttpMethods(webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">        context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">        context.setDistributable(webxml.isDistributable());</span><br><span class="line"><span class="comment">//总之将这些资源添加到context.namingResource中,并且因为这个监听器触发的比NamingContextListener早,因此是一次性bind的</span></span><br><span class="line">        <span class="keyword">for</span> (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEjb ejbRef : webxml.getEjbRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEnvironment environment : webxml.getEnvEntries().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addEnvironment(environment);</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">for</span> (MessageDestinationRef mdr : webxml.getMessageDestinationRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">// Name is just used for ordering</span></span><br><span class="line">        <span class="keyword">for</span> (ContextResourceEnvRef resource : webxml.getResourceEnvRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextResource resource : webxml.getResourceRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line"> <span class="keyword">for</span> (ContextService service : webxml.getServiceRefs().values())</span><br><span class="line">        &#123;</span><br><span class="line">            context.getNamingResources().addService(service);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// webxml解析规则部分</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebRuleSet</span> <span class="keyword">implements</span> <span class="title">RuleSet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureNamingRules</span><span class="params">(Digester digester)</span> </span>&#123; <span class="comment">//关于解析naming的部分</span></span><br><span class="line"> <span class="comment">//resource-ref</span></span><br><span class="line">        digester.addObjectCreate(fullPrefix + <span class="string">"/resource-ref"</span>,</span><br><span class="line">                                 <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResource"</span>);  <span class="comment">//明显是创建的ContextResource不是ContextResourceLink类型,也就是说创建的和在Server.xml配置的情况类似</span></span><br><span class="line">        digester.addSetNext(fullPrefix + <span class="string">"/resource-ref"</span>,  <span class="comment">//添加到WebXml子类</span></span><br><span class="line">                            <span class="string">"addResourceRef"</span>,</span><br><span class="line">                            <span class="string">"org.apache.tomcat.util.descriptor.web.ContextResource"</span>);</span><br><span class="line">        digester.addCallMethod(fullPrefix + <span class="string">"/resource-ref/description"</span>,  <span class="comment">//设置属性</span></span><br><span class="line">                               <span class="string">"setDescription"</span>, <span class="number">0</span>);</span><br><span class="line">        digester.addCallMethod(fullPrefix + <span class="string">"/resource-ref/res-auth"</span>,</span><br><span class="line">                               <span class="string">"setAuth"</span>, <span class="number">0</span>);</span><br><span class="line">        digester.addCallMethod(fullPrefix + <span class="string">"/resource-ref/res-ref-name"</span>,</span><br><span class="line">                               <span class="string">"setName"</span>, <span class="number">0</span>);</span><br><span class="line">        digester.addCallMethod(fullPrefix + <span class="string">"/resource-ref/res-sharing-scope"</span>,</span><br><span class="line">                               <span class="string">"setScope"</span>, <span class="number">0</span>);</span><br><span class="line">        digester.addCallMethod(fullPrefix + <span class="string">"/resource-ref/res-type"</span>,</span><br><span class="line">                               <span class="string">"setType"</span>, <span class="number">0</span>);</span><br><span class="line">        digester.addRule(fullPrefix + <span class="string">"/resource-ref/mapped-name"</span>,  <span class="comment">//这个规则实际上就是设置内部prop为 mapped-name:value 的键值对,在Server.xml解析过程中除了上述几个属性,多余的也是这么解析的</span></span><br><span class="line">                         <span class="keyword">new</span> MappedNameRule());</span><br><span class="line">        configureInjectionRules(digester, <span class="string">"web-app/resource-ref/"</span>);</span><br><span class="line">............</span><br><span class="line"><span class="comment">//结束之后在WebXml对象就有许多关于资源的key-value对</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如何引用全局资源 <a href="https://tomcat.apache.org/tomcat-9.0-doc/config/context.html#Resource_Links" target="_blank" rel="noopener">https://tomcat.apache.org/tomcat-9.0-doc/config/context.html#Resource_Links</a><br>1.目前来说我在源码HostConfig位置,tomcat是不会解析Meta-INF中context.xml多余的标签,因此局部引用方式我觉得在context.xml中写没有用<br>2.在Server.xml <Context>标签配置<ResourceLink><br>3.ResourceLink标签解析在server.xml解析完成</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"sharedDataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">global</span>=<span class="string">"sharedDataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">factory</span>=<span class="string">"org.apache.tomcat.jdbc.pool.DataSourceFactory"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">alternateUsernameAllowed</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">username</span>=<span class="string">"bar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">password</span>=<span class="string">"barpass"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line">&lt;/GlobalNamingResources&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/foo"</span><span class="attr">...</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">ResourceLink</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"appDataSource"</span>  //表示在<span class="attr">context</span>的<span class="attr">ContextJdni</span>中创建的名字</span></span><br><span class="line"><span class="tag">            <span class="attr">global</span>=<span class="string">"sharedDataSource"</span>  //引用的全局位置</span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">factory</span>=<span class="string">"org.apache.naming.factory.DataSourceLinkFactory"</span>  //注意如果填了此项,后边的两个也要填,否则异常</span></span><br><span class="line"><span class="tag">            <span class="attr">username</span>=<span class="string">"foo"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">password</span>=<span class="string">"foopass"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line">&lt;/Context&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/bar"</span><span class="attr">...</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">ResourceLink</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"appDataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">global</span>=<span class="string">"sharedDataSource"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line">&lt;/Context&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链接</title>
      <link href="/2018/09/05/%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/09/05/%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1>关于链接的相关重点描述</h1><h2 id="链接的两个步骤"><a class="header-anchor" href="#链接的两个步骤">¶</a>链接的两个步骤</h2><ul><li>符号解析:将每一个符号引用和符号定义联系起来<ul><li>程序中 定义和引用的符号(包括变量和函数)</li><li>编译器(编译过程)将定义的符号存放在 <code>符号表</code>中</li><li>编译器(编译过程)将符号的引用存放在重定位节(.rel.text rel.data)中</li></ul></li><li>重定位<ul><li>将多个代码段与数据段合并</li><li>计算定义的符号在虚拟地址空间中的绝对地址</li></ul></li></ul><h2 id="符号解析-符号绑定"><a class="header-anchor" href="#符号解析-符号绑定">¶</a>符号解析(符号绑定)</h2><h3 id="符号类型"><a class="header-anchor" href="#符号类型">¶</a>符号类型</h3><ul><li>全局符号(global symblos)<ul><li>非 static 函数及非 static 全局变量</li><li>g++编译器将未初始化全局变量初始化为0,将之变为强符号</li></ul></li><li>外部符号(external symbols)<ul><li>仅仅declear的函数,带有extern 声明的变量</li><li>也就是从语法角度来看函数声明总是extern,变量不带extern的话g++就会将之视为全局符号</li></ul></li><li>局部符号(local symbols)<ul><li>带有static修饰的静态符号</li><li>不是局部变量,局部变量编译时不会放到任何节中去</li></ul></li></ul><h3 id="多重定义符号处理"><a class="header-anchor" href="#多重定义符号处理">¶</a>多重定义符号处理</h3><ul><li>强符号不能多次定义</li><li>若一个符号被定义为弱及强,以强为准</li><li>存在多个弱定义则选择一个</li></ul><h3 id="概述"><a class="header-anchor" href="#概述">¶</a>概述</h3><p>1.编译器会将静态局部变量解析为独一无二的符号,分配在.data/.bss中,因此链接器对于static修饰局部符号不做修改<br>2.对于外部符号,在符号表中表示为NDE,链接器会在其他输入单元中寻找,如果没有输出异常信息<br>3.对于全局符号来说,链接要判断的工作就是在其他输入单元中不能存在相同的符号名</p><ul><li>符号解析的最终结果<ul><li>将全局符号唯一化,也就是说最终的符号表中的全局符号都是唯一的</li></ul></li></ul><h3 id="静态链接和符号解析"><a class="header-anchor" href="#静态链接和符号解析">¶</a>静态链接和符号解析</h3><p>静态库(static library) .a(linux)  .lib(window)<br>解析方式:链接器维护一个obj集合E,该集合最终被合并成可执行文件,未解析的符号(即外部符号)U,以及在前一个输入文件中定义的符号D</p><ul><li>对于命令行中个每一个输入文件f,若为obj则加入E,修改U和D来反应f的符号定义和引用,并输入下一个f</li><li>若f为.a,则尝试匹配U中未定义的符号和.a中定义的符号.若a中存在obj文件m则将m加入,并且修改U和D来反映m的符号情况,依次对其他文件进行,知道U和D都不发生改变.</li><li>当链接器完成工作后,若U为非空则输出一个错误.否则则进行和并及重定向E中的目标文件,构建可执行文件.</li></ul><p>解释:我之前一直在想所谓的符号解析到底对elf文件本身做了那些改变,这么来看实际上就是:</p><ul><li>保证全局变量唯一性:即保证合并后的符号表每个符号唯一</li><li>处理未定义符号:即去在符号表中去除未定义符号,并合并</li><li>静态符号不改变</li></ul><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E7%AC%A6%E5%8F%B7%E8%A7%A3%E6%9E%90%E7%BB%93%E6%9E%9C.png" class=""><p>符号表就是给链接器进行符号解析处理的一个信息,它并不参与到程序代码的任意一处去,如此图中的代码段,对于汇编代码来说,这些 符号就是<code>符号引用</code>,也就是要在链接过程得到真正的<code>地址</code>,编译器会将这些引用作为所谓的重定向信息添加到.rel text / .rel data中</p><h2 id="重定向"><a class="header-anchor" href="#重定向">¶</a>重定向</h2><h3 id="概述-v2"><a class="header-anchor" href="#概述-v2">¶</a>概述</h3><ul><li>重定位节和符号定义:<br>合并不同的节,如上图第二部分,当该聚合结构体构建后,那么在text,data段中的所有变量(data节) 函数(指令)都有了唯一的地址</li><li>重定位节中的符号引用:<br>即处理上图指令中的<code>符号引用</code>,通过重定位条目处理</li></ul><h3 id="重定位条目"><a class="header-anchor" href="#重定位条目">¶</a>重定位条目</h3><p>汇编器在汇编时并不知道数据和代码最终在内存中的实际位置,因此当遇到对最终位置位置的引用时,就会产生可<code>重定位条目</code>.函数引用对应.rel.text 全局变量对应.rel.data.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf32_Wordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf32_Swordr_addend;<span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf32_Rela;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Addrr_offset;<span class="comment">/* Address */</span></span><br><span class="line">  Elf64_Xwordr_info;<span class="comment">/* Relocation type and symbol index */</span></span><br><span class="line">  Elf64_Sxwordr_addend;<span class="comment">/* Addend */</span></span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>r_offset表示该条目据离其所在text节偏移<br>r_addend表示该条目到下一条指令的附加<br>可重定位条目类型有32种,这里仅仅研究2种</p><ul><li>R_X86_64_PC32: 使用相对pc定位,具体参照<code>深入计算机原理</code>3.6.3节,关于跳转部分.<br>原理:相对跳转方式 call xx  xx=下一条指令地址 - 目标地址</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val=sum(<span class="built_in">array</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>objdump代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line">   0:55                   push   %rbp</span><br><span class="line">   1:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">   4:48 83 ec 10          sub    $0x10,%rsp</span><br><span class="line">   8:be 02 00 00 00       mov    $0x2,%esi</span><br><span class="line">   d:bf 00 00 00 00       mov    $0x0,%edi</span><br><span class="line">  12:e8 00 00 00 00       callq  17 &lt;main+0x17&gt;</span><br><span class="line">  17:89 45 fc             mov    %eax,-0x4(%rbp)</span><br><span class="line">  1a:8b 45 fc             mov    -0x4(%rbp),%eax</span><br><span class="line">  1d:c9                   leaveq </span><br><span class="line">  1e:c3                   retq </span><br></pre></td></tr></table></figure><p>12: e8 00 00 00 00 就是xx的占位符<br>在符号解析完毕后<code>目标函数</code>的地址时确定的,<code>下一条指令</code>=重定向地址+r_addend,两者之差就是xx所要填上的</p><ul><li>R_X86_64_32:绝对定位<br>如全局变量在符号定位后其位置就是绝对的,直接改变并调用就行了.</li></ul><p>由于引用函数调用会改变pc数,才会采用相对pc跳转,否则也按照绝对就行了.<br>至此就完成了链接过程,在<code>可执行文件</code>中不会带有.rel节,并且生成了<code>program header</code>来描述每个<code>section</code>所占段位置.</p><h2 id="与动态库链接"><a class="header-anchor" href="#与动态库链接">¶</a>与动态库链接</h2><p>静态链接弊端:</p><ul><li>更新时要和要更新的库进行主动链接</li><li>所有使用了静态链接的程序都会将重复的代码 数据加载到内存中,浪费了内存空间</li></ul><p>共享库(shared library):</p><ul><li>在文件系统中,仅仅存在一个so文件,所有引用该库的<code>可执行目标文件</code>都共享该库的代码和数据,节省磁盘.</li><li>在内存运行中,所有不同的进程都可以共享该库的.text代码,节省内存.</li></ul><h3 id="加载时链接"><a class="header-anchor" href="#加载时链接">¶</a>加载时链接</h3><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E5%8A%A0%E8%BD%BD%E6%97%B6%E9%93%BE%E6%8E%A5.png" class=""><ol><li>创建动态库 gcc -shared -fpic - o <a href="http://xx.so" target="_blank" rel="noopener">xx.so</a> xx.c xx.c</li><li>gcc -o program xx.c ./xx.so<br>此时ld(链接器)执行了部分链接工作,复制了so中的重定位和符号表信息,并没有进行text和data的复制工作,处理符号解析工作,确定了唯一全局符号.</li><li>当加载器加载<code>可执行文件</code>时,将会调用动态链接器(在<code>program header</code>中声明的.interp节表示的位置),该链接器也是一个共享库文件,此时动态链接器完成一下工作:<ul><li>重定位.so文件中的文本及数据到某个内存段</li><li>重定位program中的所有对动态库的引用</li></ul></li><li>之后共享库的内存位置就固定了,并在程序执行过程中都不会改变</li></ol><p>动态链接的情况下，不同的模块装载地址一样是不行的。对于一个单个程序，我们可以指定各个模块的地址，但是对于某个模块被多个程序使用，或者是多个模块被多个程序使用，那么就会产生冲突的情况，比如1个人指定A模块为0x1000-0x2000，另一个人不使用B模块，而且指定B模块地址为0x1000-0x2000，那么很明显，A与B两个模块无法同时存在，任何人不能再同一个程序内使用模块A与B。</p><h3 id="运行时动态链接"><a class="header-anchor" href="#运行时动态链接">¶</a>运行时动态链接</h3><p>位置无关代码(PIC)</p><ul><li>共享库代码在加载时位置是可以不确定的</li><li>即使代码库长度改变,也不影响调用它的程序</li><li>无需修改程序代码就可将共享库加载到任意地址运行<br>引用情况: 程序对共享库的引用情况,以及共享库自身的引用情况</li></ul><ol><li>模块内部调用,采用pc相对偏移寻找</li></ol><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E6%A8%A1%E5%9D%97%E5%86%85%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8.png" class=""> <ul><li>当动态链接时,动态模块会被分配到确定的内存位置</li><li>模块内部代码调用pc偏移量实际就是pc下一条位置和函数指令间距,所以即使该模块在任何地方,该偏移量固定.</li><li>无需重定位</li></ul><ol start="2"><li>模块内部数据访问</li></ol><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E6%A8%A1%E5%9D%97%E5%86%85%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BC%95%E7%94%A8.png" class=""><ul><li>动态库文件是由编译器构成,因此对于动态库文件的汇编代码实现和一般的可重入文件是不同</li><li>这里也说明动态库内部文件没有进行节合并<br>3 模块外数据调用   (PIC)</li></ul><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E6%A8%A1%E5%9D%97%E5%A4%96%E6%95%B0%E6%8D%AE%E5%BC%95%E7%94%A8.png" class=""><p>4 模块外函数调用   (PIC)</p><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E6%A8%A1%E5%9D%97%E9%97%B4%E5%87%BD%E6%95%B0%E4%B8%80.png" class=""><img src="/2018/09/05/%E9%93%BE%E6%8E%A5/%E6%A8%A1%E5%9D%97%E9%97%B4%E5%87%BD%E6%95%B0%E4%BA%8C.png" class=""><p>此图中GOT[2]存放的是动态链接延迟绑定代码的地址,该代码做了重定位工作</p>]]></content>
      
      
      
        <tags>
            
            <tag> 链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编相关要点</title>
      <link href="/2018/09/05/%E6%B1%87%E7%BC%96%E7%9B%B8%E5%85%B3%E8%A6%81%E7%82%B9/"/>
      <url>/2018/09/05/%E6%B1%87%E7%BC%96%E7%9B%B8%E5%85%B3%E8%A6%81%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="关于c语言在下的调用过程描述-IA32"><a class="header-anchor" href="#关于c语言在下的调用过程描述-IA32">¶</a>关于c语言在下的调用过程描述(IA32)</h3><img src="/2018/09/05/%E6%B1%87%E7%BC%96%E7%9B%B8%E5%85%B3%E8%A6%81%E7%82%B9/IA32%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B.png" class=""><ul><li>关于函数调用指令call指令<br>该指令将PC压栈,然后跳转,也就是图中的返回地址,此时sp指向返回地址</li><li>入栈 sp先减,后写入数据;</li><li>准备阶段<ul><li>pushl %ebp,此时esp指向函数栈帧底部(存放上一个函数的栈帧底部位置)</li><li>movl %esp,%ebp,此时esp 和ebp指向了函数栈帧底部</li><li>subl 分配栈空间</li></ul></li><li>设置局部变量<ul><li>准备入口参数(X64架构下,参数优先放在寄存器中)</li></ul></li><li>处理返回参数</li><li>结束<ul><li>movl %ebp,%esp  将栈顶置为被调用函数栈底</li><li>pop %ebp  将bp置为原调用函数栈底,并且将sp还原为返回地址处</li></ul></li></ul><h3 id="关于c-类在反汇编中的体现"><a class="header-anchor" href="#关于c-类在反汇编中的体现">¶</a>关于c++ 类在反汇编中的体现</h3><figure class="highlight cpp"><figcaption><span>classTest.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T a;</span><br><span class="line">a.test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过objdump -d 查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">00000000004005ad &lt;main&gt;:</span><br><span class="line">  4005ad:55                   push   %rbp</span><br><span class="line">  4005ae:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4005b1:48 83 ec 10          sub    $0x10,%rsp</span><br><span class="line">  4005b5:48 8d 45 f0          lea    -0x10(%rbp),%rax</span><br><span class="line">  4005b9:48 89 c7             mov    %rax,%rdi</span><br><span class="line">  4005bc:e8 07 00 00 00       callq  4005c8 &lt;_ZN1T4testEv&gt;</span><br><span class="line">  4005c1:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4005c6:c9                   leaveq </span><br><span class="line">  4005c7:c3                   retq   </span><br><span class="line"></span><br><span class="line">00000000004005c8 &lt;_ZN1T4testEv&gt;:</span><br><span class="line">  4005c8:55                   push   %rbp</span><br><span class="line">  4005c9:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4005cc:48 89 7d f8          mov    %rdi,-0x8(%rbp)</span><br><span class="line">  4005d0:48 8b 45 f8          mov    -0x8(%rbp),%rax</span><br><span class="line">  4005d4:c7 00 03 00 00 00    movl   $0x3,(%rax)</span><br><span class="line">  4005da:5d                   pop    %rbp</span><br><span class="line">  4005db:c3                   retq   </span><br><span class="line">  4005dc:0f 1f 40 00          nopl   0x0(%rax)</span><br></pre></td></tr></table></figure><ul><li><p>目前可以推断出来的信息</p></li><li><p>4005b5:48 8d 45 f0          lea    -0x10(%rbp),%rax   //<br>4005b9:48 89 c7             mov    %rax,%rdi<br>4005bc:e8 07 00 00 00       callq  4005c8 &lt;_ZN1T4testEv&gt; //对于类的函数来说,g++编译将其看作一个全局符号,其具有绝对的地址</p></li><li><p>这个例子中很明确的可以看出</p></li><li><p>1.main函数中对于栈类进行空间分配的方式,由于没有显示的调用某个特定的构造函数,所以此处直接分配了16个空间其中位于底地址的4字节存放了该实例化 a.a的数据</p></li><li><p>2.调用实例化a.test的过程</p><ul><li>%rdi 存放了实例化a的地址,实际上该地址也就是a.a的地址</li><li>4005d4:c7 00 03 00 00 00    movl   $0x3,(%rax) 此时rax就是rdi 也就是a.a的栈地址,执行a=3;</li><li>如果执行b=3 那么就是movl   $0x3,0x04(%rax)</li></ul></li><li><p>结论:</p><ol><li>对于类/结构体来说,其内存的布局方式都是相同的,变量占用空间,类中的函数当作全局符号进行解析</li><li>类并没有什么难以理解的,全局变量对于c++来说其作用域就是文件单元;类的作用域就是类,两者只是一种组织方式</li><li>对于类而言,其内部的变量基本上都被处理为local var,分配在栈或者堆上,并不是全局变量存放在data中</li></ol><ul><li>如本例直接分配的类实例</li><li>作用在局部作用域中</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> index=<span class="number">0</span>;index++;index&lt;<span class="number">10</span>)&#123;</span><br><span class="line"> T a;</span><br><span class="line"> a.test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">00000000004005ad &lt;main&gt;:</span><br><span class="line">  4005ad:55                   push   %rbp</span><br><span class="line">  4005ae:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4005b1:48 83 ec 10          sub    $0x10,%rsp</span><br><span class="line">  4005b5:c7 45 fc 00 00 00 00 movl   $0x0,-0x4(%rbp)</span><br><span class="line">  4005bc:eb 0c                jmp    4005ca &lt;main+0x1d&gt;</span><br><span class="line">  4005be:48 8d 45 f0          lea    -0x10(%rbp),%rax   &#x2F;&#x2F;循环内部代码</span><br><span class="line">  4005c2:48 89 c7             mov    %rax,%rdi</span><br><span class="line">  4005c5:e8 1a 00 00 00       callq  4005e4 &lt;_ZN1T4testEv&gt;</span><br><span class="line">  4005ca:8b 45 fc             mov    -0x4(%rbp),%eax   &#x2F;&#x2F;循环判断代码</span><br><span class="line">  4005cd:8d 50 01             lea    0x1(%rax),%edx</span><br><span class="line">  4005d0:89 55 fc             mov    %edx,-0x4(%rbp)</span><br><span class="line">  4005d3:85 c0                test   %eax,%eax</span><br><span class="line">  4005d5:0f 95 c0             setne  %al</span><br><span class="line">  4005d8:84 c0                test   %al,%al</span><br><span class="line">  4005da:75 e2                jne    4005be &lt;main+0x11&gt;</span><br><span class="line">  4005dc:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4005e1:c9                   leaveq </span><br><span class="line">  4005e2:c3                   retq   </span><br><span class="line">  4005e3:90                   nop</span><br></pre></td></tr></table></figure><p>对于循环内部生成空间会被本身循环利用,如反复产生的a对象,而类的析构函数不是用来处理栈分配的空间,只有在堆中创建析构才是重要的<br>对于循环体结束后,栈分配的空间即使没有回收也不能进行调用了,此处可以使用指针访问到,数据是否正确这和编译器优化有关,比如说此处编译器将内存回收,填上其他值;并且在c++的语法中也不推荐去调用此处,但是如果通过指针应该还是可以访问到的.</p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elf</title>
      <link href="/2018/09/04/elf/"/>
      <url>/2018/09/04/elf/</url>
      
        <content type="html"><![CDATA[<h1>elf文件(Executable and Linkable Format)</h1><p><a href="http://www.skyfree.org/linux/references/ELF_Format.pdf" target="_blank" rel="noopener">文档参考</a></p><hr><h3 id="文件分类"><a class="header-anchor" href="#文件分类">¶</a>文件分类</h3><ul><li>可重定位文件:由编译器产生,具有重定位信息,没有程序头</li><li>可执行文件:由链接器产生</li></ul><img src="/2018/09/04/elf/1.png" class=""><p>上图说明了，一个目标文件生成可执行文件，然后加载到内存后的映射等，三个步骤。<br>ELF头描述了生成该文件的系统的字的大小和字节序。ELF和节头部表之间每个部分都称为一个节（section）<br>.text：已编译程序的机器代码<br>.rodada：只读数据，比如printf语句中的格式串。<br>.data：已经初始化的全局C变量。局部变量在运行时保存在栈中。即不再data节也不在bss节<br>.bss：未初始化的全局C变量。不占据实际的空间，仅仅是一个占位符。所以未初始化变量不需要占据任何实际的磁盘空间。C++弱化BSS段。可能是没有，也可能有。<br>.symtab：一个符号表，它存放“在程序中定义和引用的函数和全局变量的信息”。<br>.rel.text：一个.text节中位置的列表。（将来重定位使用的）<br>.rel.data：被模块引用或定义的任何全局变量的重定位信息。<br>.debug：调试符号表，其内容是程序中定义的局部变量和类型定义。<br>.line：原始C源程序的行号和.text节中机器指令之间的映射。<br>.strtab：一个字符串表.</p><p>程序头表通过段的形式将可执行文件分类，其描述了不同段具有的性质，比如说load，说明这部分内容是载入程序的，PT_GNU_RELRO，表示被定义为该段的内容在重定向后不能再被读取<br>section table 则通过将文件本身的信息描述在不同的section中，如 text table表示了汇编代码。。</p><hr><h3 id="文件格式"><a class="header-anchor" href="#文件格式">¶</a>文件格式</h3><blockquote><p>通过直接查看linux  <code>usr/include/elf.h</code>文件可以明确了解</p></blockquote><img src="/2018/09/04/elf/elf%E6%A0%BC%E5%BC%8F.png" class="" title="elf两种典型格式"><ul><li>elf.h头文件</li></ul><table><thead><tr><th>名称</th><th>大小</th><th>用途</th></tr></thead><tbody><tr><td>Elf32_Half</td><td>2</td><td>无符号整数</td></tr><tr><td>Elf64_Half</td><td>2</td><td>无符号整数</td></tr><tr><td>Elf32_Word</td><td>4</td><td>无符号整数</td></tr><tr><td>Elf32_Sword</td><td>4</td><td>带符号整数</td></tr><tr><td>Elf64_Word</td><td>4</td><td>无符号整数</td></tr><tr><td>Elf64_Sword</td><td>4</td><td>带符号整数</td></tr><tr><td>Elf32_Xword</td><td>8</td><td>无符号整数</td></tr><tr><td>Elf32_Sxword</td><td>8</td><td>带符号整数</td></tr><tr><td>Elf64_Xword</td><td>8</td><td>带符号整数</td></tr><tr><td>Elf64_Sxword</td><td>8</td><td>无符号整数</td></tr><tr><td>Elf32_Addr</td><td>4</td><td>地址</td></tr><tr><td>Elf64_Addr</td><td>8</td><td>地址</td></tr><tr><td>Elf32_Off</td><td>4</td><td>偏移</td></tr><tr><td>Elf64_Off</td><td>8</td><td>偏移</td></tr><tr><td>Elf32_Section</td><td>2</td><td>节</td></tr><tr><td>Elf64_Section</td><td>2</td><td>节</td></tr><tr><td>Elf32_Versym</td><td>2</td><td>符号信息</td></tr><tr><td>Elf64_Versym</td><td>2</td><td>符号信息</td></tr></tbody></table><hr><h3 id="efl头-elf-header"><a class="header-anchor" href="#efl头-elf-header">¶</a>efl头 elf header</h3><ul><li>elf头:32位和64位分别占52和60字节</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    unsigned chare_ident[EI_NIDENT];&#x2F;* 魔数 *&#x2F;</span><br><span class="line">    Elf32_Halfe_type;&#x2F;* 文件类型:可执行&#x2F;可重入 *&#x2F;</span><br><span class="line">    Elf32_Halfe_machine;&#x2F;* 机器 *&#x2F;</span><br><span class="line">    Elf32_Worde_version;&#x2F;* 文件版本</span><br><span class="line">    Elf32_Addre_entry;&#x2F;* 入口点地址*&#x2F;</span><br><span class="line">    Elf32_Offe_phoff;&#x2F;* 程序头距离文件起始偏移量*&#x2F;</span><br><span class="line">    Elf32_Offe_shoff;&#x2F;* 节头表距离文件起始偏移量 *&#x2F;</span><br><span class="line">    Elf32_Worde_flags;&#x2F;* 处理器标志 *&#x2F;</span><br><span class="line">    Elf32_Halfe_ehsize;&#x2F;*elf头大小 *&#x2F;</span><br><span class="line">    Elf32_Halfe_phentsize;&#x2F;* 程序头中各条目大小 *&#x2F;</span><br><span class="line">    Elf32_Halfe_phnum;&#x2F;* 程序头中条目数量 *&#x2F;</span><br><span class="line">    Elf32_Halfe_shentsize;&#x2F;* 节头表中条目大小 *&#x2F;</span><br><span class="line">    Elf32_Halfe_shnum;&#x2F;* 节头表中条目数量 *&#x2F;</span><br><span class="line">    Elf32_Halfe_shstrndx;&#x2F;* 接头表在符号表中的下标 *&#x2F;</span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    unsigned chare_ident[EI_NIDENT];&#x2F;* Magic number and other info *&#x2F;</span><br><span class="line">    Elf64_Halfe_type;&#x2F;* Object file type *&#x2F;</span><br><span class="line">    Elf64_Halfe_machine;&#x2F;* Architecture *&#x2F;</span><br><span class="line">    Elf64_Worde_version;&#x2F;* Object file version *&#x2F;</span><br><span class="line">    Elf64_Addre_entry;&#x2F;* Entry point virtual address *&#x2F;</span><br><span class="line">    Elf64_Offe_phoff;&#x2F;* Program header table file offset *&#x2F;</span><br><span class="line">    Elf64_Offe_shoff;&#x2F;* Section header table file offset *&#x2F;</span><br><span class="line">    Elf64_Worde_flags;&#x2F;* Processor-specific flags *&#x2F;</span><br><span class="line">    Elf64_Halfe_ehsize;&#x2F;* ELF header size in bytes *&#x2F;</span><br><span class="line">    Elf64_Halfe_phentsize;&#x2F;* Program header table entry size *&#x2F;</span><br><span class="line">    Elf64_Halfe_phnum;&#x2F;* Program header table entry count *&#x2F;</span><br><span class="line">    Elf64_Halfe_shentsize;&#x2F;* Section header table entry size *&#x2F;</span><br><span class="line">    Elf64_Halfe_shnum;&#x2F;* Section header table entry count *&#x2F;</span><br><span class="line">    Elf64_Halfe_shstrndx;&#x2F;* Section header string table index *&#x2F;</span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><ul><li>使用linux readelf命令可以读取elf文件,参考<a href="http://man.linuxde.net/readelf" target="_blank" rel="noopener">elf命令</a></li><li>使用hexdump -x obj -n xx 按照16进制双字节排列 读取obj前xx字节数据</li><li>-x表示双排列 - n表示读取多少  -s 表示偏移</li></ul><figure class="highlight cpp"><figcaption><span>test.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val=sum(<span class="built_in">array</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><figcaption><span>sum.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s+a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@riMlzL162793 link]# readelf -h test</span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2&#39;s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS&#x2F;ABI:                            UNIX - System V</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x4004c0</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          6648 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         9</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         30</span><br><span class="line">  Section header string table index: 27</span><br><span class="line">[root@riMlzL162793 link]# hexdump -x test -n 64</span><br><span class="line">#此处每两个字节是按照高低位放置的</span><br><span class="line">0000000    457f    464c    0102    0001    0000    0000    0000    0000 </span><br><span class="line">0000010    0002    003e    0001    0000    04c0    0040    0000    0000 </span><br><span class="line">0000020    0040    0000    0000    0000    19f8    0000    0000    0000</span><br><span class="line">0000030    0000    0000    0040    0038    0009    0040    001e    001b</span><br><span class="line">0000040</span><br></pre></td></tr></table></figure><ul><li>第一行:7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 ,前四个字节7f454c46(0x45,0x4c,0x46是’e’,‘l’,'f’对应的ascii编码）是一个魔数，表示这是一个ELF对象。02 表示elf64 01 表示小端补码,01,其他都为0</li><li>第二行:0002 表示为可执行文件,003e表示机器Advanced Micro Devices X86-64,0000 0001表示版本1,0000 0000 0040 04c0 表示 入口地址</li><li>第三行:0000 0000 0000 0040 表示progrom header table距离文件偏移(64), 0000 0000 0000 19f8表示section header table偏移(6648)</li><li>第四行:0000 0000 表示处理器标志,0040表示elf header大小(64),0038表示程序头表大小(56),0009表示progrom header entry数量(9) ,0040表示section header 大小 (64),001e section header entry(30),section header 字符串(string table)下标27</li></ul><hr><h3 id="程序头表-progrom-header"><a class="header-anchor" href="#程序头表-progrom-header">¶</a>程序头表 progrom header</h3><p>程序头表将可执行文件按照段进行分类</p><p>可执行文件或者共享目标文件的程序头部是一个结构数组，每个结构描述了一个段 或者系统准备程序执行所必需的其它信息。目标文件的“段”包含一个或者多个“节区”， 也就是“段内容(Segment Contents)”。程序头部仅对于可执行文件和共享目标文件 有意义。 可执行目标文件在 ELF 头部的 e_phentsize和e_phnum 成员中给出其自身程序头部 的大小。程序头部的数据结构:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf32_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf32_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf32_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf32_Wordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf32_Wordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf32_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf32_Wordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf32_Phdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Wordp_type;<span class="comment">/* Segment type */</span></span><br><span class="line">    Elf64_Wordp_flags;<span class="comment">/* Segment flags */</span></span><br><span class="line">    Elf64_Offp_offset;<span class="comment">/* Segment file offset */</span></span><br><span class="line">    Elf64_Addrp_vaddr;<span class="comment">/* Segment virtual address */</span></span><br><span class="line">    Elf64_Addrp_paddr;<span class="comment">/* Segment physical address */</span></span><br><span class="line">    Elf64_Xwordp_filesz;<span class="comment">/* Segment size in file */</span></span><br><span class="line">    Elf64_Xwordp_memsz;<span class="comment">/* Segment size in memory */</span></span><br><span class="line">    Elf64_Xwordp_align;<span class="comment">/* Segment alignment */</span></span><br><span class="line">&#125; Elf64_Phdr;</span><br></pre></td></tr></table></figure><ul><li>type 此数组元素描述的段的类型，或者如何解释此数组元素的信息。具体如.</li><li>offset 此成员给出从文件头到该段第一个字节的偏移。</li><li>vaddr 此成员给出段的第一个字节将被放到内存中的虚拟地址。</li><li>paddr 此成员仅用于与物理地址相关的系统中。</li><li>filesz 此成员给出段在文件映像中所占的字节数。可以为 0。</li><li>memsz 此成员给出段在内存映像中占用的字节数。可以为 0。</li><li>flags 此成员给出与段相关的标志。</li><li>align 可加载的进程段的 p_vaddr 和 p_offset 取值必须合适，相对于对页面大小的取模而言。此成员给出在文件中和内存中如何 对齐。数值 0 和 1 表示不需要对齐。否则 p_align 应该是个正整数，并且是 2 的幂次数，p_vaddr 和 p_offset 对 p_align 取模后应该相等。</li></ul><figure class="highlight plain"><figcaption><span>程序头宏定义</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* Legal values for p_type (segment type).  *&#x2F;</span><br><span class="line">#definePT_NULL0&#x2F;* Program header table entry unused *&#x2F;</span><br><span class="line">#define PT_LOAD1&#x2F;* Loadable program segment *&#x2F;</span><br><span class="line">#define PT_DYNAMIC2&#x2F;* Dynamic linking information 动态链接信息*&#x2F;</span><br><span class="line">#define PT_INTERP3&#x2F;* Program interpreter  程序解释器，linux下该段存放了动态链接器的位置*&#x2F;</span><br><span class="line">#define PT_NOTE4&#x2F;* Auxiliary information  辅助信息*&#x2F;</span><br><span class="line">#define PT_SHLIB5&#x2F;* Reserved 保留 *&#x2F;</span><br><span class="line">#define PT_PHDR6&#x2F;* Entry for header table itself 代表程序头本身*&#x2F;</span><br><span class="line">#define PT_TLS7&#x2F;* Thread-local storage segment *&#x2F;</span><br><span class="line">#definePT_NUM8&#x2F;* Number of defined types *&#x2F;</span><br><span class="line">#define PT_LOOS0x60000000&#x2F;* Start of OS-specific *&#x2F;</span><br><span class="line">#define PT_GNU_EH_FRAME0x6474e550&#x2F;* GCC .eh_frame_hdr segment *&#x2F;</span><br><span class="line">#define PT_GNU_STACK0x6474e551&#x2F;* Indicates stack executability *&#x2F;</span><br><span class="line">#define PT_GNU_RELRO0x6474e552&#x2F;* Read-only after relocation *&#x2F;</span><br><span class="line">#define PT_LOSUNW0x6ffffffa</span><br><span class="line">#define PT_SUNWBSS0x6ffffffa&#x2F;* Sun Specific segment *&#x2F;</span><br><span class="line">#define PT_SUNWSTACK0x6ffffffb&#x2F;* Stack segment *&#x2F;</span><br><span class="line">#define PT_HISUNW0x6fffffff</span><br><span class="line">#define PT_HIOS0x6fffffff&#x2F;* End of OS-specific *&#x2F;</span><br><span class="line">#define PT_LOPROC0x70000000&#x2F;* Start of processor-specific *&#x2F;</span><br><span class="line">#define PT_HIPROC0x7fffffff&#x2F;* End of processor-specific *&#x2F;</span><br></pre></td></tr></table></figure><img src="/2018/09/04/elf/efl_program_header.png" class=""><p>举例说明:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Program Headers:</span><br><span class="line">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="line">                 FileSiz            MemSiz              Flags  Align</span><br><span class="line">  PHDR           0x0000000000000040 0x0000000000400040 0x0000000000400040</span><br><span class="line">                 0x00000000000001f8 0x00000000000001f8  R E    8</span><br><span class="line">  INTERP         0x0000000000000238 0x0000000000400238 0x0000000000400238</span><br><span class="line">                 0x000000000000001c 0x000000000000001c  R      1</span><br><span class="line">      [Requesting program interpreter: &#x2F;lib64&#x2F;ld-linux-x86-64.so.2]</span><br><span class="line">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</span><br><span class="line">                 0x00000000000007e4 0x00000000000007e4  R E    200000</span><br><span class="line">  LOAD           0x0000000000000de0 0x0000000000600de0 0x0000000000600de0</span><br><span class="line">                 0x0000000000000254 0x0000000000000258  RW     200000</span><br><span class="line">  DYNAMIC        0x0000000000000df8 0x0000000000600df8 0x0000000000600df8</span><br><span class="line">                 0x0000000000000200 0x0000000000000200  RW     8</span><br><span class="line">  NOTE           0x0000000000000254 0x0000000000400254 0x0000000000400254</span><br><span class="line">                 0x0000000000000044 0x0000000000000044  R      4</span><br><span class="line">  GNU_EH_FRAME   0x0000000000000690 0x0000000000400690 0x0000000000400690</span><br><span class="line">                 0x000000000000003c 0x000000000000003c  R      4</span><br><span class="line">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">                 0x0000000000000000 0x0000000000000000  RW     10</span><br><span class="line">  GNU_RELRO      0x0000000000000de0 0x0000000000600de0 0x0000000000600de0</span><br><span class="line">                 0x0000000000000220 0x0000000000000220  R      1</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00     </span><br><span class="line">   01     .interp </span><br><span class="line">   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame </span><br><span class="line">   03     .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss </span><br><span class="line">   04     .dynamic </span><br><span class="line">   05     .note.ABI-tag .note.gnu.build-id </span><br><span class="line">   06     .eh_frame_hdr </span><br><span class="line">   07     </span><br><span class="line">   08     .init_array .fini_array .jcr .dynamic .got </span><br><span class="line">[root@riMlzL162793 link]# hexdump -x test -n 120</span><br><span class="line">0000000    457f    464c    0102    0001    0000    0000    0000    0000</span><br><span class="line">0000010    0002    003e    0001    0000    04c0    0040    0000    0000</span><br><span class="line">0000020    0040    0000    0000    0000    19f8    0000    0000    0000</span><br><span class="line">0000030    0000    0000    0040    0038    0009    0040    001e    001b</span><br><span class="line">0000040    0006    0000    0005    0000    0040    0000    0000    0000</span><br><span class="line">0000050    0040    0040    0000    0000    0040    0040    0000    0000</span><br><span class="line">0000060    01f8    0000    0000    0000    01f8    0000    0000    0000</span><br><span class="line">0000070    0008    0000    0000    0000                                </span><br><span class="line">0000078</span><br></pre></td></tr></table></figure><p>由elf头可知program偏移为64字节处,因此0000040开始为program header，每个条目占用56字节</p><ul><li>40行: 0000 0006 类型对应PT_PHDR ,0000 0005 表示RE(可读可执行),0000 0000 0000 0040表示偏移地址</li><li>50: 0000 0000 0040 0040 表示虚拟地址     0000 0000 0040 0040 表示物理地址</li><li>60: 0000 0000 0000 01f8 表示在可执行文件中的空间大小 ,01f8    0000    0000    0000表示实际运行时内存大小</li><li>70: 0000 0000 0000 0008 表示 对齐方式按照8字节对齐</li></ul><h3 id="节头表-section-header-table"><a class="header-anchor" href="#节头表-section-header-table">¶</a>节头表 section header table</h3> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Wordsh_name;<span class="comment">/* Section name (string tbl index) 节名 */</span></span><br><span class="line">    Elf32_Wordsh_type;<span class="comment">/* Section type 类型*/</span></span><br><span class="line">    Elf32_Wordsh_flags;<span class="comment">/* Section flags 标志*/</span></span><br><span class="line">    Elf32_Addrsh_addr;<span class="comment">/* Section virtual addr at execution 执行虚拟地址*/</span></span><br><span class="line">    Elf32_Offsh_offset;<span class="comment">/* Section file offset 文件偏移*/</span></span><br><span class="line">    Elf32_Wordsh_size;<span class="comment">/* Section size in bytes 大小*/</span></span><br><span class="line">    Elf32_Wordsh_link;<span class="comment">/* Link to another section */</span></span><br><span class="line">    Elf32_Wordsh_info;<span class="comment">/* Additional section information */</span></span><br><span class="line">    Elf32_Wordsh_addralign;<span class="comment">/* Section alignment 对齐方式*/</span></span><br><span class="line">    Elf32_Wordsh_entsize;<span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Wordsh_name;<span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">    Elf64ordsh_type;<span class="comment">/* Section type */</span></span><br><span class="line">    Elf64_Xwordsh_flags;<span class="comment">/* Section flags */</span></span><br><span class="line">    Elf64_Addrsh_addr;<span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">    Elf64_Offsh_offset;<span class="comment">/* Section file offset */</span></span><br><span class="line">    Elf64_Xwordsh_size;<span class="comment">/* Section size in bytes */</span></span><br><span class="line">    Elf64_Wordsh_link;<span class="comment">/* Link to another section */</span></span><br><span class="line">    Elf64_Wordsh_info;<span class="comment">/* Additional section information */</span></span><br><span class="line">    Elf64_Xwordsh_addralign;<span class="comment">/* Section alignment */</span></span><br><span class="line">    Elf64_Xwordsh_entsize;<span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure><p>这个结构体中sh_type 对应了不同种类的section</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;* Legal values for sh_type (section type).  *&#x2F;</span><br><span class="line"></span><br><span class="line">#define SHT_NULL  0&#x2F;* Section header table entry unused *&#x2F;</span><br><span class="line">#define SHT_PROGBITS  1&#x2F;* Program data *&#x2F;</span><br><span class="line">#define SHT_SYMTAB  2&#x2F;* Symbol table *&#x2F;</span><br><span class="line">#define SHT_STRTAB  3&#x2F;* String table *&#x2F;</span><br><span class="line">#define SHT_RELA  4&#x2F;* Relocation entries with addends *&#x2F;</span><br><span class="line">#define SHT_HASH  5&#x2F;* Symbol hash table *&#x2F;</span><br><span class="line">#define SHT_DYNAMIC  6&#x2F;* Dynamic linking information *&#x2F;</span><br><span class="line">#define SHT_NOTE  7&#x2F;* Notes *&#x2F;</span><br><span class="line">#define SHT_NOBITS  8&#x2F;* Program space with no data (bss) *&#x2F;</span><br><span class="line">#define SHT_REL  9&#x2F;* Relocation entries, no addends *&#x2F;</span><br><span class="line">#define SHT_SHLIB  10&#x2F;* Reserved *&#x2F;</span><br><span class="line">#define SHT_DYNSYM  11&#x2F;* Dynamic linker symbol table *&#x2F;</span><br><span class="line">#define SHT_INIT_ARRAY  14&#x2F;* Array of constructors *&#x2F;</span><br><span class="line">#define SHT_FINI_ARRAY  15&#x2F;* Array of destructors *&#x2F;</span><br><span class="line">#define SHT_PREINIT_ARRAY 16&#x2F;* Array of pre-constructors *&#x2F;</span><br><span class="line">#define SHT_GROUP  17&#x2F;* Section group *&#x2F;</span><br><span class="line">#define SHT_SYMTAB_SHNDX  18&#x2F;* Extended section indeces *&#x2F;</span><br><span class="line">#defineSHT_NUM  19&#x2F;* Number of defined types.  *&#x2F;</span><br><span class="line">#define SHT_LOOS  0x60000000&#x2F;* Start OS-specific.  *&#x2F;</span><br><span class="line">#define SHT_GNU_ATTRIBUTES 0x6ffffff5&#x2F;* Object attributes.  *&#x2F;</span><br><span class="line">#define SHT_GNU_HASH  0x6ffffff6&#x2F;* GNU-style hash table.  *&#x2F;</span><br><span class="line">#define SHT_GNU_LIBLIST  0x6ffffff7&#x2F;* Prelink library list *&#x2F;</span><br><span class="line">#define SHT_CHECKSUM  0x6ffffff8&#x2F;* Checksum for DSO content.  *&#x2F;</span><br><span class="line">#define SHT_LOSUNW  0x6ffffffa&#x2F;* Sun-specific low bound.  *&#x2F;</span><br><span class="line">#define SHT_SUNW_move  0x6ffffffa</span><br><span class="line">#define SHT_SUNW_COMDAT   0x6ffffffb</span><br><span class="line">#define SHT_SUNW_syminfo  0x6ffffffc</span><br><span class="line">#define SHT_GNU_verdef  0x6ffffffd&#x2F;* Version definition section.  *&#x2F;</span><br><span class="line">#define SHT_GNU_verneed  0x6ffffffe&#x2F;* Version needs section.  *&#x2F;</span><br><span class="line">#define SHT_GNU_versym  0x6fffffff&#x2F;* Version symbol table.  *&#x2F;</span><br><span class="line">#define SHT_HISUNW  0x6fffffff&#x2F;* Sun-specific high bound.  *&#x2F;</span><br><span class="line">#define SHT_HIOS  0x6fffffff&#x2F;* End OS-specific type *&#x2F;</span><br><span class="line">#define SHT_LOPROC  0x70000000&#x2F;* Start of processor-specific *&#x2F;</span><br><span class="line">#define SHT_HIPROC  0x7fffffff&#x2F;* End of processor-specific *&#x2F;</span><br><span class="line">#define SHT_LOUSER  0x80000000&#x2F;* Start of application-specific *&#x2F;</span><br><span class="line">#define SHT_HIUSER  0x8fffffff&#x2F;* End of application-specific *&#x2F;</span><br></pre></td></tr></table></figure><p>section table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">[root@riMlzL162793 link]# readelf -S test</span><br><span class="line">There are 30 section headers, starting at offset 0x19f8:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000400238  00000238</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298</span><br><span class="line">       000000000000001c  0000000000000000   A       5     0     8</span><br><span class="line">  [ 5] .dynsym           DYNSYM           00000000004002b8  000002b8</span><br><span class="line">       0000000000000090  0000000000000018   A       6     1     8</span><br><span class="line">  [ 6] .dynstr           STRTAB           0000000000400348  00000348</span><br><span class="line">       00000000000000a9  0000000000000000   A       0     0     1</span><br><span class="line">  [ 7] .gnu.version      VERSYM           00000000004003f2  000003f2</span><br><span class="line">       000000000000000c  0000000000000002   A       5     0     2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED          0000000000400400  00000400</span><br><span class="line">       0000000000000020  0000000000000000   A       6     1     8</span><br><span class="line">  [ 9] .rela.dyn         RELA             0000000000400420  00000420</span><br><span class="line">       0000000000000018  0000000000000018   A       5     0     8</span><br><span class="line">  [10] .rela.plt         RELA             0000000000400438  00000438</span><br><span class="line">       0000000000000030  0000000000000018  AI       5    12     8</span><br><span class="line">  [11] .init             PROGBITS         0000000000400468  00000468</span><br><span class="line">       000000000000001a  0000000000000000  AX       0     0     4</span><br><span class="line">  [12] .plt              PROGBITS         0000000000400490  00000490</span><br><span class="line">       0000000000000030  0000000000000010  AX       0     0     16</span><br><span class="line">  [13] .text             PROGBITS         00000000004004c0  000004c0</span><br><span class="line">       00000000000001b2  0000000000000000  AX       0     0     16</span><br><span class="line">  [14] .fini             PROGBITS         0000000000400674  00000674</span><br><span class="line">       0000000000000009  0000000000000000  AX       0     0     4</span><br><span class="line">  [15] .rodata           PROGBITS         0000000000400680  00000680</span><br><span class="line">       0000000000000010  0000000000000000   A       0     0     8</span><br><span class="line">  [16] .eh_frame_hdr     PROGBITS         0000000000400690  00000690</span><br><span class="line">       000000000000003c  0000000000000000   A       0     0     4</span><br><span class="line">  [17] .eh_frame         PROGBITS         00000000004006d0  000006d0</span><br><span class="line">       0000000000000114  0000000000000000   A       0     0     8</span><br><span class="line">  [18] .init_array       INIT_ARRAY       0000000000600de0  00000de0</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [19] .fini_array       FINI_ARRAY       0000000000600de8  00000de8</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [20] .jcr              PROGBITS         0000000000600df0  00000df0</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [21] .dynamic          DYNAMIC          0000000000600df8  00000df8</span><br><span class="line">       0000000000000200  0000000000000010  WA       6     0     8</span><br><span class="line">  [22] .got              PROGBITS         0000000000600ff8  00000ff8</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [23] .got.plt          PROGBITS         0000000000601000  00001000</span><br><span class="line">       0000000000000028  0000000000000008  WA       0     0     8</span><br><span class="line">  [24] .data             PROGBITS         0000000000601028  00001028</span><br><span class="line">       000000000000000c  0000000000000000  WA       0     0     4</span><br><span class="line">  [25] .bss              NOBITS           0000000000601034  00001034</span><br><span class="line">       0000000000000004  0000000000000000  WA       0     0     1</span><br><span class="line">  [26] .comment          PROGBITS         0000000000000000  00001034</span><br><span class="line">       000000000000002d  0000000000000001  MS       0     0     1</span><br><span class="line">  [27] .shstrtab         STRTAB           0000000000000000  00001061</span><br><span class="line">       0000000000000108  0000000000000000           0     0     1</span><br><span class="line">  [28] .symtab           SYMTAB           0000000000000000  00001170</span><br><span class="line">       0000000000000648  0000000000000018          29    46     8</span><br><span class="line">  [29] .strtab           STRTAB           0000000000000000  000017b8</span><br><span class="line">       000000000000023e  0000000000000000</span><br></pre></td></tr></table></figure><p>hexdump</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0001a38    001b    0000    0001    0000    0002    0000    0000    0000</span><br><span class="line">0001a48    0238    0040    0000    0000    0238    0000    0000    0000</span><br><span class="line">0001a58    001c    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0001a68    0001    0000    0000    0000    0000    0000    0000    0000</span><br></pre></td></tr></table></figure><p>正确显示了对应第2个section  interp</p><h3 id="符号表条目-symble-table-entry"><a class="header-anchor" href="#符号表条目-symble-table-entry">¶</a>符号表条目 symble table entry</h3><p>数据结构</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Wordst_name;&#x2F;* Symbol name (string tbl index) *&#x2F;</span><br><span class="line">  Elf32_Addrst_value;&#x2F;* Symbol value *&#x2F;</span><br><span class="line">  Elf32_Wordst_size;&#x2F;* Symbol size *&#x2F;</span><br><span class="line">  unsigned charst_info;&#x2F;* Symbol type and binding *&#x2F;</span><br><span class="line">  unsigned charst_other;&#x2F;* Symbol visibility *&#x2F;</span><br><span class="line">  Elf32_Sectionst_shndx;&#x2F;* Section index *&#x2F;</span><br><span class="line">&#125; Elf32_Sym;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Wordst_name;&#x2F;* Symbol name (string tbl index) *&#x2F;</span><br><span class="line">  unsigned charst_info;&#x2F;* Symbol type and binding *&#x2F;</span><br><span class="line">  unsigned char st_other;&#x2F;* Symbol visibility *&#x2F;</span><br><span class="line">  Elf64_Sectionst_shndx;&#x2F;* Section index *&#x2F;</span><br><span class="line">  Elf64_Addrst_value;&#x2F;* Symbol value *&#x2F;</span><br><span class="line">  Elf64_Xwordst_size;&#x2F;* Symbol size *&#x2F;</span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure> <img src="/2018/09/04/elf/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E8%A7%A3%E9%87%8A.png" class=""><ul><li>其中st_info st_other都是分为4个bit代表一个信息<br>linux下：</li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> [root@riMlzL162793 link]# readelf -s test.o</span><br><span class="line"></span><br><span class="line">Symbol table &#39;.symtab&#39; contains 11 entries:</span><br><span class="line">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class="line">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class="line">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS test.cpp</span><br><span class="line">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class="line">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class="line">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class="line">     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class="line">     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class="line">     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class="line">     8: 0000000000000000     8 OBJECT  GLOBAL DEFAULT    3 array</span><br><span class="line">     9: 0000000000000000    31 FUNC    GLOBAL DEFAULT    1 main</span><br><span class="line">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _Z3sumPii</span><br></pre></td></tr></table></figure><ul><li>最后三项分别就是 array全局符号,main 全局符号,UND_Z3sumPii就是sum这个符号,它是未定义的所以type是notype,并且没有在该obj中任意一节中.</li></ul><h3 id="可重定位符号条目-Relocation-table-entry"><a class="header-anchor" href="#可重定位符号条目-Relocation-table-entry">¶</a>可重定位符号条目 Relocation table entry</h3><p>通过表示在符号表中的位置，以及在文件中的偏移量代表重定位信息</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;* Relocation table entry without addend (in section of type SHT_REL).  *&#x2F;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Addrr_offset;&#x2F;* Address *&#x2F;</span><br><span class="line">  Elf32_Wordr_info;&#x2F;* Relocation type and symbol index *&#x2F;</span><br><span class="line">&#125; Elf32_Rel;</span><br><span class="line"></span><br><span class="line">&#x2F;* I have seen two different definitions of the Elf64_Rel and</span><br><span class="line">   Elf64_Rela structures, so we&#39;ll leave them out until Novell (or</span><br><span class="line">   whoever) gets their act together.  *&#x2F;</span><br><span class="line">&#x2F;* The following, at least, is used on Sparc v9, MIPS, and Alpha.  *&#x2F;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf64_Addrr_offset;&#x2F;* Address *&#x2F;</span><br><span class="line">  Elf64_Xwordr_info;&#x2F;* Relocation type and symbol index *&#x2F;</span><br><span class="line">&#125; Elf64_Rel;</span><br><span class="line"></span><br><span class="line">&#x2F;* Relocation table entry with addend (in section of type SHT_RELA).  *&#x2F;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Addrr_offset;&#x2F;* Address *&#x2F;</span><br><span class="line">  Elf32_Wordr_info;&#x2F;* Relocation type and symbol index *&#x2F;</span><br><span class="line">  Elf32_Swordr_addend;&#x2F;* Addend *&#x2F;</span><br><span class="line">&#125; Elf32_Rela;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ google style.md</title>
      <link href="/2018/09/03/c++%20google%20style/"/>
      <url>/2018/09/03/c++%20google%20style/</url>
      
        <content type="html"><![CDATA[<h1>google c++ style</h1><p>标签 : c++</p><hr><h2 id="一、头文件"><a class="header-anchor" href="#一、头文件">¶</a>一、头文件</h2><h3 id="1-1-self-contained"><a class="header-anchor" href="#1-1-self-contained">¶</a>1.1 self-contained</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">头文件应该要自给自足,也就是说可以被当作第一个文件被引进</span><br></pre></td></tr></table></figure><h3 id="1-2-define保护"><a class="header-anchor" href="#1-2-define保护">¶</a>1.2 #define保护</h3><p>define 定义命名基于路径,例如<code>foo</code>文件夹中的<code>foo/src/bar/baz.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FOO_BAR_BAZ_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOO_BAR_BAZ_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> FOO_BAR_BAZ_H</span></span><br></pre></td></tr></table></figure><h3 id="1-3-前置声明"><a class="header-anchor" href="#1-3-前置声明">¶</a>1.3 前置声明</h3><pre><code>    尽量不要使用前置声明</code></pre><h4 id="定义"><a class="header-anchor" href="#定义">¶</a>定义:</h4><p>指仅仅是类 函数 模板的纯粹声明,而没有伴随这其定义</p><h4 id="优点"><a class="header-anchor" href="#优点">¶</a>优点:</h4><ul><li>前置声明能够节省编译时间,过多的<code>include</code>会导致展开过多的文件</li><li>避免当<code>include</code>内容修改时,导致重新编译</li></ul><h4 id="缺点"><a class="header-anchor" href="#缺点">¶</a>缺点</h4><ul><li>前置声明隐藏了依赖关系,当头文件改动时,会跳过必要的编译过程<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li></ul><ul><li>前置声明可能会被库的后续更改所破坏。前置声明函数或模板有时会妨碍头文件开发者变动其 API. 例如扩大形参类型，加个自带默认参数的模板形参等等</li><li>前置声明来自命名空间 std:: 的 symbol 时，其行为未定义</li><li>很难判断什么时候该用前置声明，什么时候该用 #include 。极端情况下，用前置声明代替 includes 甚至都会暗暗地改变代码的含义:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.h:</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D</span> :</span> B &#123;&#125;;</span><br><span class="line">good_user.cc:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"b.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(D* x)</span> </span>&#123; f(x); &#125;  <span class="comment">// calls f(B*)</span></span><br></pre></td></tr></table></figure><p>如果<code>#include</code>被<code>D</code> <code>B</code> 替代,那么<code>test()</code>会调用<code>f(void)</code> <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><ul><li>过多的前置声明会导致冗长</li><li>仅仅为了能前置声明而重构代码（比如用指针成员代替对象成员）会使代码变得更慢更复杂.</li></ul><h4 id="结论"><a class="header-anchor" href="#结论">¶</a>结论:</h4><ul><li>尽量避免前置声明那些定义在其他项目中的实体.</li><li>函数:使用<code>include</code></li><li>类模板:使用<code>include</code></li><li></li></ul><h3 id="1-4-内联函数"><a class="header-anchor" href="#1-4-内联函数">¶</a>1.4 内联函数</h3><h4 id="定义-v2"><a class="header-anchor" href="#定义-v2">¶</a>定义:</h4><p>当函数被声明为内联函数之后, 编译器会将其内联展开, 而不是按通常的函数调用机制进行调用.<br>优点:</p><p>只要内联的函数体较小, 内联该函数可以令目标代码更加高效. 对于存取函数以及其它函数体比较短, 性能关键的函数, 鼓励使用内联.</p><h4 id="缺点-v2"><a class="header-anchor" href="#缺点-v2">¶</a>缺点:</h4><p>滥用内联将导致程序变得更慢. 内联可能使目标代码量或增或减, 这取决于内联函数的大小. 内联非常短小的存取函数通常会减少代码大小, 但内联一个相当大的函数将戏剧性的增加代码大小. 现代处理器由于更好的利用了指令缓存, 小巧的代码往往执行更快。</p><h4 id="结论-v2"><a class="header-anchor" href="#结论-v2">¶</a>结论:</h4><p>一个较为合理的经验准则是, 不要内联超过 10 行的函数. 谨慎对待析构函数, 析构函数往往比其表面看起来要更长, 因为有隐含的成员和基类析构函数被调用!</p><p>另一个实用的经验准则: 内联那些包含循环或 <code>switch</code> 语句的函数常常是得不偿失 (除非在大多数情况下, 这些循环或 <code>switch</code> 语句从不被执行).</p><p>有些函数即使声明为内联的也不一定会被编译器内联, 这点很重要; 比如虚函数和递归函数就不会被正常内联. 通常, 递归函数不应该声明成内联函数.（YuleFox 注: 递归调用堆栈的展开并不像循环那么简单, 比如递归层数在编译时可能是未知的, 大多数编译器都不支持内联递归函数). 虚函数内联的主要原因则是想把它的函数体放在类定义内, 为了图个方便, 抑或是当作文档描述其行为, 比如精短的存取函数.</p><h3 id="1-5-include的路径和顺序"><a class="header-anchor" href="#1-5-include的路径和顺序">¶</a>1.5 <code>#include</code>的路径和顺序</h3><p>避免使用特殊路径如:<code>..</code>,<code>.</code>,<code>google-awesome-project/src/base/logging.h</code> 应该按如下方式包含:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/logging.h"</span></span></span><br></pre></td></tr></table></figure><p>又如, <code>dir/foo.cc</code> 或 <code>dir/foo_test.cc</code> 的主要作用是实现或测试 <code>dir2/foo2.h</code> 的功能, <code>foo.cc</code> 中包含头文件的次序如下:</p><ol><li><code>dir2/foo.h</code></li><li>c系统文件</li><li>c++系统文件</li><li>其他库中.h文件</li><li>ASDASD阿三本项目内其他.h文件<br>所依赖的符号(symbols)被那些头文件依赖,就要去include,即使头文件被已经引入的头文件所依赖</li></ol><p>举例来说, <code>google-awesome-project/src/foo/internal/fooserver.cc</code> 的包含次序如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"foo/public/fooserver.h"</span> <span class="comment">// 优先位置</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  //c系统</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;hash_map&gt;     //c++</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/basictypes.h"</span>    <span class="comment">//本项目</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"base/commandlineflags.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"foo/public/bar.h"</span></span></span><br></pre></td></tr></table></figure><h3 id="译者笔记"><a class="header-anchor" href="#译者笔记">¶</a>译者笔记</h3><ul><li>函数参数可以按照一定顺序书写,如相同类型一起</li><li><code>.</code>,<code>..</code>不要使用</li><li>类内部的函数一般会自动内联,不打算内联的函数不要定义在头文件中</li><li><code>#include</code>中插入空行以分割相关头文件, C 库, C++ 库, 其他库的 .h 和本项目内的 .h 是个好习惯</li></ul><hr><h3 id="不理解的点"><a class="header-anchor" href="#不理解的点">¶</a>不理解的点</h3><h2 id="二、作用域"><a class="header-anchor" href="#二、作用域">¶</a>二、作用域</h2><h4 id="2-1-命名空间"><a class="header-anchor" href="#2-1-命名空间">¶</a>2.1 命名空间</h4><pre><code>    鼓励在 .cc 文件内使用匿名命名空间或 static 声明. 使用具名的命名空间时, 其名称可基于项目名或相对路径. 禁止使用 using 指示（using-directive）。禁止使用内联命名空间（inline namespace）。</code></pre><h4 id="定义-v3"><a class="header-anchor" href="#定义-v3">¶</a>定义:</h4><p>命名空间将全局作用域细分为独立 具名的作用域,可有效的防止全局作用的命名冲突</p><h3 id="优点-v2"><a class="header-anchor" href="#优点-v2">¶</a>优点:</h3><p>和java等语言的作用相同,在类的分离下进一步划分了作用域<br>内联命名空间会自动把内部标识符放到外部</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> X &#123;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">namespace</span> Y &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;  <span class="comment">// namespace Y</span></span><br><span class="line">&#125;  <span class="comment">// namespace X</span></span><br></pre></td></tr></table></figure><p><code>X:Y:foo()</code>与<code>X:foo()</code>相同</p><h4 id="结论-v3"><a class="header-anchor" href="#结论-v3">¶</a>结论:</h4><ul><li>在命名空间的最后注释出命名空间的名字</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .h 文件</span></span><br><span class="line"><span class="keyword">namespace</span> mynamespace &#123;</span><br><span class="line"><span class="comment">// 所有声明都置于命名空间中</span></span><br><span class="line"><span class="comment">// 注意不要使用缩进</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125; <span class="comment">// namespace mynamespace</span></span><br></pre></td></tr></table></figure><ul><li>不要再<code>std</code>中声明任何</li><li>不要使用using全局</li><li>禁止使用内联命名空间</li></ul><h3 id="2-2-匿名命名空间和静态变量"><a class="header-anchor" href="#2-2-匿名命名空间和静态变量">¶</a>2.2 匿名命名空间和静态变量</h3><h4 id="tip"><a class="header-anchor" href="#tip">¶</a>tip:</h4><pre><code>    在`.cc`文件中定义一个不需要被外部引用(extern)的变量,可以将其放在匿名空间或者声明为`static`,但是不要在`.h`文件中这么做</code></pre><h4 id="定义-v4"><a class="header-anchor" href="#定义-v4">¶</a>定义:</h4><p>所有置于匿名命名空间的声明都具有内部链接性，函数和变量可以经由声明为 <code>static</code> 拥有内部链接性，这意味着你在这个文件中声明的这些标识符都不能在另一个文件中被访问。即使两个文件声明了完全一样名字的标识符，它们所指向的实体实际上是完全不同的.</p><h4 id="结论-v4"><a class="header-anchor" href="#结论-v4">¶</a>结论:</h4><p>推荐、鼓励在 <code>.cc</code> 中对于不需要在其他地方引用的标识符使用内部链接性声明，但是不要在 <code>.h</code> 中使用。</p><p>匿名命名空间的声明和具名的格式相同，在最后注释上 <code>namespace</code> :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;  <span class="comment">// namespace</span></span><br></pre></td></tr></table></figure><h3 id="2-3非成员函数、静态成员函数和全局函数"><a class="header-anchor" href="#2-3非成员函数、静态成员函数和全局函数">¶</a>2.3非成员函数、静态成员函数和全局函数</h3><h4 id="tip-v2"><a class="header-anchor" href="#tip-v2">¶</a>tip:</h4><pre><code>    使用静态成员函数或命名空间内的非成员函数, 尽量不要用裸的全局函数. 将一系列函数直接置于命名空间中，不要用类的静态方法模拟出命名空间的效果，类的静态方法应当和类的实例或静态数据紧密相关.[^3]</code></pre><h4 id="优点-v3"><a class="header-anchor" href="#优点-v3">¶</a>优点:</h4><p>某些情况下, 非成员函数和静态成员函数是非常有用的,将非成员函数放在命名空间内可避免污染全局作用域.</p><h4 id="结论-v5"><a class="header-anchor" href="#结论-v5">¶</a>结论</h4><p>若静态不使用类内部静态成员,那么相比定义为静态函数,更应该使用命名空间,如:对于<code>myproject/foo_bar.h</code>,应当使用:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myproject &#123;</span><br><span class="line"><span class="keyword">namespace</span> foo_bar &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;  <span class="comment">// namespace foo_bar</span></span><br><span class="line">&#125;  <span class="comment">// namespace myproject</span></span><br></pre></td></tr></table></figure><p>而非:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myproject &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooBar</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Function1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Function2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;  <span class="comment">// namespace myproject</span></span><br></pre></td></tr></table></figure><p>定义在同一编译单元的函数, 被其他编译单元直接调用可能会引入不必要的耦合和链接时依赖; 静态成员函数对此尤其敏感. 可以考虑提取到新类中, 或者将函数置于独立库的命名空间内.</p><p>如果你必须定义<code>非成员函数</code>, 又只是在 .cc 文件中使用它, 可使用匿名 2.1. 命名空间 或 static 链接关键字 (如 <code>static int Foo() {...}</code>) 限定其作用域.<br>###2.4 局部变量</p><h4 id="tip-v3"><a class="header-anchor" href="#tip-v3">¶</a>tip:</h4><pre><code>将函数变量尽可能置于最小作用域内,并且在`声明`时进行`初始化`</code></pre><p>C++ 允许在函数的<code>任何位置</code>声明变量. 我们提倡在尽可能小的作用域中声明变量, 离第一次使用越近越好. 这使得代码浏览者更容易定位变量声明的位置, 了解变量的类型和初始值. 特别是，应使用初始化的方式替代声明再赋值, 比如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i=f()<span class="comment">//不推荐,声明和初始化分离</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j=g();<span class="comment">//声明并初始化</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>); <span class="comment">// 用花括号初始化更好</span></span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 好——v 一开始就初始化</span></span><br></pre></td></tr></table></figure><p>属于 <code>if</code>, <code>while</code> 和 <code>for</code> 语句的变量应当在这些语句中正常地声明，这样子这些变量的作用域就被限制在这些语句中了，举例而言:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">const</span> <span class="keyword">char</span>* p = <span class="built_in">strchr</span>(str, <span class="string">'/'</span>)) str = p + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>注意:当局部变量为对象的时候,重复进入退出作用域是非常低效的:<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 低效的实现</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    Foo f;                  <span class="comment">// 构造函数和析构函数分别调用 1000000 次!</span></span><br><span class="line">    f.DoSomething(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在外部循环更加高效:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Foo f;                      <span class="comment">// 构造函数和析构函数只调用 1 次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">    f.DoSomething(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-静态和全局变量"><a class="header-anchor" href="#2-5-静态和全局变量">¶</a>2.5 静态和全局变量</h3><h4 id="tip-v4"><a class="header-anchor" href="#tip-v4">¶</a>tip:</h4><p>禁止定义<a href="http://zh.cppreference.com/w/cpp/language/storage_duration#.E5.AD.98.E5.82.A8.E6.9C.9F" target="_blank" rel="noopener">静态储存周期</a>非POD<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>变量，禁止使用含有副作用的函数初始化POD全局变量，因为多编译单元中的静态变量执行时的构造和析构顺序是未明确的，这将导致代码的不可移植。</p><p>静态变量的构造函数 析构函数 以及初始化顺序在c++只是部分明确.禁止使用静态类类型,禁止使用涉及全局变量的函数返回值来初始化变量,局部静态变量除外,因为静态局部变量的初始化是确定<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p><pre><code>Xris 译注:同一个编译单元内是明确的，静态初始化优先于动态初始化，初始化顺序按照声明顺序进行，销毁则逆序。不同的编译单元之间初始化和销毁顺序属于未明确行为 (unspecified behaviour)。</code></pre><p>同理，全局和静态变量在程序中断时会被析构，无论所谓中断是从 main() 返回还是对 exit() 的调用。析构顺序正好与构造函数调用的顺序相反。但既然构造顺序未定义，那么析构顺序当然也就不定了。比如，在程序结束时某静态变量已经被析构了，但代码还在跑——比如其它线程——并试图访问它且失败；再比如，一个静态 string 变量也许会在一个引用了前者的其它变量析构之前被析构掉。<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p><p>改善以上析构问题的办法之一是用 quick_exit() 来代替 exit() 并中断程序。它们的不同之处是前者不会执行任何析构，也不会执行 atexit() 所绑定的任何 handlers. 如果您想在执行 quick_exit() 来中断时执行某 handler（比如刷新 log），您可以把它绑定到 _at_quick_exit(). 如果您想在 exit() 和 quick_exit() 都用上该 handler, 都绑定上去。</p><p>综上所述，我们只允许 POD 类型的静态变量，即完全禁用 vector (使用 C 数组替代) 和 string (使用 const char [])。<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p><p>如果您确实需要一个 class 类型的静态或全局变量，可以考虑在 main() 函数或 pthread_once() 内初始化一个指针且永不回收。注意只能用 raw 指针，别用智能指针，毕竟后者的析构函数涉及到上文指出的不定顺序问题。</p><pre><code>    Yang.Y 译注:上文提及的静态变量泛指静态生存周期的对象, 包括: 全局变量, 静态变量, 静态类成员变量, 以及函数静态变量.</code></pre><h3 id="译者注"><a class="header-anchor" href="#译者注">¶</a>译者注:</h3><ul><li>匿名空间避免命名冲突,限定作用域,避免直接使用<code>using</code>污染命名空间</li><li>尽量不要使用全局函数和全局变量,考虑作用域和命名空间显示,尽量单独形成编译单元</li><li>多线程中的全局变量(含静态成员变量)不要使用<code>class</code>类型,也就是只能使用POD类型</li></ul><h2 id="三、类"><a class="header-anchor" href="#三、类">¶</a>三、类</h2><h3 id="3-1构造函数的职责"><a class="header-anchor" href="#3-1构造函数的职责">¶</a>3.1构造函数的职责</h3><pre><code>不要再构造函数中调用虚函数</code></pre><h4 id="缺点-v3"><a class="header-anchor" href="#缺点-v3">¶</a>缺点:</h4><ul><li>如果在构造函数中调用了自身的虚函数,此类调用不会重定向到子类虚函数实现</li><li>当程序没有崩溃或者使用异常的情况下,构造函数很难向上报错</li><li>若执行失败,会得到初始化失败的对象,该对象可能进入不正常状态,必须使用<code>bool isValid()</code>或类似的机制才能检查出来</li><li>构造函数的地址是无法被取得的,也就是说构造函数完成的工作无法以简单的方式交给其他线程</li></ul><h4 id="结论-v6"><a class="header-anchor" href="#结论-v6">¶</a>结论:</h4><p>构造函数不允许调用虚函数. 如果代码允许, 直接终止程序是一个合适的处理错误的方式. 否则, 考虑用 <code>Init()</code> 方法或工厂函数.<sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></p><h3 id="3-2-隐式类型转换"><a class="header-anchor" href="#3-2-隐式类型转换">¶</a>3.2 隐式类型转换</h3><p>不要定义隐式类型转换,对于转换运算符和单参数构造函数,使用<code>explicit</code>关键字</p><h4 id="缺点-v4"><a class="header-anchor" href="#缺点-v4">¶</a>缺点:</h4><ul><li>隐式类型转换会隐藏类型不匹配的错误.有时,目的类型并不符合用户的期望,甚至用户根本没有意识到发生了类型转换.</li><li>隐式类型转换会让代码难以阅读,尤其是在有函数重载的时候,因为这时很难判断到底是哪个函数被调用.</li><li>单参数构造函数有可能会被无意地用作隐式类型转换.如果单参数构造函数没有加上 explicit 关键字, 读者无法判断这一函数究竟是要作为隐式类型转换, 还是作者忘了加上 explicit 标记.</li><li>并没有明确的方法用来判断哪个类应该提供类型转换, 这会使得代码变得含糊不清.</li><li>如果目的类型是隐式指定的,那么列表初始化会出现和隐式类型转换一样的问题,尤其是在列表中只有一个元素的时候.</li></ul><h4 id="结论-v7"><a class="header-anchor" href="#结论-v7">¶</a>结论:</h4><p>在类型定义中,类型转换运算符和单参数构造函数都应该添加<code>explicit</code>,但是<code>拷贝</code>和<code>移动</code>构造函数不需要,因为它们并不执行类型转换<br>不能以一个参数进行调用的构造函数不应当加上 <code>explicit</code>. 接受一个 <code>std::initializer_list</code> 作为参数的构造函数也应当省略 <code>explicit</code>, 以便支持拷贝初始化 (例如 <code>MyType m = {1, 2}</code>;) .</p><h3 id="3-3-可拷贝类型和可移动类型"><a class="header-anchor" href="#3-3-可拷贝类型和可移动类型">¶</a>3.3 可拷贝类型和可移动类型</h3><h4 id="总述"><a class="header-anchor" href="#总述">¶</a>总述:</h4><p>如果你的类型需要,就让其支持 拷贝/移动,否则就把隐式产生的拷贝和移动函数禁用<sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></p><h4 id="定义-v5"><a class="header-anchor" href="#定义-v5">¶</a>定义:</h4><p>可拷贝类型允许对象在初始化时得到来自相同类型的另一对象的值, 或在赋值时被赋予相同类型的另一对象的值, 同时不改变源对象的值. 对于用户定义的类型, 拷贝操作一般通过拷贝构造函数与拷贝赋值操作符定义. <code>string</code> 类型就是一个可拷贝类型的例子.</p><p>可移动类型允许对象在初始化时得到来自相同类型的临时对象的值, 或在赋值时被赋予相同类型的临时对象的值 (因此所有可拷贝对象也是可移动的). <code>std::unique_ptr&lt;int&gt;</code> 就是一个可移动但不可复制的对象的例子. 对于用户定义的类型, 移动操作一般是通过移动构造函数和移动赋值操作符实现的.</p><p>拷贝 / 移动构造函数在某些情况下会被编译器隐式调用. 例如, 通过传值的方式传递对象.</p><h4 id="优点-v4"><a class="header-anchor" href="#优点-v4">¶</a>优点:</h4><p>可移动及拷贝类型对象通过值传递,可以使得api更加安全.与传指针和引用不同,这样的传递不会造成所有权, 生命周期, 可变性等方面的混乱,也就没必要在协议中予以明确.这同时也防止了客户端与实现在非作用域内的交互, 使得它们更容易被理解与维护. 这样的对象可以和需要传值操作的通用 API 一起使用, 例如大多数容器.</p><h4 id="缺点-v5"><a class="header-anchor" href="#缺点-v5">¶</a>缺点:</h4><p>许多类型都不需要拷贝, 为它们提供拷贝操作会让人迷惑, 也显得荒谬而不合理. 单件类型 (<code>Registerer</code>), 与特定的作用域相关的类型 (<code>Cleanup</code>), 与其他对象实体紧耦合的类型 (<code>Mutex</code>) 从逻辑上来说都不应该提供拷贝操作. 为基类提供拷贝 / 赋值操作是有害的, 因为在使用它们时会造成 <a href="https://www.cnblogs.com/biyeymyhjob/archive/2012/09/07/2674880.html" target="_blank" rel="noopener">对象切割</a><sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup> . 默认的或者随意的拷贝操作实现可能是不正确的, 这往往导致令人困惑并且难以诊断出的错误.</p><p>拷贝构造函数是隐式调用的, 也就是说, 这些调用很容易被忽略. 这会让人迷惑, 尤其是对那些所用的语言约定或强制要求传引用的程序员来说更是如此. 同时, 这从一定程度上说会鼓励过度拷贝, 从而导致性能上的问题.</p><p>关于<code>对象切割</code>,例如:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A() &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A construction"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A(A &amp;a) &#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"copy"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    A&amp;operator=(A a)= delete;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a_fun"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B() &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B construction"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"b_fun"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">    a.test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(A &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a.test();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    A a;</span><br><span class="line">    B b;</span><br><span class="line"><span class="comment">//    a = b;</span></span><br><span class="line">    fun(b);</span><br><span class="line">    fun2(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line">A construction</span><br><span class="line">A construction</span><br><span class="line">B construction</span><br><span class="line">copy</span><br><span class="line">a_fun</span><br><span class="line">b_fun</span><br></pre></td></tr></table></figure><ul><li>关于值传递编译器就会调用拷贝构造函数,在语法判断过程中会决定此条语句能否通过,这里我要表达的意思是构造器不过用来初始化的函数而已</li><li>当直接使用赋值函数时,默认的赋值函数只是修改了对象内部的属性,如a=b,a对象任然是a对象,可以通过&amp;去查看,而那些默认传递引用的语言如java语言,通过所谓的值传递,就会导致对象覆盖</li><li>当指针或者引用通过函数调用时,就会发生如java的值传递,此时临时变量就是指针或者引用本身而没有出现对象构造,也就是说此时多态的发生才是符合逻辑的</li><li>当指针和引用使用赋值,其行为和普通变量的赋值是相同的</li></ul><h4 id="结论-v8"><a class="header-anchor" href="#结论-v8">¶</a>结论:</h4><p>如果需要就让你的类型可拷贝 / 可移动. 作为一个经验法则, 如果对于你的用户来说这个拷贝操作不是一眼就能看出来的, 那就不要把类型设置为可拷贝. 如果让类型可拷贝, 一定要同时给出拷贝构造函数和赋值操作的定义, 反之亦然. 如果让类型可拷贝, 同时移动操作的效率高于拷贝操作, 那么就把移动的两个操作 (移动构造函数和赋值操作) 也给出定义. 如果类型不可拷贝, 但是移动操作的正确性对用户显然可见, 那么把这个类型设置为只可移动并定义移动的两个操作.</p><p>如果定义了拷贝/移动操作, 则要保证这些操作的默认实现是正确的. 记得时刻检查默认操作的正确性, 并且在文档中说明类是可拷贝的且/或可移动的.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Foo(Foo&amp;&amp; other) : field_(other.field) &#123;&#125;</span><br><span class="line">  <span class="comment">// 差, 只定义了移动构造函数, 而没有定义对应的赋值运算符.</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Field field_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于存在对象切割的风险, 不要为任何有可能有派生类的对象提供赋值操作或者拷贝 / 移动构造函数 (当然也不要继承有这样的成员函数的类). 如果你的基类需要可复制属性, 请提供一个 public virtual Clone() 和一个 protected 的拷贝构造函数以供派生类实现.</p><p>如果你的类不需要拷贝 / 移动操作, 请显式地通过在 public 域中使用 = delete 或其他手段禁用之.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass is neither copyable nor movable.</span></span><br><span class="line">MyClass(<span class="keyword">const</span> MyClass&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyClass&amp;) = <span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><h3 id="3-4-结构体vs类"><a class="header-anchor" href="#3-4-结构体vs类">¶</a>3.4 结构体vs类</h3><p>####总述</p><p>仅当只有数据成员时使用 <code>struct</code>, 其它一概使用 <code>class</code>.</p><p>####说明</p><p>在 C++ 中 <code>struct</code> 和 <code>class</code>关键字几乎含义一样,我们为这两个关键字添加我们自己的语义理解, 以便为定义的数据类型选择合适的关键字.</p><p><code>struct</code> 用来定义包含数据的被动式对象, 也可以包含相关的常量, 但除了存取数据成员之外, 没有别的函数功能. 并且存取功能是通过直接访问位域, 而非函数调用. 除了构造函数, 析构函数, Initialize(), Reset(), Validate() 等类似的用于设定数据成员的函数外, 不能提供其它功能的函数.</p><p>如果需要更多的函数功能, <code>class</code> 更适合. 如果拿不准, 就用 <code>class</code>.</p><p>为了和 STL 保持一致, 对于仿函数等特性可以不用 <code>class</code> 而是使用 <code>struct</code>.</p><p>注意: 类和结构体的成员变量使用不同的 命名规则</p><h3 id="3-5-继承"><a class="header-anchor" href="#3-5-继承">¶</a>3.5 继承</h3><h4 id="总述-v2"><a class="header-anchor" href="#总述-v2">¶</a>总述:</h4><p>使用组合(<a href="https://book.douban.com/subject/1099305/" target="_blank" rel="noopener">设计模式</a>这本书值得一看),常常比使用继承更加合理,如果使用继承的话,定义为<code>public</code>继承</p><h4 id="定义-v6"><a class="header-anchor" href="#定义-v6">¶</a>定义:</h4><p>当子类继承基类时, 子类包含了父基类所有数据及操作的定义. C++ 实践中, 继承主要用于两种场合: 实现继承, 子类继承父类的实现代码; 接口继承, 子类仅继承父类的方法名称.</p><h4 id="优点-v5"><a class="header-anchor" href="#优点-v5">¶</a>优点:</h4><p>实现继承通过原封不动的复用基类代码减少了代码量. 由于继承是在编译时声明, 程序员和编译器都可以理解相应操作并发现错误. 从编程角度而言, 接口继承是用来强制类输出特定的 API. 在类没有实现 API 中某个必须的方法时, 编译器同样会发现并报告错误.</p><h4 id="缺点-v6"><a class="header-anchor" href="#缺点-v6">¶</a>缺点:</h4><p>对于实现继承, 由于子类的实现代码散布在父类和子类间之间, 要理解其实现变得更加困难. 子类<code>不能重写父类的非虚函数</code><sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup>, 当然也就不能修改其实现. 基类也可能定义了一些数据成员, 因此还必须区分基类的实际布局.</p><h4 id="结论-v9"><a class="header-anchor" href="#结论-v9">¶</a>结论:</h4><p>所有继承必须是<code>public</code> 的.如果你想使用私有继承,你应该替换成把基类的实例作为成员对象的方式.</p><p>不要过度使用实现继承. 组合常常更合适一些. 尽量做到只在 “是一个” (“is-a”, YuleFox 注: 其他 “has-a” 情况下请使用组合) 的情况下使用继承: 如果 Bar 的确 “是一种” Foo, Bar 才能继承 Foo.</p><p>必要的话, 析构函数声明为 virtual. 如果你的类有虚函数, 则析构函数也应该为虚函数.</p><p>对于可能被子类访问的成员函数, 不要过度使用 protected 关键字. 注意, 数据成员都必须是 私有的</p><p>对于重载的虚函数或虚析构函数, 使用 override, 或 (较不常用的) final 关键字显式地进行标记. 较早 (早于 C++11) 的代码可能会使用 virtual 关键字作为不得已的选项. 因此, 在声明重载时, 请使用 override, final 或 virtual 的其中之一进行标记. 标记为 override 或 final 的析构函数如果不是对基类虚函数的重载的话, 编译会报错, 这有助于捕获常见的错误. 这些标记起到了文档的作用, 因为如果省略这些关键字, 代码阅读者不得不检查所有父类, 以判断该函数是否是虚函数.</p><h3 id="3-6多重继承"><a class="header-anchor" href="#3-6多重继承">¶</a>3.6多重继承</h3><h4 id="总述-v3"><a class="header-anchor" href="#总述-v3">¶</a>总述:</h4><p>真正需要用到多重实现继承的情况少之又少. 只在以下情况我们才允许多重继承: 最多只有一个基类是非抽象类; 其它基类都是以 <code>Interface</code> 为后缀的 纯接口类.</p><h4 id="优点-v6"><a class="header-anchor" href="#优点-v6">¶</a>优点:</h4><p>相比单继承 (见 <a href="#inherit">继承</a>, 多重实现继承可以复用更多的代码.</p><h4 id="缺点-v7"><a class="header-anchor" href="#缺点-v7">¶</a>缺点:</h4><p>真正需要用到多重 实现 继承的情况少之又少. 有时多重实现继承看上去是不错的解决方案, 但这时你通常也可以找到一个更明确, 更清晰的不同解决方案<br>###3.7. 接口</p><h4 id="总述-v4"><a class="header-anchor" href="#总述-v4">¶</a>总述:</h4><p>接口是指满足特定条件的类, 这些类以 Interface 为后缀 (不强制).</p><h4 id="定义-v7"><a class="header-anchor" href="#定义-v7">¶</a>定义:</h4><p>当一个类满足以下要求时, 称之为纯接口:</p><ul><li>只有纯虚函数 (“=0”) 和静态函数 (除了下文提到的析构函数).</li><li>没有非静态数据成员.</li><li>没有定义任何构造函数. 如果有, 也不能带有参数, 并且必须为 protected.</li><li>如果它是一个子类, 也只能从满足上述条件并以 Interface 为后缀的类继承.</li></ul><p>接口类不能被直接实例化, 因为它声明了纯虚函数. 为确保接口类的所有实现可被正确销毁, 必须为之声明虚析构函数 (作为上述第 1 条规则的特例, 析构函数不能是纯虚函数). 具体细节可参考 Stroustrup 的 The C++ Programming Language, 3rd edition 第 12.4 节.</p><h4 id="优点-v7"><a class="header-anchor" href="#优点-v7">¶</a>优点:</h4><p>以 Interface 为后缀可以提醒其他人不要为该接口类增加函数实现或非静态数据成员. 这一点对于 多重继承 尤其重要. 另外, 对于 Java 程序员来说, 接口的概念已是深入人心.</p><h4 id="缺点-v8"><a class="header-anchor" href="#缺点-v8">¶</a>缺点:</h4><p>Interface 后缀增加了类名长度, 为阅读和理解带来不便. 同时, 接口属性作为实现细节不应暴露给用户.</p><p>结论</p><p>只有在满足上述条件时, 类才以 Interface 结尾, 但反过来, 满足上述需要的类未必一定以 Interface 结尾.</p><h3 id="3-8运算符重载"><a class="header-anchor" href="#3-8运算符重载">¶</a>3.8运算符重载</h3><h4 id="总述-v5"><a class="header-anchor" href="#总述-v5">¶</a>总述:</h4><p>C++ 允许用户通过使用 operator 关键字 对<a href="https://en.cppreference.com/w/cpp/language/operators" target="_blank" rel="noopener">内建运算符进行重载定义</a> , 只要其中一个参数是用户定义的类型. operator 关键字还允许用户使用 <code>operator&quot;&quot;</code> 定义新的字面运算符, 并且定义类型转换函数, 例如 <code>operator bool()</code><sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup>.</p><h4 id="优点-v8"><a class="header-anchor" href="#优点-v8">¶</a>优点:</h4><p>重载运算符可以让代码更简洁易懂, 也使得用户定义的类型和内建类型拥有相似的行为. 重载运算符对于某些运算来说是符合符合语言习惯的名称 (例如 ==, &lt;, =, &lt;&lt;), 遵循这些语言约定可以让用户定义的类型更易读, 也能更好地和需要这些重载运算符的函数库进行交互操作.</p><p>对于创建用户定义的类型的对象来说, 用户定义字面量是一种非常简洁的标记.</p><h4 id="缺点-v9"><a class="header-anchor" href="#缺点-v9">¶</a>缺点:</h4><ul><li>要提供正确, 一致, 不出现异常行为的操作符运算需要花费不少精力, 而且如果达不到这些要求的话, 会导致令人迷惑的 Bug.</li><li>过度使用运算符会带来难以理解的代码, 尤其是在重载的操作符的语义与通常的约定不符合时.<br>函数重载有多少弊端, 运算符重载就至少有多少.</li><li>运算符重载会混淆视听, 让你误以为一些耗时的操作和操作内建类型一样轻巧.</li><li>对重载运算符的调用点的查找需要的可就不仅仅是像 grep 那样的程序了, 这时需要能够理解 C++ 语法的搜索工具.</li><li>如果重载运算符的参数写错, 此时得到的可能是一个完全不同的重载而非编译错误. 例如: <code>foo &lt; bar</code> 执行的是一个行为, 而 <code>&amp;foo &lt; &amp;bar</code> 执行的就是完全不同的另一个行为了.</li><li>重载某些运算符本身就是有害的. 例如, 重载一元运算符 &amp; 会导致同样的代码有完全不同的含义, 这取决于重载的声明对某段代码而言是否是可见的. 重载诸如 &amp;&amp;, || 和 , 会导致运算顺序和内建运算的顺序不一致.</li><li>运算符从通常定义在类的外部, 所以对于同一运算, 可能出现不同的文件引入了不同的定义的风险. 如果两种定义都链接到同一二进制文件, 就会导致未定义的行为, 有可能表现为难以发现的运行时错误.</li><li>用户定义字面量所创建的语义形式对于某些有经验的 C++ 程序员来说都是很陌生的.</li></ul><h4 id="结论-v10"><a class="header-anchor" href="#结论-v10">¶</a>结论:</h4><p>只有在意义明显, 不会出现奇怪的行为并且与对应的内建运算符的行为一致时才定义重载运算符. 例如, <code>|</code> 要作为位或或逻辑或来使用, 而不是作为 shell 中的管道.</p><p>只有对用户自己定义的类型重载运算符. 更准确地说, 将它们和它们所操作的类型定义在同一个头文件中, <code>.cc</code> 中和命名空间中. 这样做无论类型在哪里都能够使用定义的运算符, 并且最大程度上避免了多重定义的风险. 如果可能的话, 请避免将运算符定义为模板, 因为此时它们必须对任何模板参数都能够作用. 如果你定义了一个运算符, 请将其相关且有意义的运算符都进行定义, 并且保证这些定义的语义是一致的. 例如, 如果你重载了 <code>&lt;</code>, 那么请将所有的比较运算符都进行重载, 并且保证对于同一组参数, <code>&lt;</code> 和 <code>&gt;</code> 不会同时返回 <code>true</code>.</p><p>建议不要将不进行修改的二元运算符定义为成员函数. 如果一个二元运算符被定义为类成员, 这时隐式转换会作用域右侧的参数却不会作用于左侧. 这时会出现 <code>a &lt; b</code> 能够通过编译而 <code>b &lt; a</code> 不能的情况, 这是很让人迷惑的.</p><p>不要为了避免重载操作符而走极端. 比如说, 应当定义 <code>==</code>,<code> =</code>, 和 <code>&lt;&lt;</code> 而不是 <code>Equals()</code>, <code>CopyFrom() </code>和 <code>PrintTo()</code>. 反过来说, 不要只是为了满足函数库需要而去定义运算符重载. 比如说, 如果你的类型没有自然顺序, 而你要将它们存入 <code>std::set</code> 中, 最好还是定义一个自定义的比较运算符而不是重载 <code>&lt;</code>.</p><p>不要重载 <code>&amp;&amp;</code>, <code>||</code>, , 或一元运算符 <code>&amp;</code>. 不要重载 <code>operator&quot;&quot;</code>, 也就是说, 不要引入用户定义字面量.</p><h3 id="3-9-存取控制"><a class="header-anchor" href="#3-9-存取控制">¶</a>3.9 存取控制</h3><p>将 所有 数据成员声明为 <code>private</code>, 除非是 <code>static const</code> 类型成员 (遵循 常量命名规则). 处于技术上的原因, 在使用 Google Test 时我们允许测试固件类中的数据成员为 <code>protected</code>.</p><h3 id="3-10-声明顺序"><a class="header-anchor" href="#3-10-声明顺序">¶</a>3.10 声明顺序</h3><h4 id="总述-v6"><a class="header-anchor" href="#总述-v6">¶</a>总述:</h4><p>将相似的声明防在一起,<code>public</code>部分放在最前边</p><h4 id="说明"><a class="header-anchor" href="#说明">¶</a>说明:</h4><p>类定义一般应以 <code>public</code>: 开始, 后跟 <code>protected</code>:, 最后是 <code>private</code>:. 省略空部分.</p><p>在各个部分中, 建议将类似的声明放在一起, 并且建议以如下的顺序: 类型 (包括 <code>typedef</code>, <code>using</code> 和嵌套的结构体与类), 常量, 工厂函数, 构造函数, 赋值运算符, 析构函数, 其它函数, 数据成员.</p><p>不要将大段的函数定义内联在类定义中. 通常，只有那些普通的, 或性能关键且短小的函数可以内联在类定义中. 参见 <a href="#inner">内联函数</a> 一节.</p><h3 id="译者笔记-v2"><a class="header-anchor" href="#译者笔记-v2">¶</a>译者笔记</h3><ul><li>不再构造函数中做过多的逻辑相关初始化</li><li>编译器提供的默认构造器不会对变量进行初始化(此处应该是说符合用户要求的值),当主动添加构造器后,默认构造器不会被编译器再添加</li><li>为了避免隐式转换,将单参数构造器声明为<code>explicit</code></li><li>为避免拷贝构造函数, 赋值操作的滥用和编译器自动生成, 可将其声明为 <code>private</code> 且无需实现 或使用<code>delete</code>(c11)</li><li>仅仅作为数据载体时使用<code>struct</code></li><li>组合 &gt; 实现继承 &gt; 接口继承 &gt; 私有继承, 子类重载的虚函数也要声明 <code>virtual</code> 关键字, 虽然编译器允许不这样做;</li><li>避免多继承</li><li>接口使用<code>Interface</code>为后缀命名,除了提供带实现的虚析构函数,静态成员外,其他均为纯虚函数<sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></li><li>为降低复杂性, 尽量不重载操作符, 模板, 标准类中使用时提供文档说明</li><li>存取函数一般内联在头文件中</li><li>声明次序: public -&gt; protected -&gt; private;</li></ul><h2 id="四、函数"><a class="header-anchor" href="#四、函数">¶</a>四、函数</h2><h3 id="4-1-参数顺序"><a class="header-anchor" href="#4-1-参数顺序">¶</a>4.1 参数顺序</h3><h4 id="总述-v7"><a class="header-anchor" href="#总述-v7">¶</a>总述:</h4><p>函数的顺序为,输入在前,输出在后</p><h4 id="说明-v2"><a class="header-anchor" href="#说明-v2">¶</a>说明:</h4><p>C/C++ 中的函数参数或者是函数的输入, 或者是函数的输出, 或兼而有之. 输入参数通常是值参或 <code>const</code> 引用, 输出参数或输入/输出参数则一般为非 <code>const</code> 指针. 在排列参数顺序时, 将所有的输入参数置于输出参数之前. 特别要注意, 在加入新参数时不要因为它们是新参数就置于参数列表最后, 而是仍然要按照前述的规则, 即将新的输入参数也置于输出参数之前.</p><p>这并非一个硬性规定. 输入/输出参数 (通常是类或结构体) 让这个问题变得复杂. 并且, 有时候为了其他函数保持一致, 你可能不得不有所变通.</p><h3 id="4-2编写简短函数"><a class="header-anchor" href="#4-2编写简短函数">¶</a>4.2编写简短函数</h3><h4 id="总述-v8"><a class="header-anchor" href="#总述-v8">¶</a>总述:</h4><p>尽量编写简短,凝练的函数</p><h4 id="说明-v3"><a class="header-anchor" href="#说明-v3">¶</a>说明:</h4><p>我们承认长函数有时是合理的, 因此并不硬性限制函数的长度. 如果函数超过 40 行, 可以思索一下能不能在不影响程序结构的前提下对其进行分割.</p><p>即使一个长函数现在工作的非常好, 一旦有人对其修改, 有可能出现新的问题, 甚至导致难以发现的 bug. 使函数尽量简短, 以便于他人阅读和修改代码.</p><p>在处理代码时, 你可能会发现复杂的长函数. 不要害怕修改现有代码: 如果证实这些代码使用 / 调试起来很困难, 或者你只需要使用其中的一小段代码, 考虑将其分割为更加简短并易于管理的若干函数.<sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></p><h3 id="4-3引用参数"><a class="header-anchor" href="#4-3引用参数">¶</a>4.3引用参数</h3><h4 id="总述-v9"><a class="header-anchor" href="#总述-v9">¶</a>总述:</h4><p>所有按照引用传递的参数必须加上<code>const</code></p><h4 id="定义-v8"><a class="header-anchor" href="#定义-v8">¶</a>定义</h4><p>在 C 语言中, 如果函数需要修改变量的值, 参数必须为指针, 如 int foo(int *pval). 在 C++ 中, 函数还可以声明为引用参数: int foo(int &amp;val).</p><h4 id="优点-v9"><a class="header-anchor" href="#优点-v9">¶</a>优点</h4><p>定义引用参数可以防止出现 (*pval)++ 这样丑陋的代码. 引用参数对于拷贝构造函数这样的应用也是必需的. 同时也更明确地不接受空指针.</p><h4 id="缺点-v10"><a class="header-anchor" href="#缺点-v10">¶</a>缺点</h4><p>容易引起误解, 因为引用在语法上是值变量却拥有指针的语义.</p><h4 id="结论-v11"><a class="header-anchor" href="#结论-v11">¶</a>结论:</h4><p>函数参数列表中,所有的引用参数都必须是<code>const</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Foo</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;in,<span class="built_in">string</span> *out)</span></span>;</span><br></pre></td></tr></table></figure><p>事实上这在 Google Code 是一个硬性约定: 输入参数是值参或 const 引用, 输出参数为指针. 输入参数可以是 const 指针, 但决不能是非 const 的引用参数, 除非特殊要求, 比如 swap().</p><p>有时候, 在输入形参中用 const T* 指针比 const T&amp; 更明智. 比如:</p><ul><li>可能会传递空指针.</li><li>函数要把指针或对地址的引用赋值给输入形参.</li></ul><p>总而言之, 大多时候输入形参往往是 const T&amp;. 若用 const T* 则说明输入另有处理. 所以若要使用 const T*, 则应给出相应的理由, 否则会使得读者感到迷惑.</p><h3 id="4-4函数重载"><a class="header-anchor" href="#4-4函数重载">¶</a>4.4函数重载</h3><h4 id="总述-v10"><a class="header-anchor" href="#总述-v10">¶</a>总述:</h4><p>若要使用函数重载, 则必须能让读者一看调用点就胸有成竹, 而不用花心思猜测调用的重载函数到底是哪一种. 这一规则也适用于构造函数.</p><h4 id="定义-v9"><a class="header-anchor" href="#定义-v9">¶</a>定义:</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Analyze</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp;<span class="built_in">text</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Analyze</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">text</span>, <span class="keyword">size_t</span> textlen)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="缺点-v11"><a class="header-anchor" href="#缺点-v11">¶</a>缺点:</h4><p>如果函数单靠不同的参数类型而重载 (acgtyrant 注：这意味着参数数量不变), 读者就得十分熟悉 C++ 五花八门的匹配规则, 以了解匹配过程具体到底如何. 另外, 如果派生类只重载了某个函数的部分变体, 继承语义就容易令人困惑.</p><h4 id="结论-v12"><a class="header-anchor" href="#结论-v12">¶</a>结论:</h4><p>如果打算重载一个函数, 可以试试改在函数名里加上参数信息. 例如, 用 <code>AppendString()</code> 和 <code>AppendInt()</code> 等, 而不是一口气重载多个 <code>Append()</code>. 如果重载函数的目的是为了支持不同数量的同一类型参数, 则优先考虑使用 std::vector 以便使用者可以用 列表初始化 指定参数.<sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup></p><h3 id="4-5缺省参数"><a class="header-anchor" href="#4-5缺省参数">¶</a>4.5缺省参数</h3><h4 id="总述-v11"><a class="header-anchor" href="#总述-v11">¶</a>总述</h4><p>只允许在非虚函数中使用,却必须保证缺省参数的值始终一致.</p><h4 id="优点-v10"><a class="header-anchor" href="#优点-v10">¶</a>优点:</h4><p>有些函数一般情况下使用默认参数, 但有时需要又使用非默认的参数. 缺省参数为这样的情形提供了便利, 使程序员不需要为了极少的例外情况编写大量的函数. 和函数重载相比, 缺省参数的语法更简洁明了, 减少了大量的样板代码, 也更好地区别了 “必要参数” 和 “可选参数”.</p><h4 id="缺点-v12"><a class="header-anchor" href="#缺点-v12">¶</a>缺点:</h4><p>缺省参数实际上是函数重载语义的另一种实现方式,因此所有不应当使用函数重载的理由,也都适用于缺省<sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup></p><p>虚函数调用的缺省参数取决于目标对象的静态类型,此时无法保证给定函数的所有重载声明的都是同样的缺省参数.</p><p>缺省参数是在每个调用点都要进行重新求值的, 这会造成生成的代码迅速膨胀. 作为读者, 一般来说也更希望缺省的参数在声明时就已经被固定了, 而不是在每次调用时都可能会有不同的取值.</p><p>缺省参数会干扰函数指针, 导致函数签名与调用点的签名不一致. 而函数重载不会导致这样的问题</p><h4 id="结论-v13"><a class="header-anchor" href="#结论-v13">¶</a>结论:</h4><p>对于虚函数, 不允许使用缺省参数, 因为在虚函数中缺省参数不一定能正常工作. 如果在每个调用点缺省参数的值都有可能不同, 在这种情况下缺省函数也不允许使用. (例如, 不要写像 <code>void f(int n = counter++);</code> 这样的代码.)</p><p>在其他情况下, 如果缺省参数对可读性的提升远远超过了以上提及的缺点的话, 可以使用缺省参数. 如果仍有疑惑, 就使用函数重载.</p><h3 id="4-6函数返回类型后置语句"><a class="header-anchor" href="#4-6函数返回类型后置语句">¶</a>4.6函数返回类型后置语句</h3><h4 id="总述-v12"><a class="header-anchor" href="#总述-v12">¶</a>总述:</h4><p>只有在常规写法不便的时候,才会采用后置返回类型</p><h4 id="定义-v10"><a class="header-anchor" href="#定义-v10">¶</a>定义:</h4><p>C++11 引入了这一新的形式. 现在可以在函数名前使用 auto 关键字, 在参数列表之后后置返回类型. 例如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto foo (int x)-&gt;int;</span><br></pre></td></tr></table></figure><h4 id="优点-v11"><a class="header-anchor" href="#优点-v11">¶</a>优点:</h4><p>后置返回类型显示地制定<a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">lambda表达式</a>的返回值的唯一方式,某些情况下编译器可以自动推断出lambda返回值类,但并且所有情况都可以,所以主动声明.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T, class U&gt; auto add(T t, U u) -&gt; decltype(t + u);</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class T, class U&gt; decltype(declval&lt;T&amp;&gt;() + declval&lt;U&amp;&gt;()) add(T t, U u);</span><br><span class="line">&#x2F;&#x2F;此处使用的decltype(t+v) 只能去理解为t+v之后的类型</span><br></pre></td></tr></table></figure><h4 id="缺点-v13"><a class="header-anchor" href="#缺点-v13">¶</a>缺点:</h4><p>后置返回类型相对来说是非常新的语法, 而且在 C 和 Java 中都没有相似的写法, 因此可能对读者来说比较陌生.</p><p>在已有的代码中有大量的函数声明, 你不可能把它们都用新的语法重写一遍. 因此实际的做法只能是使用旧的语法或者新旧混用. 在这种情况下, 只使用一种版本是相对来说更规整的形式.</p><h4 id="结论-v14"><a class="header-anchor" href="#结论-v14">¶</a>结论:</h4><p>在大部分情况下, 应当继续使用以往的函数声明写法, 即将返回类型置于函数名前. 只有在必需的时候 (如 Lambda 表达式) 或者使用后置语法能够简化书写并且提高易读性的时候才使用新的返回类型后置语法. 但是后一种情况一般来说是很少见的, 大部分时候都出现在相当复杂的模板代码中, 而多数情况下不鼓励写这样 复杂的模板代码.</p><h3 id="五、其他c-特性"><a class="header-anchor" href="#五、其他c-特性">¶</a>五、其他c++特性</h3><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>此处的表示编译过程我不是非常了解 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>这个例子的原因我没看懂 <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>这里就要明白作用域的范围, 文件 函数 {} 都是作用范围标识 <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>原生数据类型 (POD : Plain Old Data): 即 int, char 和 float, 以及 POD 类型的指针、数组和结构体。 <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>此部分说明要通过实践来理解,理解为静态类类型在程序中不是你确定构造和析构,具体见<code>静态储存周期</code> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>这种情况应该是见过 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p>要了解智能指针相关 <a href="#fnref7" class="footnote-backref">↩︎</a></p></li><li id="fn8" class="footnote-item"><p>此处是指通过静态函数来构建对象,并且在该函数中进行对象检查,并向上层提出是否发生错误 <a href="#fnref8" class="footnote-backref">↩︎</a></p></li><li id="fn9" class="footnote-item"><p>c11中可以通过<code>delete</code>关键字禁止函数,否则应该要使用<code>private</code>权限 <a href="#fnref9" class="footnote-backref">↩︎</a></p></li><li id="fn10" class="footnote-item"><p>c++多态是通过引用 以及指针进行语法调用的,通过值则会导致对象切割 <a href="#fnref10" class="footnote-backref">↩︎</a></p></li><li id="fn11" class="footnote-item"><p>如果想要进行子类重写父类方法,那么父类方法必须是<code>virtual</code>修饰,当父类和子类函数签名相同时,这两个方式实质上并非是override关系 <a href="#fnref11" class="footnote-backref">↩︎</a></p></li><li id="fn12" class="footnote-item"><p>该操作符重载使用在如   class A{bool operator bool(){code…}},if(a),此时就会调用该函数 <a href="#fnref12" class="footnote-backref">↩︎</a></p></li><li id="fn13" class="footnote-item"><p>当类中存在纯虚函数时,该类不能被实例化,理解为java的抽象类 <a href="#fnref13" class="footnote-backref">↩︎</a></p></li><li id="fn14" class="footnote-item"><p>这里对于逻辑处理的函数来说,如果都是由if /else等组成的低级代码,其长度是由于编写者水平引起的,还是本身就是这样? <a href="#fnref14" class="footnote-backref">↩︎</a></p></li><li id="fn15" class="footnote-item"><p>此处表示可变参数不如使用vector,可变参数在c++的实现方式并不是数组 <a href="#fnref15" class="footnote-backref">↩︎</a></p></li><li id="fn16" class="footnote-item"><p>完全可以将缺省参数 type var=x 这个条语句作为函数内部代码, 这样就和不含缺省的函数形成了重载关系,也就是说java只是在语法上不支持所谓的缺省 <a href="#fnref16" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
